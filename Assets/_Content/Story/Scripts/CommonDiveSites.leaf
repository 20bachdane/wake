#basePath   commonDiveSite

:: partner.onScan.probeHackerNotAcquired.1
@trigger    ScannedObject
@when       scanId == "tools.probeHacker.disabled"
@chatter
@repeat     1
$set    player:noProbeHacker.triedToScan = true
{@guide}    I don't think we have the necessary equipment for this yet.

:: partner.onScan.probeHackerNotAcquired.2
@trigger    ScannedObject
@when       scanId == "tools.probeHacker.disabled"
@chatter
@repeat     1
$set    player:noProbeHacker.triedToScan = true
{@guide}    Looks like we'll need some new equipment if we're going to scan these probes.


// intro scripts

:: generic.tagger.intro
@trigger    SceneStart
@boostScore 1051 // arbitraryily high number
@when		HasUpgrade(ROVTagger), !jobs:common-dive.seen.tagger-intro
@once
@cutscene

{@guide}	Your new {nameof ROVTagger} allows you to count species populations.
{@guide}	Once you've {h}scanned{/h} a species, switch to the {nameof ROVTagger} and move close to one of them to {h}count{/h} it.
			Count enough of them and your {nameof ROVTagger} will do the rest and give you a population estimate.
$set    jobs:common-dive.seen.tagger-intro = true
$if HasUpgrade(ProbeHacker), !jobs:common-dive.seen.probe-intro
	{@guide}	Also...
	$goto .generic.probe-hacker.intro
$endif
			
:: generic.probe-hacker.intro
@trigger    SceneStart
@boostScore 1050 // arbitraryily high number
@when		HasUpgrade(ProbeHacker)
@once
@cutscene

{@guide}	Now that you have the {nameof ProbeHacker}, you can gather additional data from probes!
{@guide}	When you see a probe, move close and scan it.
{@guide}	The {nameof ProbeHacker} will download the data to your {item-name}AQOS Tablet{/item-name}!
$set    jobs:common-dive.seen.probe-intro = true

:: generic.micro.intro
@trigger    SceneStart
@when		HasUpgrade(Microscope), !jobs:common-dive.seen.micro-intro
@once
@cutscene

{@guide}	Your new {nameof Microscope} allows you to scan and count microscopic species!
            You can click to activate your {nameof Microscope} at the top of your task bar or by pressing the [5] on your keyboard.
$set    jobs:common-dive.seen.micro-intro = true


// Specters

:: specterTrigger.1
@trigger    PlayerSpecter
@when       specterIndex = 0
@cutscene
// first specter
{wait 1}
$call Specter->Spawn()
{@player}	Whoa! {nameof @guide}, what is that thing?? 
$call Specter->Scan(3)
{@guide}  Data inconclusive.
{@player} Wow... it looks like a ghost.
{@player} Where did it come from?
{@guide} Sensors indicate that the anomaly was sent by Challenger Deep.
{@player} That's where Sam is! They must've gotten the probe back online!
{@player} But why would they send this to us? 
$call GiveJournalEntry("S01")

:: specterTrigger.2
@trigger    PlayerSpecter
@when       specterIndex = 1
@cutscene
// second specter
{wait 1}
$call Specter->Spawn()
{@player}	Wow... another one of those glitchy ghost species!
            Can you pinpoint its origin, {nameof @guide}?
$call Specter->Scan(3)
{@guide}	Certainly, O. The specter originated at Challenger Deep.
{@player}	That must be Sam again!
            But... why did they send us this... this ghost thing? 
{@guide}	Data inconclusive, O.
$call GiveJournalEntry("S02")

:: specterTrigger.3 // Dinnerjelly
@trigger    PlayerSpecter
@when       specterIndex = 2
@cutscene
// third specter
{wait 1}
$call Specter->Spawn()
{@player}   Wow. Another one.
            Are you able to get the source location, {nameof @guide}?
$call Specter->Scan(3)
{@guide}	Affirmative, O. Point of origin: the Challenger Deep probe.
{@player}	I don't understand. Why does Sam keep sending me these ghosts?
            Why haven't they contacted us? 
{@guide}	I'm sorry, O. The data is inconclusive.
$call GiveJournalEntry("S07") // dinnerJelly

:: specterTrigger.4
@trigger    PlayerSpecter
@when       specterIndex = 3
@cutscene
// fourth specter
{wait 1}
$call Specter->Spawn()
$call Specter->Scan(4)
{@player}	Oh no. Another ghost.
{@player}   {nameof @guide}, can you try contacting Sam on the Nautilus?
{@guide}	Apologies, O. I cannot get a message through.
$call GiveJournalEntry("S04")

:: specterTrigger.5
@trigger    PlayerSpecter
@when       specterIndex = 4
@cutscene
// fifth specter
{wait 1}
$call Specter->Spawn()
$call Specter->Scan(4)
{@player}	Another ghost from Sam.
            Something must be wrong {nameof @guide}.
{@guide}	Yes. At this point, the probability of Sam returning safely on their own are 21.4%.
{@player}   I need to go home and tell Mom.
            I just hope she'll listen.
$call GiveJournalEntry("S05")

:: specterTrigger.6 //flapjack
@trigger    PlayerSpecter
@when       specterIndex = 5
@cutscene
// sixth specter
{wait 1}
$call Specter->Spawn()
$call Specter->Scan(4)
{@player}	Another ghost.
            I think Sam needs our help, {nameof @guide}. 
{@guide}	Your mother suggested that Sam is fine. 
{@player}	Yeah. Well, she also told me Mer wanted to spend her whole life studying the otters...
            Turns out that wasn't true either.
            Next time I'm home, I'll talk to Tío. Maybe he can help. 
$call GiveJournalEntry("S03") // flapjack

:: specterTrigger.7 // goassamer
@trigger    PlayerSpecter
@when       specterIndex = 6
@cutscene
// seventh specter
{wait 1}
$call Specter->Spawn()
$call Specter->Scan(5)
{@player}	Ugh. I don't know what to do, {nameof @guide}.
            We need to unscramble all this data!
            Can you try contacting the Nautilus? 
{@guide}	Processing... processing...
            I'm sorry, O.| The Nautilus is still unreachable.
{hide-dialog}{wait 1}
$call GiveJournalEntry("S06") //goassamer worm

:: specterTrigger.8
@trigger    PlayerSpecter
@when       specterIndex = 7
@cutscene
// eighth specter
{wait 1}
$call Specter->Spawn()
$call Specter->Scan(3)
{@player}   Whoa. {nameof @guide}, what is that? 
            A jellyfish? Some kind of crustacean?
{@guide}    I don't believe so, O. 
            The transmission size was too large, so only a portion of the image came through.
{@player}   Yikes. That's not terrifying at all.
{@player}   So what are we looking at here? 
{@guide}    It appears that this is only the eye of a much larger creature.
{@player}   Whoa. An eye?!  
            {nameof @guide}, what are we going to do? Sam is down there with a monster!

// Tio tells you to return ASAP
$branch common.ringPhone

{@kelpMechanic} Mijita, it's me. Are you there? 
{@player} Tío! <i>Please</i> tell me you've got good news!
{@kelpMechanic} Sí, mijita. I found the Ammonite upgrade for {nameof @guide}!
{@player}       Yes! Thank you, Tío!
{@kelpMechanic} De nada, Ollie.
                Mer had stored the upgrade on an old data card of hers.
                Took forever to find... had to dig through all her old boxes.
                Come talk to me at the Forested Lagoon, and I'll get the upgrade added to your card!
$set jobs:final-final.upgradeReady = true
$set jobs:final-final.tio.code-received = false
$call GiveJournalEntry("S08")

// Temp Hack: should unlock all facts for all specters you have automatically
$call GiveFact(ColossalSquid.Eats.ViperFish, Silent)
$call GiveFact(ColossalSquid.Eats.AnglerFish, Silent)
$call GiveFact(ColossalSquid.Eats.GoassamerWorm, Silent)

$call GiveFact(DinnerJelly.Eats.AnglerFish, Silent)
$call GiveFact(DinnerJelly.Eats.BloodJelly, Silent)
$call GiveFact(DinnerJelly.Eats.FlapjackOcto, Silent)
$call GiveFact(DinnerJelly.Eats.GoassamerWorm, Silent)
$call GiveFact(DinnerJelly.Eats.MysidShrimp, Silent)
$call GiveFact(DinnerJelly.Eats.ViperFish, Silent)

$call GiveFact(AnglerFish.Eats.GoassamerWorm, Silent)
$call GiveFact(AnglerFish.Eats.ArcticCopepod, Silent)

$call GiveFact(FlapjackOcto.Eats.GoassamerWorm, Silent)

$call GiveFact(BloodJelly.Eats.GoassamerWorm, Silent)

$call GiveFact(GoassamerWorm.Eats.Detritus, Silent)

$call GiveFact(MysidShrimp.Eats.Detritus, Silent)

$call GiveFact(ViperFish.Eats.GoassamerWorm, Silent)

// fun little responses

:: dashRamIntoWall.increment
@function    ROVDashCollision
$if TimeElapsed($temp:lastDashImpactTS, 3) // max three second intervals between collisions to trigger this
    $set         temp:dashImpactCounter = 1
$else
    $set        temp:dashImpactCounter + 1

    $if temp:dashImpactCounter > player:maxDashImpactsInRow
        $set    player:maxDashImpactsInRow = temp:dashImpactCounter
    $endif
$endif

$set        temp:lastDashImpactTS = time:now

:: dashRamIntoWall.talkAfterALot
@trigger    RequestPartnerHelp 
@when       !global:seriousMode, !TimeElapsed($temp:lastDashImpactTS, 15), temp:dashImpactCounter >= 20
@once
@cutscene
$set    player:hadDashImpactDizzyConversation = true
{@player}   V...{wait 0.5} I'm a |little| dizzy.
{@guide #confused} There is a 95.2% chance that is a |direct| result of repeated collisions.
{@player}   {slow}...Right.| I need a moment.{/slow}
{hide-dialog} {fade-out black, 1, wait} {wait 2} {fade-in 1, wait} {wait 0.2}
{@guide #raisedEyebrow}    Are you feeling better, O?
{hide-dialog} {wait 2.5}
{@player}   Probably.

:: dashRamIntoWall.firstWarning
@trigger    ROVDashCollision
@when       !global:seriousMode, temp:dashImpactCounter >= 5
@who        guide
@boostScore 10
@cutscene
@once
$set    temp:dashImpactCounter = 0
$set    temp:lastDashImpactTS = 0
{wait 1}
{@guide #narrow}    O, I predict a 34.9% chance of damage if you continue to ram us into things.
$if HasUpgrade("Hull")
    {@player}   Relax, V. Won't the {nameof Hull} protect us?
    {@guide} From pressure?| Yes.{wait 0.5}{#narrow} From a puncture as the result of collision?| Less likely.
$else
    {@player}   Relax, V. I'm being careful.
    {@guide #narrow}    ...I am obligated to note you also run the risk of a concussion.
$endif

:: dashRamIntoWall.warning.1
@trigger    ROVDashCollision
@when       !global:seriousMode, temp:dashImpactCounter == 5
@who        guide
@chatter
@repeat     2
@once
{@guide}    O... what are you doing?

:: dashRamIntoWall.warning.2
@trigger    ROVDashCollision
@when       !global:seriousMode, temp:dashImpactCounter == 10
@who        guide
@interrupt
@chatter
@repeat     2
{@guide}    Are you doing this intentionally?

:: dashRamIntoWall.warning.3
@trigger    ROVDashCollision
@when       !global:seriousMode, temp:dashImpactCounter == 15
@who        guide
@interrupt
@chatter
@repeat     2
{@guide}    There is a chance of a hull puncture if you continue.

:: dashRamIntoWall.warning.4
@trigger    ROVDashCollision
@when       !global:seriousMode, temp:dashImpactCounter == 20
@who        guide
@interrupt
@chatter
@repeat     2
{@guide}    Are you even listening to me, O?

:: dashRamIntoWall.warning.5
@trigger    ROVDashCollision
@when       !global:seriousMode, temp:dashImpactCounter == 25
@who        guide
@interrupt
@chatter
@once
{@guide}    ...logging incident...
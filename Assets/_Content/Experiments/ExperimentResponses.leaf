#basePath   partner.talk.experiment

:: behavior.newObservation.1
@trigger    NewBehaviorObserved
@who        guide
@repeat 1
@chatter
$set temp:newObservationTimer = 0
{@guide}    Nice one! 

:: behavior.newObservation.2
@trigger    NewBehaviorObserved
@who        guide
@repeat 1
@chatter
$set temp:newObservationTimer = 0
{@guide}    Good catch.

:: behavior.idle.nothingLeft.1
@trigger    ExperimentIdle
@when       newFactsLeft == 0
@who        guide
@repeat 1
@chatter
{@guide}    I think we might be done here?

:: behavior.idle.nothingLeft.2
@trigger    ExperimentIdle
@when       newFactsLeft == 0
@who        guide
@repeat 1
@chatter
{@guide}    I don't think there's anything left for us to observe.

:: behavior.idle.nothingLeft.missedSome.1
@trigger    ExperimentIdle
@when       newFactsLeft == 0, missedFacts > 0
@who        guide
@repeat 1
@chatter
{@guide}    Well, we might have missed something... we should finish up and restart this experiment.

:: behavior.idle.nothingLeft.missedSome.2
@trigger    ExperimentIdle
@when       newFactsLeft == 0, missedFacts > 0
@who        guide
@repeat 1
@chatter
{@guide}    I feel like we missed something... we should finish this up and restart the experiment.

:: behavior.idle.somethingLeft.noCircles.1
@trigger    ExperimentIdle
@when       newFactsLeft > 0, temp:behaviorCirclesSeen == 0
@who        guide
@repeat 1
@chatter
{@guide}    Let's be patient, I think there might be something here to observe.

:: behavior.idle.somethingLeft.noCircles.2
@trigger    ExperimentIdle
@when       newFactsLeft > 0
@who        guide
@repeat 1
@chatter
{@guide}    I'm pretty sure there's something new here to observe...

:: behavior.idle.somethingLeft.1
@trigger    ExperimentIdle
@when       newFactsLeft > 0
@who        guide
@repeat 1
@chatter
{@guide}    Let's wait for another opportunity to observe a behavior.

:: behavior.idle.somethingLeft.2
@trigger    ExperimentIdle
@when       newFactsLeft > 0
@who        guide
@repeat 1
@chatter
{@guide}    We've already seen something - maybe there's something else to observe?

// intro scripts

:: generic.observation-tank.intro
@trigger	ExperimentTankViewed
@boostScore 1052 // arbitrarily high number
@when		tankType == "Observation"
@once
@cutscene
{@guide}	This is the {h}{nameof ObservationTank}{/h}. 
            Click the {h}Add Water{/h} button to fill the tank.
            Then you'll select an {h}Environment{/h}, click {h}Add Organisms{/h}, and select each organism you want to observe interacting.
			Once you have things how you like it, click the {h}Run Experiment{/h} button.
            You'll need to record how the different life forms interact!

:: generic.stress-tank.intro
@trigger	ExperimentTankViewed
@boostScore 1051 // arbitrarily high number
@when		tankType == "Stress"
@once
@cutscene
{@guide}	This is the {h}{nameof StressTank}{/h}.
			Once you start an experiment, there will be sliders on the bottom.
			Moving the sliders affects the tank conditions.
			They will auto adjust to make sure the organisms don't get hurt.

:: generic.measurement-tank.intro
@trigger	ExperimentTankViewed
@boostScore 1050 // arbitrarily high number
@when		tankType == "Measurement"
@once
@cutscene
{@guide}	This is the {h}{nameof MeasurementTank}{/h}.
			We can use it to gather numerical facts that we'll need to run simulations in the Modeling Lab.
			First you will select an {h}Environment{/h}.
			Some environments will stress organisms, others will not. Don't be afraid to select ecosystems outside of your current job!
			Then you will select the {h}Organisms{/h} you are trying to measure something about.
			After that, you can set the {nameof WaterStabilizer} or the {nameof AutoFeeder} if you have them.
			Click the {h}Add Water{/h} button to get started!
$if JobInProgress(kelp-musselfest-solution)
	$set jobs:kelp-mussel-fest-solution.inMeasurement = true
$endif

:: generic.measurement-tank.request-intro
@trigger	RequestPartnerHelp
@boostScore -2
@when		!jobs:generic.measurementCompleted, ExperimentViewed(2) // 2 = Measurement
@cutscene
{@guide}	This is the {h}{nameof MeasurementTank}{/h}.
			We can use it to gather numerical facts that we'll need to run simulations in the Modeling Lab.
			First you will select an {h}Environment{/h}.
			Some environments will stress organisms, others will not. Don't be afraid to select ecosystems outside of your current job!
			Then you will select the {h}Organisms{/h} you are trying to measure something about.
			After that, you can set the {nameof WaterStabilizer} or the {nameof AutoFeeder} if you have them.

:: generic.measurement-tank.track-complete
@trigger	ExperimentFinished
@boostScore -5
@when		tankType == "Measurement"
@cutscene
$set jobs:generic.measurementCompleted = true
			
:: generic.features.intro
@trigger	ExperimentScreenViewed
@boostScore 1049 // arbitrarily high number
@when		screenId == "measurement.features"//, HasUpgrade(WaterStabilizer)
@once
@cutscene
{@guide}	Here is where you can modify tank features to measure different types of facts.
			Deactivate the {h}{nameof WaterStabilizer}{/h} if you want to see how an organism affects its environment,
			or turn off the {nameof AutoFeeder} if you want to measure eating rates.
			Leaving both active will allow you to measure reproduction rates.
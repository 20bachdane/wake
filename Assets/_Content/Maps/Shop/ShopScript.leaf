# basePath shop

// player:shopFreeCoolDown = 0
// player:shopFreeCount = 0
// shop:hasDonated = false

// entrance

:: welcome
@trigger    ShopReady
@cutscene
@once

{@merchant} Oh, welcome! Haven't seen your face before!
            {nameof @merchant} at your service!
            Feel free to browse at your leisure!
            
// inspect shopkeeper

// :: talk.flyingShip
// @trigger    InspectObject
// @when       objectId == "shopkeeper"
// @cutscene
// @boostScore 10
// @once
// 
// {@kevin}    So this is a flying shop?
//             How'd you manage that?
// {@merchant} I have my ways!
// {@kevin #confused}  ...That's not exactly an answer.

:: talk.base.1
@trigger    InspectObject
@when       objectId == "shopkeeper"
@cutscene
@repeat 1

{@merchant} See anything you like? Just give it a tap and I'll give you the details.

:: talk.base.2
@trigger    InspectObject
@when       objectId == "shopkeeper"
@cutscene
@repeat 1

{@merchant} Just let me know if there's anything that catches your eye.

// :: talk.rare.1
// @trigger    InspectObject
// @when       objectId == "shopkeeper"
// @when       Random(common)
// @cutscene
// @once
// 
// {@kevin}    No, seriously, a |flying| shop??
// {@merchant} Why not? Most of my customers roam the ocean. Staying put didn't make sense.

// credit

:: talk.credit.1
@trigger    InspectObject
@when       objectId == "shopkeeper"
@when       shop:lastFailure, shop:lastFailureReason == "cash", !shop:hasDonated
@cutscene
@repeat     2

{@kevin}    Any chance we could just| have| the {nameof $shop:lastFailure} for free?
$if player:shopFreeCoolDown <= 0, player:shopFreeCount < 4
    $branch .generosity
$elseif player:shopFreeCount >= 4
    {@merchant} ...
$else
    {@merchant} Not| a| chance.
$endif // 

:: talk.credit.2
@trigger    InspectObject
@when       objectId == "shopkeeper"
@when       shop:lastFailure, shop:lastFailureReason == "exp"
@cutscene
@repeat     2

{@kevin}    Could you just, uh... overlook the fact that we don't have enough {pluralnameof Exp}?
{@merchant} And risk giving you a tool you can't handle yet?| No way.

// purchase

:: purchaseAttempt.generic
@trigger    ShopAttemptBuy
@cutscene

// if player doesn't have enough exp
$if player:exp < local:expCost
    // hack for subtraction
    $set    local:needExp = local:expCost
    $set    local:needExp - player:exp

    $set    shop:lastFailure = local:itemId
    $set    shop:lastFailureReason = "exp"
    $set    player:hasAttemptedPurchaseUnderleveled = local:itemId

    {@merchant} Oh, {random you want|you're interested in} the {nameof $local:itemId}?
                {random I'm sorry|My apologies}|, but you'll need {exp}{$local:needExp}{/exp} more before I'll sell that to you.
    $stop
$endif

$if local:cashCost > 0
    {@merchant} Ah, {random you want|you're interested in} the {nameof $local:itemId}?\
    That'll be {cash}{$local:cashCost}{/cash}!

    $choice .purchaseAttempt.generic.success, CanAffordItem($local:itemId); {h}I'll take it! (Purchase){/h}
    $choice .purchaseAttempt.generic.cantAfford, !CanAffordItem($local:itemId); ...Yes?
$else
    {@merchant} Ah, {random you want|you're interested in} the {nameof $local:itemId}?

    $choice .purchaseAttempt.generic.success; {h}I'll take it! (Install){/h}
$endif

$choice .purchaseAttempt.generic.refused; Just looking!

$choose branch

:: purchaseAttempt.generic.success

$set    shop:lastFailure = null
$set    shop:lastFailureReason = null

$if Random(50)
    {@merchant} A fine choice!
$elseif Random(50)
    {@merchant} Good call!
$else
    {@merchant} It's yours!
$endif

$if player:hasAttemptedPurchaseNoCash == local:itemId
    $set player:hasAttemptedPurchaseNoCash = null
$endif

$if player:hasAttemptedPurchaseUnderleveled == local:itemId
    $set player:hasAttemptedPurchaseUnderleveled = null
$endif

$set    shop:purchaseCount + 1

$if player:shopFreeCoolDown > 0
    $set player:shopFreeCoolDown - 1
$endif

$call AudioOneShot(ShopPurchase)
$call PurchaseItem($local:itemId)

:: purchaseAttempt.generic.cantAfford

$set    shop:lastFailure = local:itemId
$set    shop:lastFailureReason = "cash"
$set    player:hasAttemptedPurchaseNoCash = local:itemId

$set    shop:notEnoughCount + 1
{@merchant} {random I'm sorry|So sorry}|, but you seem to be light in the wallet.
            Come back when you have enough!

:: purchaseAttempt.generic.refused

{@merchant} Okay! Well if you find something you want, let me know.

// specialized purchase dialog

:: purchaseAttempt.propGuard
@trigger    ShopAttemptBuy
@when       itemId == "PropGuard"
@cutscene

{@merchant} The {nameof PropGuard}! A wise choice!
            You don't want your propeller getting tangled up out there when moving through thick vegetation!
$branch .purchaseAttempt.genericCostLine

:: purchaseAttempt.flashlight
@trigger    ShopAttemptBuy
@when       itemId == "Flashlight"
@cutscene

{@merchant} Nice, I see you're looking at the {nameof Flashlight}!
            The ocean can get pretty dark out there, and who knows what's hiding in it?
$branch .purchaseAttempt.genericCostLine

:: purchaseAttempt.probeHacker
@trigger    ShopAttemptBuy
@when       itemId == "ProbeHacker"
@cutscene
{@merchant} I see you're looking at the {nameof ProbeHacker}!
            This little gizmo will allow you to read data from any probes you find at the dive sites.
$branch .purchaseAttempt.genericCostLine

:: purchaseAttempt.engine
@trigger    ShopAttemptBuy
@when       itemId == "Engine"
@cutscene

{@merchant} I see you're a person of taste! The {nameof Engine} is a very powerful engine!
            With it, you'll be able to move against strong undersea currents!
$branch .purchaseAttempt.genericCostLine

:: purchaseAttempt.hull
@trigger    ShopAttemptBuy
@when       itemId == "Hull"
@cutscene

{@merchant} Oh, you're looking to venture {h}deep{/h}? Then the {nameof Hull} should be your next purchase!
            With this plating, your sub will be able to withstand much more pressure!
$branch .purchaseAttempt.genericCostLine

:: purchaseAttempt.stressTank
@trigger    ShopAttemptBuy
@when       itemId == "StressTank"
@cutscene

{@merchant} Oh, the {nameof $local:itemId} can be used to measure the stress ranges of different creatures.

$branch .purchaseAttempt.genericCostLine

:: purchaseAttempt.measurementTank
@trigger    ShopAttemptBuy
@when       itemId == "MeasurementTank"
@cutscene

{@merchant} Ah, the {nameof $local:itemId} can be used to measure the eating and reproduction rates of different creatures.
$branch .purchaseAttempt.genericCostLine

:: purchaseAttempt.visualModel
@trigger    ShopAttemptBuy
@when       itemId == "VisualModel"
@cutscene

{@merchant} The {nameof $local:itemId} can be used at the {map-name}Modeling Whiteboard{/map-name}.
            It is used to create visualizations of the different connections between species.
$branch .purchaseAttempt.genericCostLine

:: purchaseAttempt.predictionModel
@trigger    ShopAttemptBuy
@when       itemId == "PredictionModel"
@cutscene

{@merchant} The {nameof $local:itemId} can be used at the {map-name}Modeling Whiteboard{/map-name}.
            It is used to create predictions for creatures in different ecosystems.
$branch .purchaseAttempt.genericCostLine

:: purchaseAttempt.interveneModel
@trigger    ShopAttemptBuy
@when       itemId == "InterveneModel"
@cutscene

{@merchant} Ah, the {nameof $local:itemId} can be used at the {map-name}Modeling Whiteboard{/map-name}.
            It is used to model the outcomes of potential interventions for different ecosystems.
$branch .purchaseAttempt.genericCostLine

:: purchaseAttempt.iceBreaker
@trigger    ShopAttemptBuy
@when       itemId == "Icebreaker"
@cutscene

{@merchant} Been wondering when you'd take a look at that! The {nameof Icebreaker} is a powerful drill!
$if player:currentStation != "ArcticStation"
            It can destroy chunks of ice and open passageways for you. A wise choice if you plan on visiting the {nameof ArcticStation}!
$else
            It can destroy chunks of ice and open passageways for you. A wise choice if you're going to explore the chilly waters below us!
$endif
$branch .purchaseAttempt.genericCostLine

:: purchaseAttempt.genericCostLine

// if player doesn't have enough exp
$if player:exp < local:expCost
    // hack for subtraction
    $set    local:needExp = local:expCost
    $set    local:needExp - player:exp

    $set    shop:lastFailure = local:itemId
    $set    shop:lastFailureReason = "exp"
    $set    player:hasAttemptedPurchaseUnderleveled = local:itemId

    {@merchant} Oh, {random I'm sorry|my apologies}... You'll need {exp}{$local:needExp}{/exp} more before I'll sell that to you.
    $stop
$endif

$if local:cashCost > 0
    {@merchant} {random So, do you want the|Still interested in the} {nameof $local:itemId}\
    It'll be {cash}{$local:cashCost}{/cash}!
    
    $choice .purchaseAttempt.generic.success, CanAffordItem($local:itemId); {h}Yes! (Purchase){/h}
    $choice .purchaseAttempt.generic.cantAfford, !CanAffordItem($local:itemId); ...Yes?
$else
    {@merchant} {random So, do you want the|Still interested in the} {nameof $local:itemId}?
    
    $choice .purchaseAttempt.generic.success; {h}Yes! (Install){/h}
$endif

$choice .purchaseAttempt.generic.refused; Just looking!

// generosity

:: generosity

$set    local:donation = -50
$set    local:donation * player:shopFreeCount
$set    local:donation + 300

$if player:shopFreeCount == 0
    {@merchant} Not for free, but... ah, you look trustworthy enough.
    $branch .giveCash
        Here, take {cash}{$local:donation}{/cash}.
        Just, uh, don't tell anyone. It'd be bad for business.
$elseif player:shopFreeCount == 2
    {@merchant} Ehhhh... okay. You're fairly loyal customers.
    $branch .giveCash
        Here's {cash}{$local:donation}{/cash}. Don't spend it anywhere else.
$elseif player:shopFreeCount == 3
    {@merchant} ...Okay. Sure. You're a recurring customer.
    $branch .giveCash
        Take this. It's {cash}{$local:donation}{/cash}. But please don't ask me again.
$else
    {@merchant} ...
    $branch .giveCash
        Here's {cash}{$local:donation}{/cash}.
        Don't ever ask me again.
$endif

$set player:shopFreeCoolDown = 0
$set player:shopFreeCount + 1

:: giveCash
$call AudioOneShot(ShopPurchase)
$call GiveItem(Cash, $local:donation)
$set  shop:hasDonated = true

// exit

:: exit
@trigger    ShopExit
@cutscene

{@merchant} Come again! You know where to find me!

:: exit.purchasedSomething
@trigger    ShopExit
@when   shop:purchaseCount > 0
@cutscene

{@merchant} Thank you so much for your patronage!
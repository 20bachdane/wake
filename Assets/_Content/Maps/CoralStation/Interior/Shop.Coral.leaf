# basePath interior.shop.coral

#include "Headers/Common.leaf"

#const MerchantId = coralMechanic
#const UnlockHintNodeId = .unlockHintSomewhere
#const UnlockHintHereNodeId = .unlockHintHere
#const LowExpNodeId = .lowExp
#const FreeItemPromptId = .freeItem
#const CostItemPromptId = .costItem
#const CancelNodeId = .cancel
#const NotEnoughCashNodeId = .notEnoughCash
#const PurchaseNodeId = .purchased

#include "Headers/CommonShop.leaf"

// Intros

// first time player talks to mechanic
#ShopHandler(first)
@boostScore 100
@once
{@coralMechanic}  Hey, O!
                  I'm glad the Lionfish drama didn't send you packing...
                  I'm pretty fun to be around when I'm not on a vendetta against venomous monsters. 
{@player}   I mean... vendettas are pretty fun, too.
{@coralMechanic} Aww, O. Where have you been all my life? 
{@player}   The Kelp Forest, mostly.
{@coralMechanic} Ha. I've heard it's nice there. 
                 Wanna take a look around?
$choice .action.openShop; Sure! 
$choice .action.cancel; Not right now.

// TODO: this handler evaluates to true, even when it's not. Disabling until it's fixed.
// // second time player arrives in the station and has talked to mechanic previously
// #ShopHandler(world:coral.leftStation == true)
// @boostScore 50
// @once
// {@coralMechanic}    Hey, O! Nice to see you again.
//                     I usually forget people's names the first time... luckily, you're very memorable. 
//                     So, I think I know the answer, but who's the owner of that {slow}magnificent{/slow} sub?
// {@player} Oh, that's my sub! Is it a good one?
//           Really hoping I don't crash it this time...
// {@coralMechanic} Ha. Didn't peg you for the daredevil type.
//                  Don't worry, O. I can fix anything. 
//                  Wanna look around the shop?  
// $choice .action.openShop; Sure!
// $choice .action.cancel; Not right now.

// Default case:
#ShopHandler(a)
{@$MerchantId}  Hey, O! Nice to see you again.
                Wanna look around the shop?  
$choice .action.openShop; Sure!
$choice .action.cancel; Not right now.

// After Hunting Lions job completed
#ShopHandler(gotLionfish, JobCompleted(coral-hunting-lions))
@once
{@$MerchantId} O!! You did it!
{@player} Um... what... ?
{@$MerchantId} The Lionfish. You figured it out!
                I {i}knew{/i} those things were rotten.
                Guess I better put back that ignition coil I borrowed from {nameof @profCoral}'s engine...
{@$MerchantId} Anyway. Wanna look around the shop?  
$choice .action.openShop; Sure!
$choice .action.cancel; Not right now.

// 50% chance to occur after completing at least one job at coral station
#ShopHandler(noGoLionfish, Chance(0.5), !JobCompleted(coral-hunting-lions), CompletedJobCount(CoralStation, 1))
@once
{@$MerchantId} Hey, O! Nice to see you again.
                So, you're a bigshot scientist... what's going on with those Lionfish?
{@player}      Not too much, yet.
{@$MerchantId} Ugh. I swear, he's never going to listen.
                I might need to take drastic measures...
{@$MerchantId} Anyway. Wanna look around the shop?  
$choice .action.openShop; Sure!
$choice .action.cancel; Not right now.

#ShopHandler(gotFlashlightAssignedHere, world:shop.boughtFlashlightFrom == "coral", HasUpgrade("Flashlight"))
@once
{@$MerchantId}  Hey O! Thank you so much for retrieving that {nameof Flashlight} for me! I hope it wasn't too difficult to find.
                {slow}Really{/slow} regretting not picking it up myself. I hope your uncle will forgive me.
                Anyways... wanna look around the shop?
$choice .action.openShop; Sure do!
$choice .action.cancel; Not right now.

#ShopHandler(gotFlashlight, world:shop.boughtFlashlightFrom != "coral", HasUpgrade("Flashlight"))
@once
{@$MerchantId}  Hey O! Good to see you again... hold up|, is that the {nameof Flashlight}?
                ...{wait 1}{auto}
                Aww thank you so much for retrieving it! I hope that wasn't too difficult!
                {slow}Definitely{/slow} regretting not picking it up myself. I hope your uncle will forgive me.
                Anyways... wanna look around the shop?
$choice .action.openShop; Sure do!
$choice .action.cancel; Not right now.

:: action.cancel
@cutscene
{@$MerchantId}  Okay! 

// Generic

:: unlockHintHere
{@$MerchantId}   {random Oh hey,|You'll be happy to know that|And I can tell you that} this would unlock a {h}Job{/h} right here.

:: unlockHintSomewhere
{@$MerchantId}   {random Whoa,|Hey,|As a bonus,} this would unlock some jobs over at the {nameof $local:hintStation}!

:: lowExp
{@$MerchantId}   Oh, {random hang on|I'm sorry}... I can't let you have this just yet. You'll need some more {exp}experience{/exp} before I can trust you with it.

:: freeItem
{@$MerchantId}   So, want the {nameof $local:itemId}? Won't cost you anything.

:: costItem
{@$MerchantId}   So, want to buy the {nameof $local:itemId}? \
                {random It'll|That'll} be {cash}{$local:cashCost}{/cash}!

:: cancel
{@$MerchantId}   Eh, suit yourself!

:: notEnoughCash
{@$MerchantId}   Ah, you don't have enough cash.

:: purchased
{@$MerchantId}   {random Good choice!|Good call.|Sweet!}

// Idle

#OpenHandler(a)
{@$MerchantId}  Take a look through my stock!

#OpenHandler(b)
{@$MerchantId}  Any of these look interesting?

#CloseHandler(a)
{@$MerchantId}  Thanks for stopping by!

#CloseHandler(purchased, shop:purchaseCount)
@boostScore 10
{@$MerchantId}  Thank you!

#CloseHandler(notEnoughCash, shop:notEnoughCount)
{@$MerchantId}  Come back with some more {pluralnameof Cash} next time!

#CloseHandler(notEnoughExp, shop:needsExpCount)
{@$MerchantId}  Come back when you've got more {exp}experience{/exp}!

#OpenExplorationHandler(a)
{@$MerchantId}  Need any exploration tools?

#OpenExplorationHandler(b)
{@$MerchantId}  Anything for your sub?

#OpenScienceHandler(a)
{@$MerchantId}  Any science-y things you want?

#OpenScienceHandler(b)
{@$MerchantId}  Need anything for your science?

// Exploration

#ItemHandler(ROVTagger)
{@$MerchantId}  The {nameof ROVTagger}!| 
                It'll show up at the top of your view.
                If you switch it on and move close to a species you've already scanned, the {nameof ROVTagger} will {h}count{/h} it.
                Count enough of them and it'll do the rest and give you a population estimate.
{@guide}    That's very convenient. We should definitely get this.
$set    jobs:common-dive.seen.tagger-intro = true
$EvaluateItemPurchase()

#OverrideItemHandler(FlashlightCoordinates, flashlight.first)
@boostScore 100
@once
{@$MerchantId}  The {nameof Flashlight}!
                Use this one for dark spaces, deep sea, yadda yadda...
                I mean, you're a brilliant scientist. I'm sure you know what a flashlight is.
$set local:postPurchaseBranch = "interior.shop.coral.PostFlashlight"
$EvaluateItemPurchase()

#ItemHandler(FlashlightCoordinates)
{@$MerchantId}  That's the {nameof Flashlight}!
                 Always a good idea. Needs no introduction. 
$set local:postPurchaseBranch = "interior.shop.coral.PostFlashlight"
$EvaluateItemPurchase()

:: PostFlashlight
$set    world:flashlightQuest = true
$set    world:shop.boughtFlashlightFrom = "coral"
{@coralMechanic}    ...oh no. {fast}Oh shoot I dropped it.{/fast}
                    So.| Funny story.| I borrowed it from your uncle.
                    And then{wait 0.5} {fast}I accidentally dropped it at {nameof FinalStation}.{/fast}
                    Please go pick it up for me?

$call UnlockSite(RS-0)
$call UnlockStation(FinalStation)
$call ShowPopup(map.unlock.finalStation.header, map.unlock.finalStation.desc)

#ItemHandler(ProbeHacker)
{@$MerchantId}  The {nameof ProbeHacker}! 
                Super useful for scientist types like you. 
                It allows you to read data from any {h}probes{/h} you find out there.
                Essential for getting historical data off of them.
$EvaluateItemPurchase()

#ItemHandler(Microscope)
{@$MerchantId}  That's the {nameof Microscope}!
                There are tiny creatures out there that you can't be seen with the naked eye...
                Oh, who am I kidding. You know what a microscope is.
               Some jobs will require you to scan microscopic organisms, so the {nameof Microscope} will definitely come in handy. 
$EvaluateItemPurchase()

// Navigation

#ItemHandler(PropGuard)
{@$MerchantId}  The {nameof PropGuard}!
                Super important. Keeps your propeller from getting tangled up in thick vegetation.
$EvaluateItemPurchase()

#ItemHandler(Engine)
{@$MerchantId}  That's the {nameof Engine}!
                It boosts the power of the sub's engine, so it can move against strong currents.
                I usually tell people to be careful with it...
                But I've got a feeling you're a bit of a daredevil. 
$EvaluateItemPurchase()

#ItemHandler(Hull)
{@$MerchantId}  Are you looking to go {h}deep{/h}? 
                Um, in the ocean, I Mean?
                Then the {nameof Hull} might be helpful!
                With this plating, your sub will be able to withstand much more pressure.
$EvaluateItemPurchase()

#ItemHandler(Icebreaker)
{@$MerchantId}  That's the {nameof Icebreaker}!
                It's able to shatter ice by emitting a strong localized electrical field.
$EvaluateItemPurchase()

// Experimentation

#ItemHandler(StressTank)
{@$MerchantId}   The {nameof StressTank} can be used to measure the stress ranges of different creatures.
$EvaluateItemPurchase()

#ItemHandler(MeasurementTank)
{@$MerchantId}  The {nameof MeasurementTank} can be used to measure various rates for different creatures.
                Really handy if you need some eating rates, or reproduction, or respiration.
$EvaluateItemPurchase()

// Modeling

#ItemHandler(VisualModel)
{@$MerchantId}  The {nameof VisualModel} can be used at your {map-name}Modeling Station{/map-name}.
                It is used to create visualizations of the different connections between species.
{@guide}    Hmmm. I feel like this could come in handy later...
            I think we should purchase this item.
$EvaluateItemPurchase()

#ItemHandler(PredictionModel)
{@$MerchantId}  The {nameof PredictionModel} can be used at the {map-name}Modeling Station{/map-name}.
            It is used to create predictions for creatures in different ecosystems.
$EvaluateItemPurchase()

#ItemHandler(InterveneModel)
{@$MerchantId}  The {nameof InterveneModel} can be used at the {map-name}Modeling Station{/map-name}.
            It is used to model the outcomes of potential interventions for different ecosystems.
$EvaluateItemPurchase()
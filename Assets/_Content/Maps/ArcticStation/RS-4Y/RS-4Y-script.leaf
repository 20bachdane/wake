# basePath RS-4Y

// engine check

:: enableTrigger
@trigger    SceneStart
@when       !HasUpgrade("Engine"), scene:lastEntrance == "RS-4X"
@cutscene
$set jobs:arctic-whalefall.new-attempt = true // whether the player has exited the scene since last trigger

:: emergeFromTheIce
@trigger    PlayerEnterRegion
@when       regionId == "CurrentExit", !HasUpgrade("Engine"), scene:lastEntrance == "RS-4X", jobs:arctic-whalefall.new-attempt
@triggerPriority   High
@boostScore 1060 // higher than intro scripts
@once
@cutscene
$if JobStartedOrComplete(arctic-missing-whale)
    {@player}   Whoa. What just happened, {nameof @guide}?
    {@guide}    It appears we were swept up in a current. 
    {@player}   No, I mean... what were all those creatures? 
    {@player}   And what about that skeleton? Could it have been a whale? 
    {@guide}    It did appear to have the appropriate dimensions. 
                Perhaps we should inform {nameof @arcticSci}. 
    {@player}   No, wait. Hold on, {nameof @guide}. 
                We have no idea if that was Linda. We saw it for, like, three seconds.
    {@guide}    But according to my dataâ€”
    {@player}   We need more proof. Linda might be just fine.
$else
    {@player}   What| just happened!?
    {@guide}    It seems like our ship's {h}engine{/h} isn't strong enough to resist the pull of the current!
                Perhaps we need to upgrade our ship and come back later.
$endif
$set jobs:arctic-whalefall.num-attempts = 2
$set jobs:arctic-whalefall.first-attempt-seen = true
$set jobs:arctic-whalefall.new-attempt = false

:: emergeAgain
@trigger    PlayerEnterRegion
@when       regionId == "CurrentExit", !HasUpgrade("Engine"), scene:lastEntrance == "RS-4X", jobs:arctic-whalefall.first-attempt-seen, jobs:arctic-whalefall.new-attempt
@cutscene
$if jobs:arctic-whalefall.num-attempts == 2
    {@player}   That current swept us away again...
    {@guide}    I really think we're going to need to upgrade the ship's {h}engine{/h} if we want to get through.
$else
    $if jobs:arctic-whalefall.num-attempts == 3
        {@player}   Ugh. 0 for 3.
        {@guide}    {nameof player}!! Are you listening? You need a better {h}engine{/h} if you want to tackle this problem!
    $else
        $if jobs:arctic-whalefall.num-attempts > 3
            {@player}   Argh! Frustration, thy name is current!
            {@guide}    Sure, this again.
                        Listen Shakespeare:
                        You {h}cannot{/h} scan things in the current until you have upgraded your {h}engine{/h}.
                        You can swim in circles all day -- it is never going to happen.
        $endif
    $endif
$endif
$set jobs:arctic-whalefall.num-attempts + 1
$set jobs:arctic-whalefall.new-attempt = false

// icebreaker check

#const UpperBlockerGroup = "UpperBlocker"
#const UpperBlockerCount = 5
#const LowerBlockerGroup = "LowerBlocker"
#const LowerBlockerCount = 3

:: lowerBlockerFirst
@trigger    PlayerExitRegion
@when       regionId == "UnderIceBlocker", GroupCount($LowerBlockerGroup) == $LowerBlockerCount, GroupCount($UpperBlockerGroup) == $UpperBlockerCount, !world:RS-4Y.observedIceCount
@cutscene
@once

$set    world:RS-4Y.observedIceCount + 1

{@guide}    That ice looks solid...
            We won't be able to surface here without some kind of {h}tool{/h}.

$if HasUpgrade("Icebreaker")
    {@player}   Wait, didn't I buy an {nameof Icebreaker}?
                I could use that here.
$elseif player:shop.seen.Icebreaker
    {@player}   Didn't one of the mechanics have an {nameof Icebreaker} for sale?
$endif

:: upperBlockerFirst
@trigger    PlayerExitRegion
@when       regionId == "AboveIceBlocker", GroupCount($LowerBlockerGroup) == $LowerBlockerCount, GroupCount($UpperBlockerGroup) == $UpperBlockerCount, !world:RS-4Y.observedIceCount
@cutscene
@once

$set    world:RS-4Y.observedIceCount + 1

{@guide}    That ice isn't going anywhere...
            We won't be able to dive further down without some kind of {h}tool{/h}.

$if HasUpgrade("Icebreaker")
    {@player}   Wait, didn't I buy an {nameof Icebreaker}?
                I could use that here.
$elseif player:shop.seen.Icebreaker
    {@player}   Didn't one of the mechanics have an {nameof Icebreaker} for sale?
$endif

:: iceRegionSetup
@function   SceneStart
$branch .checkIceRegions

:: iceRegionCheckTrigger
@function   ScriptObjectDestroyed
$branch .checkIceRegions

:: checkIceRegions
$if GroupCount($LowerBlockerGroup) < $LowerBlockerCount
    $call   UnderIceBlocker->Deactivate()
$endif

$if GroupCount($UpperBlockerGroup) < $UpperBlockerCount
    $call   AboveIceBlocker->Deactivate()
$endif

:: IceRegionEntrance
@function   PlayerEnterRegion
@when       regionId == "IceRiver"
$set    world:RS-4Y.seenIceRiver = true
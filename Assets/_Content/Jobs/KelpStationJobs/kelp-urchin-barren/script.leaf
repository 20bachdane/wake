#basePath   job.kelp-urchin-barren

// Beginning

:: start
@trigger    JobStarted
@cutscene

$branch common.ringPhone

{@drKelp}  Okay, this next job is going to be a little different.
{@player}   How so?
{@drKelp}  First, you are going to help us study Site B. It's... not doing well.
            It's become what we refer to as an {h}Urchin Barren{/h}, where there are a whole lot of urchins and not so much kelp as a result.
            Second, you're going to learn how to build a model and perform simulations of what is likely going to happen in the future.
{@player}   Ooh, you mean we get to predict the future? Sounds cool.
{@drKelp}  Agreed. Models and simulations are very powerful tools!
            Now head on over to Site B to get started.
{@kevin}    Where is Site B exactly?
{@drKelp}  It should be southwest of your ship.

$call UnlockSite(RS-1B)

:: helpGoOutside
@trigger    RequestPartnerHelp
@when 		scene:name == "Ship", JobTaskTop(gotoSiteB)
@cutscene
{@player}   Any idea where I should go next?
{@kevin}	I think we need to head over to Site B.
            Let's exit the ship.
            
:: helpGoToSiteB
@trigger    RequestPartnerHelp
@when 		scene:name == "KelpStation", JobTaskTop(gotoSiteB)
@cutscene
{@player} 	Where should I be going again?
{@kevin}	Site B should be southwest of the ship.
            Let's head over there and dive down.

// In Site B

:: giveUpgrade1
@trigger	SceneStart
@when		scene:name == "RS-1B"
@once
@cutscene

$branch common.ringPhone

{@drKelp}  This time, I'll also need you to gather some information on the population counts here.
            And for that, you'll need the {nameof ROVTagger}.
$if !HasUpgrade(ROVTagger)
	$call GiveUpgrade(ROVTagger)
	{@drKelp}  Once you've {h}scanned{/h} a species, switch to the {nameof ROVTagger} and move close to one of them to {h}count{/h} it.
							Count enough of them and your {nameof ROVTagger} will do the rest and give you a population estimate.
$endif

:: helpAtSiteB.A
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-1B", JobTaskTop(getTagged)
@cutscene
{@player} 	I made it to Site B, what should I do now?
{@kevin}	Let's explore and count all these organisms.
$if !TaggingHasStarted(Urchin)
    {@kevin}    Are there any {pluralnameof Urchin} here?
$elseif !TaggingHasFinished(Urchin)
    {@kevin}    We haven't found all the {pluralnameof Urchin} yet.
$elseif !TaggingHasStarted(GiantKelp)
    {@kevin}    I can see a lot of {pluralnameof GiantKelp}...
$else
    {@kevin}    Let's try to find the rest of the {pluralnameof GiantKelp}.
$endif

:: giveUpgrade2
@trigger	JobTaskCompleted
@when		taskId == "getTagged"
@once
@cutscene

$branch common.ringPhone

{@drKelp}	Alright, that's the current population... the urchins are really getting out of hand...
			Maybe you can try getting some historical population data from the {h}Probe{/h}?
			There should be a probe around here somewhere.
			Take this {nameof ProbeHacker} - it should let you decode data from the {h}Probes{/h}.
$call GiveUpgrade(ProbeHacker)
{@drKelp}  Once you've done that, head back to the ship.

:: helpAtSiteB.B
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-1B", JobTaskTop(getProbeData)
@cutscene

{@player}   What should I do next?
{@kevin}    We just got the {nameof ProbeHacker} from {nameof @drKelp}.
            Maybe we should look for the {h}Probe{/h}.

:: unlockModeling
@trigger	JobTaskCompleted
@who		kevin
@when		taskId == "getProbeData" 
@once
@chatter

{@kevin}	Alright, we got the historical data.
            {nameof @drKelp} said we should head back to the ship now.

// TO MODELING

:: helpBackToShip
@trigger    RequestPartnerHelp
@when 		scene:name == "KelpStation", JobTaskTop(predictSiteB)
@cutscene
{@player} 	Where should I be going again?
{@kevin}	We need to head back to the ship.

:: atShip
@trigger    SceneStart
@when       scene:name == "Ship", JobTaskTop(predictSiteB)
@once
@cutscene
$branch common.ringPhone

{@drKelp}  Okay, it's time for you to learn how to put your facts together into a model.
{@kevin}    Ah, is this another room on the ship?
{@drKelp}  Yep! Your ship also has a {nameof Modeling}.
{hide-dialog}

$call	UnlockRoom(modelingRoom)
$call	UnlockRoom(Modeling)

$call FocusHighlight->Focus("exterior.modeling", 200, 200)
{wait 1}

{@drKelp}  Head in there and open up the big whiteboard on the wall.
$call FocusHighlight->Clear()

:: helpGoToModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Ship", JobTaskTop(predictSiteB)
@cutscene
$if global:nav.shipRoom != "modeling"
	{@player} 	I'm back on the ship, what should I do next?
	{@kevin}	Let's first head to the {nameof Modeling}.
$else
	{@player} 	Made it to the {nameof Modeling}, what do we do from here?
	{@kevin}	I think {nameof @drKelp} is going to teach us how to make a model.
                Head over to the {map-name}Modeling Whiteboard{/map-name}.
$endif

// IN MODELING

:: ModelingSetup
@trigger	VisualModelStarted
@once
@cutscene
$branch common.ringPhone

{@drKelp}  Okay, this is the {h}Modeling Whiteboard{/h}.
            So you observed that {pluralnameof Urchin} eat {critter-name}Kelp{/critter-name}.
            And you also observed that {pluralnameof SeaOtter} eat {pluralnameof Urchin}.
            We can take those facts and add them to our {h}Universal Model{/h}.
            That can help us see how they fit together.
            Just use the {h}Import Facts{/h} button to add all the facts you have in {item-name}AQOS{/item-name}.
            
:: ModelingSetupPhase2
@trigger    VisualModelUpdated
@when       !jobs:kelp-urchin-barren.upgradedFacts
@once
@cutscene

{@drKelp}  Nice work! So now you can see how there's a sort of {h}web{/h} that emerges from these facts.
            What you're seeing now is what's known as a {h}Food Web{/h}.
            Now, the tool you're using can do much| much more than just create food webs.
            It can also {h}simulate ecosystems{/h}.
            Oh! But it'll require a bit more data than you have right now.
            You see how some of the connections on your web aren't solid? That means your fact isn't able to be simulated yet.
            Let me just send you the missing pieces...

$branch common.download
$call UpgradeFact(Urchin.Eats.GiantKelp, Rate)
$call GiveFact(Urchin.Reproduce, Batch)
$call GiveFact(GiantKelp.Reproduce, Batch)
$call GiveFact(SeaOtter.Reproduce)
$call GiveFact(UrchinBarren.PopulationHistory.GiantKelp, Batch)
$call GiveFact(UrchinBarren.PopulationHistory.Urchin)

{@drKelp}  The simulator doesn't really work well unless you have numbers to go along with your facts.
            But once you add these, then we should be good to go.
            
$set jobs:kelp-urchin-barren.upgradedFacts = true

:: ModelingSetupPhase3
@trigger    VisualModelUpdated
@when       jobs:kelp-urchin-barren.upgradedFacts
@once
@cutscene

{@drKelp}  Alright, the simulator should be ready for you now.
            Just hit the {h}Simulate{/h} button on the bottom right to start the simulator up.

::ModelHelp1.A
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual", JobTaskTop("predictSiteB"), !jobs:kelp-urchin-barren.upgradedFacts
@cutscene
{@player} 	What should I do next?
{@kevin}	We have to add our facts to the {h}Universal Model{/h}.
            Just use the {h}Import Rules{/h} button to add the behaviors we've noticed so far. 
            
::ModelHelp1.B
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual", JobTaskTop("predictSiteB"), jobs:kelp-urchin-barren.upgradedFacts, modeling:unimportedCount > 0
@cutscene
{@player} 	What should I do next?
{@kevin}	They just gave us some new facts to add.
            Let's get those imported!

::ModelHelp1.C
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual", JobTaskTop("predictSiteB"), jobs:kelp-urchin-barren.upgradedFacts, modeling:unimportedCount == 0
@cutscene
{@player} 	What should I do next?
{@kevin}	We have everything imported. I think we should start up the simulator.

:: GetSync
@trigger	SimulationModelStarted
@once
@cutscene

{@drKelp}  Welcome to the {h}Simulator{/h}! This is where all your facts get turned into a big simulation.
            What that practically means is that we have a bunch of virtual {pluralnameof Urchin} and {pluralnameof GiantKelp} interacting with each other.
            And their interactions are driven by the facts you have.
            So if you've got a fact that says "{pluralnameof Urchin} eat {pluralnameof GiantKelp}", then these virtual Urchins will eat the virtual Giant Kelp.
            More than that, though, you've also got the population histories you downloaded from the {h}Probe{/h} back in Site B.
            Those histories are represented on the graph by those thick faded lines.
            As your virtual organisms eat, and die, and reproduce, their populations will show up on the graph too.
            Your goal is to get those to line up with the historical populations!
            Start by setting the starting populations for your virtual organisms. You should just be able to drag those sliders on the left to match the historical population.
            If you can get the resulting graph to line up with the historical graph, then we know enough to be able to make a model!

::ModelHelp2
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "model"
@cutscene
{@player} 	What should I do next?
{@kevin}	Drag the sliders on the left so your model matches the data from Site B.
            Once everything lines up, hit the {h}Sync{/h} button to continue.

:: ModelSynced
@trigger	SimulationSyncSuccess
@once
@cutscene
{@drKelp}  Perfect! The model's output lines up with actual past population data, so we know we've created a useful model.
            Now let's see what it predicts will happen next. Hit the {h}Sync{/h} button.

::ModelHelp3
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "predict"
@cutscene
{@player} 	What should I do next?
{@kevin}	The graph seems to be showing a prediction of what the populations will be in the future.
            There's a big {h}Save Prediction{/h} button on the right. Maybe we should hit it?

:: ModelingGraphComplete
@trigger	SimulationPredictSuccess
@once
@cutscene
{@drKelp}  Nice work! You've just made a {h}model{/h}!
            Now bring that back to the {map-name}Office{/map-name}.
{hide-dialog}
{wait 1}
{@kevin}    So it looks like the {pluralnameof GiantKelp} and {pluralnameof Urchin} will sort of stay at a low level.
            That doesn't sound great...

// SUGGEST ARGUMENTATION

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportBack)
@cutscene
$if scene:name == "Argumentation"
    {@player}   What should I be doing again?
    {@kevin}    Report your findings to {nameof @drKelp}.
$elseif global:nav.shipRoom == "office"
    {@player}   What should we do now?
    {@kevin}    Let's report our findings to {nameof @drKelp} using the {h}Computer{/h}.
$else
    {@player} 	What should we do now?
	{@kevin}	Well, we've completed the modeling, so let's report back to {nameof @drKelp}.
                We should first head back to the {map-name}Office{/map-name}.$endif
$endif

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(urchinBarrenArgue)
@cutscene

$call ArgueLoad(urchinBarrenArgue)
	$if ArgueSetClaim(urchinBarrenClaim, jobs.kelp-urchin-barren.argue.claimLabel)
			$call ArgueFactSlot(Urchin.Eats.GiantKelp)
			$call ArgueFactSlot(Model.UrchinBarrenPrediction)
	$endif

	$branch .argue.hello

	
::argue.hello
{@drKelp}    I see you explored Site B. What's causing the {nameof GiantKelp} population to decrease?
$goto .argue.chooseFacts


::argue.chooseFacts
$call ArgueDisplayClaim()
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice #argueFact; Present facts from AQOS
        $answer Urchin.Eats.GiantKelp, .argue.urchinEatsKelp
        $answer Model.UrchinBarrenPrediction, .argue.barrenModel
        $answer *, .argue.unrelated
    $choice .argue.giveUp; Let me get back to you
$endif

::argue.urchinEatsKelp
$if ArgueIsFactSubmitted(Model.UrchinBarrenPrediction)
	$goto .argue.done
$else
	{@drKelp}    I see. Do you have a model that predicts if they will grow back?
	$goto .argue.chooseFacts
$endif

::argue.barrenModel
$if ArgueIsFactSubmitted(Urchin.Eats.GiantKelp)
	$goto .argue.done
$else
	{@drKelp}    Hmm. What is causing that decrease in kelp population?
	$goto .argue.chooseFacts
$endif

::argue.unrelated
$if ArgueIsFactSubmitted(Urchin.Eats.GiantKelp)
	{@drKelp}    Do you have a model that predicts what's going to happen at Site B?
$else
	$if ArgueIsFactSubmitted(Model.UrchinBarrenPrediction)
		{@drKelp}  Is something eating the {nameof GiantKelp}?
	$else
		{@drKelp}  I don't know if that's it.
	$endif
$endif
$call ArgueRejectIncorrect()
$goto .argue.chooseFacts

::argue.giveUp
{@drKelp}    OK get back to me when you're ready.

::argue.done
$call ArgueComplete()
{@drKelp}    Ok then... That is rather bleak.
$call CompleteJob()

// END

:: end
@trigger    JobCompleted
@cutscene

$branch common.ringPhone

{@drKelp}  Well then. That's a bit depressing.
{@player}   Yeah...
{@drKelp}  But| don't lose hope yet. I have one last job for you.
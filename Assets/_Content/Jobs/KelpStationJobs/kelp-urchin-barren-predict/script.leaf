#basePath   job.kelp-urchin-barren-predict

// Beginning

:: start
@trigger    JobStarted
@cutscene

{@drKelp}  I'm glad you're back, Olivia!
           Your visual model of Site B has been incredibly helpful.
{@player}   Really?? Is the ecosystem doing any better? 
{@drKelp}   Well... not yet, Mija. It looks like Site B is what scientists call an Urchin Barren...
{@drKelp}   Lots of urchins, and not much else. 
{@drKelp}   I just finished compiling the rates for the eating rules in your model. 
            Now we can use your model to simulate what will happen at Site B if we don't intervene. 
            Use the {h}Modeling Whiteboard{/h} on your ship to get started.
$set jobs:kelp-urchin-barren-predict.received.facts = false
$set jobs:kelp-urchin-barren-predict.sync-failed = false

::WhereToGoHelp
@trigger    RequestPartnerHelp
@when 	    scene:name != "Modeling", JobTaskTop("predictSiteB"), !jobs:kelp-urchin-barren.upgradedFacts
@cutscene
{@player} 	Okay, {nameof @guide}. Where to?
{@guide}	Head to the surface and use your {h}Modeling Whiteboard{/h}! 

// IN MODELING

:: ModelingIntro
@trigger    SceneStart
@when       scene:name == "Modeling"
@once
@cutscene

{@guide}   Last time, you observed that {pluralnameof Urchin} eat {critter-name}Kelp{/critter-name}.
           And you also observed that {pluralnameof SeaOtter} eat {pluralnameof Urchin}.
           Go ahead and re-open your Visual Model for site B. 

:: ModelingSetup-Wrong
@trigger	VisualModelStarted
@when       modeling:ecosystemSelected != "UrchinBarren", !jobs:kelp-urchin-barren.upgradedFacts
@cutscene

{@guide}   This isn't the right ecosystem, O. 
            Head back to the {h}Ecosystem{/h} tab and select the {nameof UrchinBarren}.
            
:: ModelingSetup-WrongHelp
@trigger	RequestPartnerHelp
@when       modeling:ecosystemSelected != "UrchinBarren" 
@cutscene
{@player}   What now, {nameof @guide}?
{@guide}    You need to open the {nameof UrchinBarren} {h}Ecosystem{/h}.

:: ModelingSetupPhase
@trigger    VisualModelStarted
@when       modeling:ecosystemSelected == "UrchinBarren"
@once
@cutscene

{@guide}    You've already used the eating rules you gathered to create a {h}Food Web{/h}.
            With rates to go along with these rules, you can do more than create a model.
            You can use your whiteboard to {h}simulate ecosystems{/h}!
$if !jobs:kelp-urchin-barren-predict.received.facts
			Currently uploading the missing data... done!

$branch common.download
$call UpgradeFact(Urchin.Eats.GiantKelp, Rate, Batch)
$call UpgradeFact(SeaOtter.Eats.Urchin, Rate)
$call GiveFact(Urchin.Reproduce, Batch)
$call GiveFact(GiantKelp.Reproduce, Batch)
$call GiveFact(SeaOtter.Reproduce)
$set jobs:kelp-urchin-barren-predict.received.facts = true

{@guide}    The simulator requires numerical rates for the facts you gathered. 
            Normally you will use the {nameof MeasurementTank} to determine rates.
            This time, your mother sent over the missing data!
$endif
{@player}   Wow, so much data. This is totally your thing, V.
            So what's next? 
{@guide}    Hit the {h}Import New Facts{/h} button again. Then you can create your simulation!
            
$set jobs:kelp-urchin-barren.upgradedFacts = true

:: ModelingSetupPhase2
@trigger    VisualModelUpdated
@when       modeling:ecosystemSelected == "UrchinBarren", jobs:kelp-urchin-barren.upgradedFacts
@once
@cutscene

{@guide}    Looks like the simulator is ready for you, O.
            Hit the {h}Describe{/h} button on top to get started! 

::ModelHelp1.A
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual", JobTaskTop("predictSiteB"), modeling:ecosystemSelected == "UrchinBarren", !jobs:kelp-urchin-barren.upgradedFacts
@cutscene
{@player} 	What should I do next, {nameof @guide}?
{@guide}	Use the {h}Import New Facts{/h} button to add the behaviors you've noticed so far. 
            
::ModelHelp1.B
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual", modeling:ecosystemSelected == "UrchinBarren", JobTaskTop("predictSiteB"), jobs:kelp-urchin-barren.upgradedFacts, modeling:hasPendingImport
@cutscene
{@player} 	What should I do next?
{@guide}	You've received some new facts to add to your model.
            Time to get those imported!

::ModelHelp1.C
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual", modeling:ecosystemSelected == "UrchinBarren", JobTaskTop("predictSiteB"), jobs:kelp-urchin-barren.upgradedFacts, !modeling:hasPendingImport
@cutscene
{@player} 	Okay, what now?
{@guide}	You have imported everything you'll need.
            It's time to start up the simulator with the {h}Describe{/h} button on the top!

:: GetSync
@trigger	SimulationModelStarted
@when 		!jobs:kelp-urchin-barren-predict.received.facts
@boostScore 1060 // trigger before V1ctor's sync intro, which is 1051
@once
@cutscene
{@guide}	Good news, O! It appears that your mother is sending over the missing data we'll need!

$branch common.download
$call UpgradeFact(Urchin.Eats.GiantKelp, Rate, Batch)
$call UpgradeFact(SeaOtter.Eats.Urchin, Rate)
$call GiveFact(Urchin.Reproduce, Batch)
$call GiveFact(GiantKelp.Reproduce, Batch)
$call GiveFact(SeaOtter.Reproduce)
$set jobs:kelp-urchin-barren-predict.received.facts = true

{@guide}   The simulator requires numerical rates for the facts you gathered. 
            Normally you will use the {nameof MeasurementTank} to determine rates.
            This time, we already have them on hand! 
			Use the {h}Visualize{/h} tab to {h}Import New Facts{/h}, then return here.

::ModelHelp2
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "sync", JobTaskTop("predictSiteB"), modeling:phase == "describe"
@cutscene
{@player} 	What should I do next?
{@guide}	Run the simulation with the {h}Simulate{/h} button!

:: ModelSynced
@trigger	SimulationSyncSuccess
@once
@cutscene
{@guide}   Ah! Look at all this wonderful data!
{@player}  Aww, {nameof @guide}. Now I know what to get you for your birthday. 
{@player}  So what next?
{@guide}   The model's output is lining up with actual past population data.
            That means you've created a useful model!
            Now you must see what it predicts will happen next. Use the {h}Predict{/h} tab!

::ModelHelp3
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "predict", JobTaskTop("predictSiteB")
@cutscene
{@player} 	What should I do next?
{@guide}	Use the {h}Run Prediction{/h} button to create your simulation! 

:: ModelingGraphComplete
@trigger	SimulationPredictSuccess
@once
@cutscene
{@guide}   Satisfactory work, O! You just created a Prediction Model. 
{hide-dialog}
{wait 1}
{@guide}    According to your data, it looks like the {pluralnameof GiantKelp} and {pluralnameof Urchin} will stay at a low level. 
{@player}   Yeah. And no otters at all. 
            I think this ecosystem is in trouble, {nameof @guide}.

// SUGGEST ARGUMENTATION

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportBack)
@cutscene
$if scene:name == "Argumentation"
    {@player}   What now, {nameof @guide}?
    {@guide}    Report your findings to {nameof @drKelp}!
$elseif !IsPlayerOnStation()
    {@player}   What should I do now?
    {@guide}    Report your findings to {nameof @drKelp}.
$else
    {@player} 	What should I do now?
	{@guide}	You've completed your task.
                Now you need to report back to your mother at the {map-name}research station{/map-name}!
$endif


// MODELING SUGGESTIONS

:: triggerSyncFailure
@trigger    SimulationSyncError
@when       !jobs:kelp-urchin-barren-predict.sync-failed
@once
$set jobs:kelp-urchin-barren-predict.sync-failed = true

:: helpModelSync.Visual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(predictSiteB), scene:name == "Modeling", modeling:phase == "visual"
@cutscene
$branch .modelSuggestions

:: helpModelSync.Sync
@trigger    RequestPartnerHelp
@when 		JobTaskActive(predictSiteB), scene:name == "Modeling", modeling:phase == "sync"
@cutscene
$branch .modelSuggestions

:: modelSuggestions
$if HasFact(Urchin.Reproduce), HasFact(Urchin.Eats.GiantKelp), IsFactFullyUpgraded(Urchin.Eats.GiantKelp), HasFact(GiantKelp.Reproduce)
    $if HasFact(UrchinBarren.Model.IntroduceOtters)
        {@guide}    You're done with this portion! Head to the {h}Describe{/h} tab next.
    $else
        {@guide}    Once you import your facts and save the Visual model, we should be good to make our Describe model!
    $endif
$else
    $if !jobs:kelp-urchin-barren-predict.sync-failed
        {@guide}    Time to try out your model in the {h}Intervene{/h} tab.
    $else
        {@guide}    Seems like we don't have enough information to complete our model accurately.
                    Look for {h}question marks{/h} in the  Visual model interface, those point to where we may need more data.

        $if !HasFact(Urchin.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(Urchin.Eats.GiantKelp)
        	$branch .suggestObserve
        $elseif !IsFactFullyUpgraded(Urchin.Eats.GiantKelp)
        	$branch .suggestMeasure
        $elseif !HasFact(GiantKelp.Reproduce)
            $branch .suggestReproduce
        $endif
    $endif
$endif

:: suggestReproduce
{@guide}    Did you get all the reproduction rates?

:: suggestObserve
{@guide}    Are you sure you have observed all the interactions here?

:: suggestMeasure
{@guide}    You may need to measure the rates of interactions.


// CATCH-ALL GUIDE TEXT

:: catchPredictSiteB
@trigger    RequestPartnerHelp
@when 		JobTaskActive(predictSiteB)
@boostScore -5
@cutscene
{@guide}   	Head to the Modeling Lab and generate a Prediction Model.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}	Let's head back to the {m}research station{/m} and tell {nameof @drKelp} what we found.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(urchinBarrenPredictArgue)
@cutscene

$call ArgueLoad(urchinBarrenPredictArgue)
	$if ArgueSetClaim(urchinBarrenPredictClaim, jobs.kelp-urchin-barren-predict.argue.claimLabel)
			$call ArgueFactSlot(UrchinBarren.Model.Prediction)
	$endif

	$branch .argue.hello

	
::argue.hello
{@drKelp}    Perfect timing, Olivia!
             I just made some fried kelp chips, if you'd like to help taste-test.
{@player}   Um, maybe later, Mom. The job, and everything...
{@drKelp}   Oh, yes! What did your Prediction Model show about the {nameof GiantKelp} population?
$goto .argue.chooseFacts

::argue.chooseFacts
$call ArgueDisplayClaim()
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice #argueFact; Present facts from AQOS
        $answer UrchinBarren.Model.Prediction, .argue.done
        $answer *, .argue.unrelated
    $choice .argue.giveUp; Let me get back to you
$endif

::argue.unrelated
$if ArgueIsFactSubmitted(Urchin.Eats.GiantKelp)
	{@drKelp}    Do you have a model that predicts what's going to happen at Site B?
$else
	$if ArgueIsFactSubmitted(UrchinBarren.Model.Prediction)
		{@drKelp}  Is something eating the {nameof GiantKelp}?
	$else
		{@drKelp}  That doesn't seem right, Sweetie. Try again. 
	$endif
$endif
$call ArgueRejectIncorrect()
$goto .argue.chooseFacts

::argue.giveUp
{@drKelp}    Okay, Mija. Get back to me when you're ready.

::argue.done
$call ArgueComplete()
{@drKelp}   Well. That's interesting. 
{@player}   Interesting?? Mom, Site B is doomed! 
{@player}  What happened to all the kelp? What if it's contagious? 
{@player}   We'll never be able to create Mer's Refuge when whole ecosystems are dying. 
{@drKelp}   Slow down, Olivia. I've got one more job for you.  
$call CompleteJob()

#basePath   job.kelp-mussel-fest-solution

:: start
@trigger    JobStarted
@cutscene

{@drKelp} Wonderful! I've really been wanting to solve the mystery of those mussels.  
{@drKelp}  We need to find out if the mussels here at site C will continue reproducing, even though they're stressed.
{@drKelp}  The community is pretty concerned. Mussels are a delicacy around here. 
{@drKelp}  Speaking of which... you've been working nonstop lately. Have you been getting enough protein? 
{@drKelp}  You can stick around, if you'd like. I made my homemade mussel-kelp loaf!
{@player}  That sounds delicious, Mom, but I better get to work.
{@drKelp} Okay, Sweetie. Stay safe out there. 
$set jobs:kelp-mussel-fest-solution.inMeasurement = false
$set jobs:kelp-mussel-fest-solution.inMeasurementEcosystem = false

// SET VARS
:: setTankVars1
@trigger	ExperimentTankViewed
@when		!JobTaskTop(reportChange), tankType == "Measurement"
@cutscene
$set jobs:kelp-mussel-fest-solution.inMeasurement = true

:: setTankVars2
@trigger	ExperimentTankViewed
@when		!JobTaskTop(reportChange), tankType != "Measurement"
@cutscene
$set jobs:kelp-mussel-fest-solution.inMeasurement = false

:: setTankVars3
@trigger	ExperimentScreenViewed
@when		!JobTaskTop(reportChange), screenId == "measurement.ecosystem"
@cutscene
$set jobs:kelp-mussel-fest-solution.inMeasurementEcosystem = true

:: setTankVars4
@trigger	ExperimentScreenViewed
@when		!JobTaskTop(reportChange), screenId != "measurement.ecosystem"
@cutscene
$set jobs:kelp-mussel-fest-solution.inMeasurementEcosystem = false

:: setTankVars5
@trigger	SceneStart
@when	scene:name != "ExperimentV2"
@cutscene
$set jobs:kelp-mussel-fest-solution.inMeasurement = false

:: setTankVars6
@trigger	ExperimentTankExited
@when		scene:name == "ExperimentV2"
@cutscene
$set jobs:kelp-mussel-fest-solution.inMeasurement = false

:: setTankVars7
@trigger	ExperimentScreenExited
@when		scene:name == "ExperimentV2", screenId == "measurement.ecosystem"
@cutscene
$set jobs:kelp-mussel-fest-solution.inMeasurement = false



// EXPERIMENTATION

:: helpStartExperiment
@trigger    RequestPartnerHelp
@when 		!JobTaskTop(reportChange)
@cutscene
{@player}   Hmm. I'm not sure how to approach this job.
{@guide}	Processing data...
		    I believe you'll need the {nameof MeasurementTank} in the Experiment room. 

:: helpSelectEnvironment
@trigger    RequestPartnerHelp
@when 		!JobTaskTop(reportChange), scene:name == "ExperimentV2", jobs:kelp-mussel-fest-solution.inMeasurement
@boostScore 1
@cutscene
$if jobs:kelp-mussel-fest-solution.inMeasurementEcosystem
	{@player}   Can you help me figure out which sites to choose, {nameof @guide}?
	{@guide}	Certainly, O.
	{@guide}   You will need to run the experiment twice...
	{@guide} Once with an environment that stresses the mussels.
	{@guide} And another time with an environment that doesn't stress them. 
$else
	{@player}   How do we do this again, {nameof @guide}?
	{@guide}	Select an ecosystem, a species, and additional controls. Then run your experiment.
$endif

:: helpContinueExperiment
@trigger    RequestPartnerHelp
@when 		JobTaskTop(stressedRate), !jobs:kelp-mussel-fest-solution.inMeasurement
@boostScore 2
@cutscene
{@player}   Okay, {nameof @guide}. Should I head back and report my findings?
{@guide}	Not yet, O. You still need to find another Mussel reproduction rate.

:: experimentEnd
@trigger    JobTasksUpdated
@when 		JobTaskTop(reportChange)
@once
@cutscene
{@guide}	Your work is sufficient, O!
{@player}   Thanks, {nameof @guide}. You too. 
{@player}   I better grab a snack on the way to the station. Mom's mussel-kelp loaf is the stuff of nightmares.
{@guide}    You have had another nightmare? About meatloaf?
{@player}   Oh... no, it's just a figure of speech. 
{@player}   I hope.  

:: helpReport
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportChange)
@cutscene
{@player}   What now?
{@guide}	Now you should be able to tell {nameof drKelp} about the effect of stress on Mussel reproduction!

// CATCH-ALL GUIDE TEXT

:: catchUnstressedRate
@trigger    RequestPartnerHelp
@when 		JobTaskActive(unstressedRate)
@boostScore -5
@cutscene
{@guide}    Put Mussels in the Measurement Tank in an environment that does not stress them.

:: catchStressedRate
@trigger    RequestPartnerHelp
@when 		JobTaskActive(stressedRate)
@boostScore -5
@cutscene
{@guide}    Put Mussels in the Measurement Tank in an environment that stresses them.

:: catchReportChange
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportChange)
@boostScore -5
@cutscene
{@guide}    Talk to {nameof drKelp} at the {m}research station{/m}.

// ARGUMENTATION

:: argue.chooseClaim
@trigger    TryArgumentation
@when   	!ArgueIsComplete(musselFestSolutionArgueNoChange)
@cutscene
{@drKelp}	Are Mussel reproduction rates being impacted by stress at {h}Site C{/h}?
	$choice .argue.growSame; Mussel reproduction should stay the same.
	$choice .argue.growIncorrect; Mussel reproduction will slow.
	$choice .argue.growIncorrect; The Mussels will grow faster!
	$choice .argue.notReady; Let me get back to you
$choose branch

:: argue.notReady
{@drKelp} Okay, Sweetie. Get back to me when you're ready.

:: argue.growSame
{@drKelp}	How do you know?
$goto .argue.defendClaim

:: argue.growIncorrect
{@drKelp}	How do you know?
$goto .argue.defendClaimIncorrect


:: argue.defendClaim
$call ArgueLoad(musselFestSolutionArgueNoChange)
$if ArgueSetClaim(musselFestSolutionArgueNoChangeClaim, jobs.kelp-mussel-fest-solution.argue.claimLabel)
			$call ArgueFactSlot(Mussel.Reproduce)
			$call ArgueFactSlot(Mussel.Reproduce.Stressed)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFacts
		$answer incorrect, .argue.incorrectFacts
$choice .argue.notReady; Let me get back to you

:: argue.defendClaimIncorrect
$call ArgueLoad(musselFestSolutionArgueNoChange)
$if ArgueSetClaim(musselFestSolutionArgueNoChangeClaim, jobs.kelp-mussel-fest-solution.argue.claimLabel)
			$call ArgueFactSlot(Mussel.Reproduce)
			$call ArgueFactSlot(Mussel.Reproduce.Stressed)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.incorrectFacts
		$answer incorrect, .argue.incorrectFacts
$choice .argue.notReady; Let me get back to you


:: argue.incorrectFacts
{@drKelp}	Hmmm... That doesn't seem right.
$call ArgueClearFacts()
$call ArgueRejectIncorrect()

:: argue.correctFacts
$call ArgueComplete()
{@drKelp}	Oh! They grow at the same rate. 
{@drKelp}   What a relief. Looks like local restaurants won't have any trouble.
{@drKelp}   Want to stick around for dinner, Mija?
{@player}   Oh, uh, no thanks, Mom. I already ate.
{@drKelp}   Okay, Sweetie. Just let me know if you change your mind!
$call CompleteJob()

#basePath   job.kelp-welcome

// INTRO

:: diveSite
@trigger    SceneStart
@when       scene:name == "RS-1C"
@triggerPriority   High
@once
@cutscene
$branch common.ringPhone

$set world:intro.completed = true
{@drKelp}  Before you head up to the surface, use your {item-name}Scanner{/item-name} to ID all the species down here.
$call GiveUpgrade(ROVScanner, Silent)
$call Player->SetTool(Scanner)
{@drKelp}  The {item-name}Scanner{/item-name} searches for life forms automatically. 
            Click the red targets to ID a new plant or animal species! 
{@player}   I know Mom...
{@drKelp}   If you need help, you can always ask {nameof @guide} for a reminder or a hint.
{wait 0.5}

{fade-out black.60, 0.5, wait}
{@}
{style center}

$call hotbar.guide->Show()
$call hotbar.guide->ForceOnTop()
$call FocusHighlight->Focus(hotbar.guide)
    Talk to {nameof @guide} by clicking the {h}button with the jellyfish{/h} up here.
    They can help if you get stuck!
$call hotbar.guide->ResetSorting()
$call FocusHighlight->Clear()

$call hotbar.portable->Show()
$call hotbar.portable->ForceOnTop()
$call FocusHighlight->Focus(hotbar.portable)
    One more tip! You can check your {item-name}AQOS Tablet{/item-name} to see all the info about your active job!
$call hotbar.portable->ResetSorting()
$call FocusHighlight->Clear()
{hide-dialog}{fade-in 0.5, wait}
$call GiveEntity(WarmKelpForest)
$call UnlockSite("RS-1C")
$call UnlockRoom("nav")
$call UnlockRoom("exterior")

// :: start
// @trigger    SceneStart
// @when       scene:name == "Helm"
// @once
// @cutscene

// $branch common.ringPhone

// $set    player:seen.drJules = true
// {@drKelp}	Lovely! Thanks for the help.
//             Drive your sub over to {h}site C{/h} to get started. 
// {@player}	Ok, great! The sub, which is located...um... 
// {@kevin}	Right outside the door. 
// {@player}	Oh, yeah. I knew that. 
//             (Thanks, Kevin.)


:: helpGoOutsideToSubShip
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", !jobs:kelp-welcome.got.scans
@cutscene
$if global:nav.shipRoom != "exterior"
	{@player}   Um... what are we supposed to do, again?
	{@guide}	Head out the door and find the sub!
$else
	{@player}   Where's the sub again?
	{@guide}	Bright yellow. Says "sub" on it. You literally can't miss it.
$endif

// AT STATION

:: navigation
@trigger    SceneStart
@when       scene:name == "KelpStation"
@once
@cutscene
$branch common.ringPhone

{@drKelp}	Head over to {h}site C{/h} and get to work!
			

// player does not have anything from site C yet, tell them to go there

:: helpGoToSiteC 
@trigger    RequestPartnerHelp
@when 		scene:name == "KelpStation", !HasEntity(WarmKelpForest), !HasEntity(Urchin), !HasEntity(GiantKelp), !HasEntity(SeaOtter)
@boostScore 2 //if the player has collected nothing, this should be seen instead of helpReturnToShip
@cutscene
{@guide}	You need to find {h}site C{/h}, then dive. 
            Unless you'd rather just float here forever.  

:: helpAtSiteC
@trigger    RequestPartnerHelp
@when       scene:name == "RS-1C", !jobs:kelp-welcome.got.scans
@cutscene
{@player}   What now?  
{@guide}    She said to document all the species down here.
            I think we're missing some. Better keep looking. 

:: navigation.goBackUp
@trigger    JobTasksUpdated
@when       JobTaskActive(returnToShip)
@once
@cutscene
$set    jobs:kelp-welcome.got.scans = true
$branch common.ringPhone

{@drKelp}  Excellent work! Looks like you found everything you need for now.
            Head up to the surface, to continue this job at the ship.

:: helpAtSiteCCompleted
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-1C", jobs:kelp-welcome.got.scans
@cutscene
{@player} 	Um... V1ctor? Now what? 
{@guide}    We're done here. Head back to the surface! 

// BACK AT STATION

:: navigation.return
@trigger    SceneStart
@when       scene:name == "KelpStation", jobs:kelp-welcome.got.scans
@once
@cutscene

$branch common.ringPhone
{@drKelp}  Head back to the ship for your next task!

$call hotbar.guide->Show()
$call hotbar.guide->ForceOnTop()
$call FocusHighlight->Focus(hotbar.guide)
    Talk to {nameof @guide} by clicking the {h}top right button{/h} up here.
    They can help if you get stuck!
$call hotbar.guide->ResetSorting()
$call FocusHighlight->Clear()

:: navigation.return.incomplete
@trigger    SceneStart
@when       scene:name == "KelpStation", JobTaskCompleted(gotoSiteC), !jobs:kelp-welcome.got.scans
@cutscene
$branch common.ringPhone

{@player}   Is that it? 
{@drKelp}  Oh dear. I'm afraid you missed something. 
            Why don't you head back to {h}site C{/h} and try again?

:: helpReturnToShip
@trigger    RequestPartnerHelp
@when 		scene:name == "KelpStation", JobTaskActive(returnToShip)
@cutscene
{@player} 	What now?
{@guide}	We need to head into the helm. 

// BACK AT SHIP

:: atShip
@trigger    SceneStart
@when       scene:name == "Helm", JobTaskActive(runExperiment)
@once
@cutscene
$branch common.ringPhone

{@drKelp}  Great! You scanned some life forms! 
            Now I need you to find out how they interact.
{@player}   Interact? What's that mean?
{@guide}    It's a nice way of saying we need to find out which ones eat each other.
{@player}   Yikes. Ok. How do we do that? 
{@drKelp}  Your ship has a built-in {nameof Experimentation}!
{hide-dialog}

$call UnlockRoom("Experimentation")
$call GiveUpgrade(ObservationTank)
$call FocusHighlight->Focus("exterior.experimentation", 200, 200)
{wait 1}

{@drKelp}  Head over there to start your next task! 
$call FocusHighlight->Clear()
$call AutoSaveNow()

:: helpGoToExperimentRoom
@trigger    RequestPartnerHelp
@when 		JobTaskActive(runExperiment), scene:name != "ExperimentV2"
@cutscene
{@player} 	Now what?
{@guide}	Let's head to the {nameof Experimentation}.

:: firstExperiment
@trigger    SceneStart
@when       scene:name == "ExperimentV2", JobTaskActive(runExperiment)
@once
@cutscene
$branch common.ringPhone

{@drKelp}  What a lovely old tank! This ship really is ancient, isn't it.
            Go ahead, take a closer look!
            
:: firstCaptureCircle
@trigger    BehaviorCaptureChance
@chatter
@once

$if local:factId == "Urchin.Eats.GiantKelp"
    {@guide}    Whoa!| That urchin's eating something!
$else
    {@guide}    Whoa!| That sea otter's eating something!
$endif

:: firstCaptureSuccess
@trigger    NewBehaviorObserved
@chatter
@once
@boostScore 1000

$if local:factId == "Urchin.Eats.GiantKelp"
    {@guide}    Nice one! Looks like {pluralnameof Urchin} eat {pluralnameof GiantKelp}. 
    {$guide}    Nice one! Looks like {pluralnameof SeaOtter} eat {pluralnameof Urchin}. 
$endif
{@guide}    That should be recorded in our {item-name}Bestiary{/item-name} now.

:: firstCaptureCircleExpire
@trigger    BehaviorCaptureChanceExpired
@when       newFact == true
@chatter
@once

{@guide}    Looks like you missed that one. 
            Try to record that behavior when it happens again.

:: helpFirstExperiment
@trigger    RequestPartnerHelp
@when 		scene:name == "ExperimentV2", !JobTaskCompleted(runExperiment)
@boostScore -500
@cutscene
{@player}   Ok, now what? 
$if ExperimentIsRunning()
    {@guide}	Humans. So impatient. 
                Watch the tank and click to record new behaviors.  
                We need to find out how these species interact.
$else
    {@guide}    You need to set up the tank. 
                You'll need some {nameof SeaOtter}, some {nameof Urchin}, and some {nameof GiantKelp}.
                And make sure to use a {nameof WarmKelpForest} environment.
$endif

:: experimentFinished
@trigger    ExperimentFinished
@when       scene:name == "ExperimentV2", JobTaskCompleted(runExperiment)
@cutscene
@once

$branch common.ringPhone
{@drKelp}  Excellent work, {player-name}! 
            Report back to the {m}research station{/m} at once, so we can discuss your findings.
            // Head to your {map-name}Office{/map-name} and use your {h}Computer{/h} to send me your findings.
            // There we'll discuss your findings using argumentation with the facts you've collected.

$call   UnlockRoom("office")

// REPORT BACK

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@cutscene
{@player} 	What now?
{@guide}	Let's report back to {nameof @drKelp}.
$if global:nav.shipRoom != "office"
	{@guide}	We should head back to your Sub to return to the {map-name}research station{/map-name} where we got this job.
$else
	{@guide}	Report your findings with the {h}Computer{/h} in front of you.
$endif

:: helpReportBackInArgumentation
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack), scene:name == "Argumentation"
@cutscene
{@player} 	What now?
{@guide}	Let's tell {nameof @drKelp} what we found out.

// CATCH-ALL GUIDE TEXT

// :: catchGoToSiteC
// @trigger    RequestPartnerHelp
// @when 		JobTaskActive(gotoSiteC)
// @boostScore -5
// @cutscene
// {@guide}    Head to {h}site C{/h}.

:: catchScanGiantKelp
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanGiantKelp)
@boostScore -5
@cutscene
{@guide}    Make sure to scan all the organisms here. Have you looked at the Kelp yet?

:: catchScanUrchin
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanUrchin)
@boostScore -5
@cutscene
{@guide}    Make sure to scan all the organisms here. Have you looked at the Urchins yet?

:: catchScanOtter
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanOtter)
@boostScore -5
@cutscene
{@guide}    Make sure to scan all the organisms here. Have you looked at the Otters yet?

:: catchReturnToShip
@trigger    RequestPartnerHelp
@when 		JobTaskActive(returnToShip)
@boostScore -5
@cutscene
{@guide}    Time to head back to the ship!

:: catchRunExperiment
@trigger    RequestPartnerHelp
@when 		JobTaskActive(runExperiment)
@boostScore -5
@cutscene
{@guide}    Head to the Observation Tank to find what eats what.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Talk to {nameof drKelp} in the Office.

//ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(welcomeArgue)
@cutscene

$call ArgueLoad(welcomeArgue)
	$if ArgueSetClaim(welcomeArgueClaim, jobs.kelp-welcome.argue.claimLabel)
			$call ArgueFactSlot(SeaOtter.Eats.Urchin)
			$call ArgueFactSlot(Urchin.Eats.GiantKelp)
	$endif

	$branch .argue.hello
	
::argue.hello
{@drKelp}    Thanks for your help out there, {player-name}! What did you find out?
$goto .argue.chooseFacts

::argue.chooseFacts
$call ArgueDisplayClaim()
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice #argueFact; Present facts from AQOS
        $answer SeaOtter.Eats.Urchin, .argue.otter
        $answer Urchin.Eats.GiantKelp, .argue.urchin
        $answer *, .argue.unrelated
    $choice .argue.giveUp; Let me get back to you
$endif


::argue.otter
$if ArgueIsFactSubmitted(Urchin.Eats.GiantKelp)
	$goto .argue.done
$else
	{@drKelp}    Got it. The {pluralnameof SeaOtter} eat {pluralnameof Urchin}. Did you learn anything about what the {pluralnameof Urchin} eat?
	$goto .argue.chooseFacts
$endif

::argue.urchin
$if ArgueIsFactSubmitted(SeaOtter.Eats.Urchin)
	$goto .argue.done
$else
	{@drKelp}    So {pluralnameof Urchin} live on {pluralnameof GiantKelp}. Interesting! Did you learn anything about the {pluralnameof SeaOtter}?
	$goto .argue.chooseFacts
$endif

::argue.unrelated
{@drKelp}    Hmm, no, that isn't relevant.
$call ArgueRejectIncorrect()
$goto .argue.chooseFacts

::argue.giveUp
{@drKelp}    OK get back to me when you're ready.

::argue.done
$call ArgueComplete()
{@drKelp}    Really nice work! You just explained the basis of the kelp forest food web.
$call CompleteJob()

// DONE

:: end
@trigger    JobCompleted
@cutscene
{@drKelp}	Wonderful! Thank you for your help, {player-name}! 
{@player}   Easy peasy. I was glad to help. 
{@guide}    Ahem.
{@player}   Oh. Uh, V1ctor helped too. A little. 
{@drKelp}  Don't suppose you'd like another job?
            I've got work available at other research sites.
            You can find them on the {map-name}Job Board{/map-name}!

$call hotbar.guide->Show()
$call hotbar.portable->Show()
$call UnlockSite("RS-1C")
$call UnlockRoom("nav")
$call UnlockRoom("exterior")
$call UnlockRoom("Experimentation")
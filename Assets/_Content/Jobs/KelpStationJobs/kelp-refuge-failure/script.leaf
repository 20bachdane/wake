#basePath   job.kelp-refuge-failure

:: start
@trigger    JobStarted
@cutscene

{@drKelp}	Well, despite our efforts, the Giant Kelp are taking over the refuge.
{@player}   Wait... en serio??
{@player}   I thought it was going to work! 
{@drKelp}   That's science, Olivia. 
{@drKelp}   We make the best predictions we can with the information available to us.
{@drKelp}   If things don't turn out as planned, we learn more, adjust our thinking, and carry on.
{@player}   ....Okay, Mom. Where do we start?
{@drKelp}    I need you to use your new predictive modeling tool.
			Start by gathering data from Kelp Refuge site.
			Once you have those numbers, run a simulation and figure out what's happening down there. 
{@player}   Okay. I can handle that. 
{@player}   But Mom... no entiendo. The Refuge is your dream. Why aren't you sadder about this?
{@drKelp}   It takes a lot to break my heart, Mija.
$set jobs:kelp-refuge-failure.sync-failed = false
$call GiveJournalEntry("N11_RefugeNotWorking")

:: helpLeaveShip
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", !jobs:kelp-refuge-failure.seen.bottom
@cutscene
{@player}   Where should I go from here?
{@guide}    You'll need to dive to the Kelp Refuge site. 

:: diveSite
@trigger    SceneStart
@when       scene:name == "RS-1D"
@once
@cutscene
$set    	jobs:coral-stressed.seen.bottom = true
{@player}   Wow. Mom was right.
{@player}   The Giant Kelp have completely taken over.
{@guide}    My sensors indicate you are stressed, O. 
{@guide}    Perhaps we should run an experiment to determine your ideal environmental conditions. 
{@player}   ....Did you just make a joke, {nameof @guide}?
{@player}   Because I gotta say, it was pretty good.
{@guide}    Thank you, O.
{@guide}    We need to gather the historical population data.
{@guide}    See if you can track down the population probe.

:: helpHistorical
@trigger    RequestPartnerHelp
@when 		JobTaskTop(histPop)
@cutscene
{@player}   Where should I go from here?
{@guide}	We need the historical population. You'll need to find and scan the population probe.


:: probeCollectionComplete
@trigger	JobTaskCompleted
@who		guide
@when		HasFact(MixedKelp.PopulationHistory.BullKelp), HasFact(MixedKelp.PopulationHistory.GiantKelp), HasFact(MixedKelp.Light.History)
@once
@chatter

{@guide}	Presentable work, O! You've gathered the data we need. 
{@guide}    Your next priority is to measure the reproductive rates of kelp. 
{@guide}    Head to the surface and go to your Experiment Room. 
$set    	jobs:kelp-refuge-failure.collected.probe = true


// EXPERIMENTS 

:: helpToExperiment
@trigger    RequestPartnerHelp
@when 		scene:name != "ExperimentV2", jobs:kelp-refuge-failure.collected.probe == true, !JobTaskTop(newModel), !JobTaskTop(getPaid)
@cutscene
{@player}   Where should I go from here?
{@guide}	Head to the {h}Measurement Tank{/h} to measure Kelp reproduction rates.

:: startExperiment
@trigger	ExperimentTankViewed
@when		tankType == "Measurement"
@once
@cutscene
{@guide}	You need the reproduction rates of kelp when stressed and unstressed.
			Add only one species, and make sure it's fed and stabilized.
			You'll need to study the kelp in multiple ecosystems to obtain both stressed and unstressed rules. 

:: helpAtExperiment
@trigger    RequestPartnerHelp
@when 		scene:name == "ExperimentV2", !JobTaskTop(newModel), !JobTaskTop(getPaid)
@cutscene
{@player} 	How should I do this again?
{@guide}	You need the reproduction rates of kelp when stressed and unstressed.
			You will need to put the kelp in multiple ecosystems.
			Which sites are they are stressed in, and which sites allow them to thrive? 

:: experimentGrowthEnd
@trigger    JobTasksUpdated
@when 		JobTaskCompleted(growthRates), JobTaskCompleted(growthRatesBull)
@once
@cutscene
{@guide}	Agreeable work, O!
$if JobTaskCompleted(lightRatesGiant), JobTaskCompleted(lightRatesBull)
	{@guide}	And you have already measured how {nameof GiantKelp} and {nameof BullKelp} consume light.
				Looks like your past work has come in handy!
	$goto .experimentsCompleted
$else
	{@guide}	You will also need to measure how {nameof GiantKelp} and {nameof BullKelp} affect light levels.
				Add them to the Measurement Tank again separately... only this time turn off the Stabilizer Controls and turn on the Auto Feeder.
$endif

:: experimentConsumeEnd
@trigger    JobTasksUpdated
@when 		JobTaskTop(newModel)
@once
@cutscene
{@guide}	Hmm. The {h}Measurement Tank{/h} has provided us with some new clues.
$goto .experimentsCompleted

:: experimentsCompleted
{@player}   Okay. What now, {nameof @guide}?
{@guide}	You need to build a model that incorporates all of this data.
			This will help you determine why the {nameof BullKelp} are reproducing more slowly.
			Head to the Modeling Room.

// MODELING	

			
:: helpBeginModel
@trigger    RequestPartnerHelp
@when 		JobTaskTop(newModel)
@cutscene
{@player} 	What do we need to do now?
{@guide}	Now we need to build a model.

:: modelingStart
@trigger    SceneStart
@when 		JobTaskTop(newModel), scene:name == "Modeling"
@once
@cutscene
{@guide}	Let's input the data we've gathered and see if we can get a model that matches historical data.

:: lightDeecreaseModelingComplete
@trigger	SimulationSyncSuccess
@once
@cutscene
{@guide}	You solved it, O!
{@player}   Yeah. I guess so. 
{@guide}    Now you can help your mother understand why the Kelp Refuge failed.
{@guide}    Time to head back to the station.

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskTop(getPaid)
@cutscene
{@player} 	What do we need to do now?
{@guide}	Return to the research station and share your findings. 


// MODELING SUGGESTIONS

:: triggerSyncFailure
@trigger    SimulationSyncError
@when       !jobs:kelp-refuge-failure.sync-failed
@once
$set jobs:kelp-refuge-failure.sync-failed = true

:: helpModelSync.Visual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(newModel), scene:name == "Modeling", modeling:phase == "visual"
@cutscene
$branch .modelSuggestions

:: helpModelSync.Sync
@trigger    RequestPartnerHelp
@when 		JobTaskActive(newModel), scene:name == "Modeling", modeling:phase == "sync"
@cutscene
$branch .modelSuggestions

:: modelSuggestions
$if HasFact(SeaOtter.Eats.Urchin), HasFact(Urchin.Eats.BullKelp), HasFact(Urchin.Eats.GiantKelp), HasFact(BullKelp.Reproduce), HasFact(BullKelp.Reproduce.Stressed), HasFact(BullKelp.Produce.Oxygen), HasFact(BullKelp.Consume.Light), HasFact(BullKelp.Consume.CarbonDioxide), HasFact(GiantKelp.Reproduce), HasFact(GiantKelp.Reproduce.Stressed), HasFact(GiantKelp.Produce.Oxygen), HasFact(GiantKelp.Consume.Light), HasFact(GiantKelp.Consume.CarbonDioxide)
    $if HasFact(MixedKelp.Model.RefugeConcept)
        {@guide}    You're done with this portion! Head to the {h}Describe{/h} tab next.
    $else
        {@guide}    Once you import your facts and save the Visual model, we should be good to make our Describe model!
    $endif
$else
    $if !jobs:kelp-refuge-failure.sync-failed
        {@guide}    Time to try out your model in the {h}Describe{/h} tab.
    $else
        {@guide}    Seems like we don't have enough information to complete our model accurately.
                    Look for {h}question marks{/h} in the  Visual model interface, those point to where we may need more data.

		$if !HasFact(SeaOtter.Eats.Urchin)
			$branch .suggestObserve
		$elseif !HasFact(Urchin.Eats.BullKelp)
			$branch .suggestObserve
		$elseif !HasFact(Urchin.Eats.GiantKelp)
			$branch .suggestObserve
		$elseif !HasFact(BullKelp.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(BullKelp.Reproduce.Stressed)
			$branch .suggestReproduce
		$elseif !HasFact(BullKelp.Produce.Oxygen)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(BullKelp.Consume.Light)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(BullKelp.Consume.CarbonDioxide)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(GiantKelp.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(GiantKelp.Reproduce.Stressed)
			$branch .suggestReproduce
		$elseif !HasFact(GiantKelp.Produce.Oxygen)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(GiantKelp.Consume.Light)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(GiantKelp.Consume.CarbonDioxide)
			$branch .suggestMeasureEnviro
		$endif
    $endif
$endif

:: suggestReproduce
{@guide}    Did you get all the reproduction rates?

:: suggestObserve
{@guide}    Are you sure you have observed all the interactions here?

:: suggestMeasureEnviro
{@guide}    Are you sure you've found out all the ways the different organisms affect the water conditions? The {h}Measurement Tank{/h} may still be useful.


// CATCH-ALL GUIDE TEXT

:: catchVisitSite
@trigger    RequestPartnerHelp
@when 		JobTaskActive(visitSite)
@boostScore -5
@cutscene
{@guide}   	Head to Site D. You'll need to take a look around.

:: catchHistPop
@trigger    RequestPartnerHelp
@when 		JobTaskActive(histPop)
@boostScore -5
@cutscene
{@guide}	You'll need to collect data from the population probe at site D.

:: catchGrowthRates
@trigger    RequestPartnerHelp
@when 		JobTaskActive(growthRates)
@boostScore -5
@cutscene
{@guide}    Place some {nameof GiantKelp} into the Measurement Tank using water from different ecosystems. Then focus on the reproductive rates.

:: catchGrowthRatesBull
@trigger    RequestPartnerHelp
@when 		JobTaskActive(growthRatesBull)
@boostScore -5
@cutscene
{@guide}	Place some {nameof BullKelp} into the Measurement Tank using water from different ecosystems. Then focus on the reproduction rates.

:: catchLightRatesGiant
@trigger    RequestPartnerHelp
@when 		JobTaskActive(lightRatesGiant)
@boostScore -5
@cutscene
{@guide}	Place some {nameof GiantKelp} into the Measurement Tank using water from different ecosystems. Then focus on how much light they consume.

:: catchLightRatesBull
@trigger    RequestPartnerHelp
@when 		JobTaskActive(lightRatesBull)
@boostScore -5
@cutscene
{@guide}	Place some {nameof BullKelp} into the Measurement Tank using water from different ecosystems. Then focus on how much light they consume.

:: catchNewModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(newModel)
@boostScore -5
@cutscene
{@guide}	Create a Sync Model of {nameof GiantKelp} and {nameof BullKelp} at the Refuge site.

:: catchGetPaid
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getPaid)
@boostScore -5
@cutscene
{@guide}	Time to head back to the {m}research station{/m} and tell {nameof @drKelp} what you discovered.

// ARGUMENTATION

::argue.chooseClaim
@trigger    TryArgumentation
@when   !ArgueIsComplete(refugeFailureArgue)
@cutscene
$call ArgueLoad(refugeFailureArgue)
{@drKelp} Olivia! I'm eager to hear what you discovered. 
{@drKelp} Why did the Refuge fail for the {nameof BullKelp}?
	$choice .argue.wrongTemp; The water is the wrong temperature.
	$choice .argue.slowGrowth; The Bull Kelp are reproducing at a slower rate than expected.
	$choice .argue.pickyUrchins; The urchins are only eating the Bull Kelp.
	$choice .argue.notReady; I'm not sure. Let me get back to you.
$choose branch

:: argue.notReady
{@drKelp} Okay, Mija. I'll be here whenever you're ready.

::argue.wrongTemp
{@drKelp}	Hmmm. That can't be.
{@drKelp}    We already know that Bull Kelp thrive at 14°C. 
{@drKelp}   It must be something else.
$goto .argue.chooseClaim

::argue.pickyUrchins
{@drKelp}  That doesn't quite make sense, Mija.
{@drKelp}  You've already determined that Urchins eat both types of Kelp. 
{@drKelp}   Do you have another theory?
$goto .argue.chooseClaim

::argue.slowGrowth
{@drKelp}	Hmmm. Yes, that could be the problem.
			Show me your model. Does it explain why the {nameof BullKelp} are reproducing more slowly?
$if ArgueSetClaim(refugeFailureArgueClaim, jobs.kelp-refuge-failure.argue.claimLabel)
			$call ArgueFactSlot(MixedKelp.Model.RefugeFail)
$endif
$call ArgueDisplayClaim()
$goto .argue.defendClaim

::argue.defendClaim
$if ArgueAllFactsCorrect()
    $goto .argue.correctFacts
$else
	$choice #argueFactSet; Present facts from AQOS
			$answer correct, .argue.correctFacts
			$answer incorrect, .argue.incorrectFacts
	$choice .argue.giveUp; Let me get back to you
$endif

:: argue.correctFacts
$call ArgueComplete()
{@drKelp}	Wow. So both types of kelp were doing fine, but then the {nameof GiantKelp} started blocking the light, stressing the {nameof BullKelp}.
{@drKelp}	Excellent work, Olivia!
{@player}  What do you mean, excellent? The Refuge failed!
{@drKelp}  Yes. But now we understand why, and we can try something different next time.
{@drKelp}  That's science. Slow. Methodical. 
{@player}  I bet Mer would've figured it out by now.
{@drKelp}  Hm? What was that, Mija?
{@player}  Nothing, Mom. Just... back to square one, I guess. 

$call CompleteJob()

:: argue.incorrectFacts
{@drKelp} That doesn't explain it, Olivia. Did you make a model of the site?
$call ArgueRejectIncorrect()
$goto .argue.defendClaim

:: argue.giveUp
{@drKelp} Okay, Sweetie. Get back to me when you're ready.

::end
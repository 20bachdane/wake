#basePath   job.kelp-refuge-failure

:: start
@trigger    JobStarted
@cutscene

$branch common.ringPhone

{@drKelp}	Well, despite our best thinking, the Giant Kelp are taking over the refuge.
			That's science I guess: we make our best predictions,
			but sometimes things don't turn out as planned.
			So we learn more, update our thinking and carry on.
{@player}	Sounds slow.
{@drKelp}	Sometimes it is!
			So first we need to learn more by using your new predictive modeling tool.
			You will start by getting all numerical data the tool needs, 
			like the historical population and the kelp reproduction rates.
			Once we have all those numbers, the tool will run a simulations
			and help us describe what's happening down there.
			Let's start by going to the kelp refuge site to count those populations.

:: helpLeaveShip
@trigger    RequestPartnerHelp
@when 		scene:name == "Ship", !jobs:kelp-refuge-failure.seen.bottom
@cutscene
{@player}   Where should I go from here?
{@kevin}	Let's dive into the kelp refuge site and see what's happening.

:: diveSite
@trigger    SceneStart
@when       scene:name == "RS-1D"
@once
@cutscene
$set    	jobs:coral-stressed.seen.bottom = true
{@kevin}	Dr. Kelpurnia was right, there are very few Bull Kelp compared to Giant Kelp.
			Let's see what the population history has been like since the refuge was created. We'll need to scan the population probe.
{@kevin}   	Do you see it anywhere?

:: helpHistorical
@trigger    RequestPartnerHelp
@when 		JobTaskTop(histPop)
@cutscene
{@player}   Where should I go from here?
{@kevin}	We'll need the historical population - check the population probe.


:: probeCollectionComplete
@trigger	JobTaskCompleted
@who		kevin
@when		HasFact(MixedKelp.PopulationHistory.BullKelp), HasFact(MixedKelp.PopulationHistory.GiantKelp)
@once
@chatter

{@kevin}	Measuring the reproduction rates of kelp is our next priority. Let's surface and get to the Experiment Room.
$set    	jobs:kelp-refuge-failure.collected.probe = true


// EXPERIMENTS 

:: helpToExperiment
@trigger    RequestPartnerHelp
@when 		scene:name != "ExperimentV2", jobs:kelp-refuge-failure.collected.probe == true, !JobTaskTop(newModel), !JobTaskTop(getPaid)
@cutscene
{@player}   Where should I go from here?
{@kevin}	Let's head to the {h}Measurement Tank{/h} to measure Kelp reproduction rates.

:: startExperiment
@trigger	ExperimentTankViewed
@when		tankType == "Measurement"
@once
@cutscene
{@kevin}	We need the reproduction rates of kelp when stressed and unstressed.
			Reproduction rate means put in only one species and make sure it's fed and stabilized.
			What site should we replicate?

:: helpAtExperiment
@trigger    RequestPartnerHelp
@when 		scene:name == "ExperimentV2", !JobTaskTop(newModel), !JobTaskTop(getPaid)
@cutscene
{@player} 	How should I do this again?
{@kevin}	We need the reproduction rates of kelp when stressed and unstressed.
			What sites do we know they are stressed in, and which do we know they're not stressed in?

:: experimentGrowthEnd
@trigger    JobTasksUpdated
@when 		JobTaskCompleted(growthRates), JobTaskCompleted(growthRatesBull)
@once
@cutscene
{@kevin}	Nice work!
$if JobTaskCompleted(lightRatesGiant), JobTaskCompleted(lightRatesBull)
	{@kevin}	And you already measured how {nameof GiantKelp} and {nameof BullKelp} consume light.
				Way to be proactive!
	$goto .experimentsCompleted
$else
	{@kevin}	We will also need to measure how {nameof GiantKelp} and {nameof BullKelp} affect the light levels.
				Add them to the Measurement Tank again separately, only this time turn off the Stabilizer Controls and turn the Auto Feeder on.
$endif

:: experimentConsumeEnd
@trigger    JobTasksUpdated
@when 		JobTaskTop(newModel)
@once
@cutscene
{@kevin}	Fantastic! The {h}Measurement Tank{/h} gave us some new clues.
$goto .experimentsCompleted

:: experimentsCompleted
{@kevin}	Now we need to build a model that incorporates all of this data so we can be certain of what's causing {nameof BullKelp} to reproduce more slowly.
			We should head to the Modeling room for that.

// MODELING	

			
:: helpBeginModel
@trigger    RequestPartnerHelp
@when 		JobTaskTop(newModel)
@cutscene
{@player} 	What do we need to do now?
{@kevin}	Now we need to build a model.

:: modelingStart
@trigger    SceneStart
@when 		JobTaskTop(newModel), scene:name == "Modeling"
@once
@cutscene
{@kevin}	Let's input the data we've gathered and see if we can get a model that matches historical data.

:: lightDeecreaseModelingComplete
@trigger	SimulationSyncSuccess
@once
@cutscene
{@kevin}	We've solved it! Let's tell Dr. Kelpurnia the good news.

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskTop(getPaid)
@cutscene
{@player} 	What do we need to do now?
{@kevin}	The communications room is where we should go to share your findings.

// CATCH-ALL GUIDE TEXT

:: catchVisitSite
@trigger    RequestPartnerHelp
@when 		JobTaskActive(visitSite)
@boostScore -5
@cutscene
{@kevin}   	Head to Site D. We need to take a look around.

:: catchHistPop
@trigger    RequestPartnerHelp
@when 		JobTaskActive(histPop)
@boostScore -5
@cutscene
{@kevin}	There should be a population probe we can collect data from at Site D.

:: catchGrowthRates
@trigger    RequestPartnerHelp
@when 		JobTaskActive(growthRates)
@boostScore -5
@cutscene
{@kevin}    Place some {nameof GiantKelp} into the Measurement Tank using water from different ecosystems, then focus on the reproductive rates.

:: catchGrowthRatesBull
@trigger    RequestPartnerHelp
@when 		JobTaskActive(growthRatesBull)
@boostScore -5
@cutscene
{@kevin}	Place some {nameof BullKelp} into the Measurement Tank using water from different ecosystems, then focus on the reproduction rates.

:: catchLightRatesGiant
@trigger    RequestPartnerHelp
@when 		JobTaskActive(lightRatesGiant)
@boostScore -5
@cutscene
{@kevin}	Place some {nameof GiantKelp} into the Measurement Tank using water from different ecosystems, then focus on how much light they consume.

:: catchLightRatesBull
@trigger    RequestPartnerHelp
@when 		JobTaskActive(lightRatesBull)
@boostScore -5
@cutscene
{@kevin}	Place some {nameof BullKelp} into the Measurement Tank using water from different ecosystems, then focus on how much light they consume.

:: catchNewModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(newModel)
@boostScore -5
@cutscene
{@kevin}	Create a Sync Model of {nameof GiantKelp} and {nameof BullKelp} at the site.

:: catchGetPaid
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getPaid)
@boostScore -5
@cutscene
{@kevin}	Let's head back to the Office and tell Dr. Kelpurnia what we found.

// ARGUMENTATION

::argue.chooseClaim
@trigger    TryArgumentation
@when   !ArgueIsComplete(refugeFailureArgue)
@cutscene
$call ArgueLoad(refugeFailureArgue)
{@drKelp} So why didn't the Refuge work for the {nameof BullKelp}?
	$choice .argue.wrongTemp; It's the wrong temperature.
	$choice .argue.slowGrowth; The Bull Kelp are reproducing at a slower rate than expected.
	$choice .argue.pickyUrchins; The urchins are only eating the Bull Kelp.
	$choice .argue.notReady; Let me get back to you
$choose branch

:: argue.notReady
{@drKelp} OK. Get back to me when you're ready.

::argue.wrongTemp
{@drKelp}	We already know that Bull Kelp should thrive at 14Â°C. It must be something else.
$goto .argue.chooseClaim

::argue.pickyUrchins
{@drKelp}	Hmmm. We know that Urchins eat both Kelp. Do you have another theory?
$goto .argue.chooseClaim

::argue.slowGrowth
{@drKelp}	Show me your model. Does it explain why the {nameof BullKelp} are reproducing more slowly?
$if ArgueSetClaim(refugeFailureArgueClaim, jobs.kelp-refuge-failure.argue.claimLabel)
			$call ArgueFactSlot(MixedKelp.Model.RefugeFail)
$endif
$call ArgueDisplayClaim()
$goto .argue.defendClaim

::argue.defendClaim
$if ArgueAllFactsCorrect()
    $goto .argue.correctFacts
$else
	$choice #argueFactSet; Present facts from AQOS
			$answer correct, .argue.correctFacts
			$answer incorrect, .argue.incorrectFacts
	$choice .argue.giveUp; Let me get back to you
$endif

:: argue.correctFacts
$call ArgueComplete()
{@drKelp}	Wow. So both were doing fine, but the {nameof GiantKelp} started blocking the light, making the {nameof GiantKelp} stressed.
{@drKelp}	That does explain it.
{@drKelp}	I guess it's back to the drawing board for this Refuge idea.
$call CompleteJob()

:: argue.incorrectFacts
{@drKelp} That doesn't explain it. Did you make a model of the site?
$call ArgueRejectIncorrect()
$goto .argue.defendClaim

:: argue.giveUp
{@drKelp} OK. Get back to me when you're ready.

::end
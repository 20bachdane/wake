#basePath   job.kelp-refuge-failure-simulation

:: start
@trigger    JobStarted
@cutscene

{@drKelp}	Thank you, Olivia. It means so much that you're here.
{@player}   Duh, Mom. We're in this together.
			So what's our next move?
{@drKelp}   We know Mer's Refuge is failing. 
{@drKelp}   Your job is to figure out what will happen if we don't intervene.
{@player}   I mean... it seems pretty obvious that the Bull Kelp will all die off.
			Do we really need to waste time proving it? 
{@drKelp}   It's not a waste, Olivia. We need specifics. Data.
{@player}   But Mom...
{@drKelp}	Head to your {nameof Modeling} and get some answers for me, okay, Sweetie?
{@player}   Okay. Got it. 

:: helpGoToModeling
@trigger    RequestPartnerHelp
@when 		JobTaskTop(createModel)
@cutscene
{@player}   Where should I go from here, {nameof @guide}?
{@guide}	Your Predictive Modeling Tool should be perfect for this task!
{@guide}    Head to the {nameof Modeling} on your ship. 
$if scene:name == "Modeling"

$else
	{@guide}	Let's head to the {nameof Modeling}
$endif

// MODELING

:: modelingStart
@trigger    SceneStart
@when 		JobTaskTop(createModel), scene:name == "Modeling"
@once
@cutscene
{@guide}	The Predictive Modeling Tool will use your data to predict the most likely outcome for the Bull Kelp.
{@player}   Great. So basically, we get to find out if the Bull Kelp is dying fast, or dying super fast.
{@guide}    Exactly, O!
{@guide}    My sensors indicate you are experiencing sadness. Or possibly hunger.
{@guide}    Would you like to visit the Kelp Forest's emotional support jellyfish, Kevin?
{@player}   Nah. Thanks anyway, {nameof @guide}.

:: modelComplete
@trigger	SimulationSyncSuccess
@once
@cutscene
{@player}	Wow. The Bull Kelp... they died so fast.
{@guide}    It appears you are experiencing sadness again.
{@player}   Mom has been working toward this Refuge for years. She'll be crushed.
{@guide}    Ah. Don't worry, O. 
{@guide}    The water pressure at these depths aren't strong enough to crush a human--your mother should be fine.
{@player}   ....Thanks, {nameof @guide}. 
{@guide}    Don't mention it, O. 

:: helpShareModel
@trigger    RequestPartnerHelp
@when 		JobTaskTop(shareModel)
@cutscene
{@player}   What now, {nameof @guide}?
{@guide}	Head back to the {m}research station{/m} and tell your mother what you found out. 

// CATCH-ALL GUIDE TEXT

:: catchCreateModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(createModel)
@boostScore -5
@cutscene
{@player}   What now, {nameof @guide}?
{@guide}   	You need to create a Predictive Model at the Modeling Lab.

:: catchShareModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(shareModel)
@boostScore -5
@cutscene
{@guide}	Show your model to {nameof drKelp}!

// ARGUMENTATION

::argue.chooseClaim
@trigger    TryArgumentation
@when   !ArgueIsComplete(refugeFailureSimulationArgue)
@cutscene
$call ArgueLoad(refugeFailureSimulationArgue)
{@drKelp} Okay, Sweetie, let's see what you discovered.
		  How bad is it going to be? 
$if ArgueSetClaim(refugeFailureSimulationArgueClaim, jobs.kelp-refuge-failure-simulation.argue.claimLabel)
			$call ArgueFactSlot(MixedKelp.Model.RefugeFailPredict)
$endif
$call ArgueDisplayClaim()
$goto .argue.defendClaim

::argue.defendClaim
$if ArgueAllFactsCorrect()
    $goto .argue.correctFacts
$else
	$choice #argueFactSet; Present facts from AQOS
			$answer correct, .argue.correctFacts
			$answer incorrect, .argue.incorrectFacts
	$choice .argue.giveUp; Let me get back to you
$endif

:: argue.correctFacts
$call ArgueComplete()
{@drKelp}	Wow. Looks like we've got a Kelp Emergency on our hands. 
{@player}   I'm sorry, Mom. I knew this job was a bad idea. 
{@drKelp}   A bad idea?? Sweetie, this information is exactly what we needed.
{@drKelp}   The Bull Kelp would still be dying whether we knew about it or not. 
{@drKelp}   Now that we understand how bad it is, we can make a plan.
{@drKelp}   I'm glad you figured it out. 
$call CompleteJob()

:: argue.incorrectFacts
{@drKelp} Hmm. That isn't what we're looking for. 
		  Did you make a Predictive Model for Mer's Refuge? 
$call ArgueRejectIncorrect()
$goto .argue.defendClaim

:: argue.giveUp
{@drKelp} Okay, Sweetie. Get back to me when you're ready.

::end
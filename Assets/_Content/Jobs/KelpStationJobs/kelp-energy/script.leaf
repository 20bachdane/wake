#basePath   job.kelp-energy

// beginning

:: start
@trigger    JobStarted
@cutscene
$branch common.ringPhone
{@drKelp}	Good to see you again, {player-name}! 
            I need you to create a model of Site C - Warm Kelp Forest's food web.
$if !RoomUnlocked("ModelingFoyer")
    {@drKelp}	I've unlocked a new room on your Ship, the {map-name}Modeling Lab{/map-name}.
    $call UnlockRoom("ModelingFoyer")
    $call UnlockRoom("Modeling")
$endif
{@drKelp}	Use the {map-name}Modeling Lab{/map-name} to visualize Site C's food web.
            When you are done, check back with me at the {m}research station{/m}!
$set jobs:kelp-energy-visual-model.saved = false

:: helpGoModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", JobTaskTop(foodweb)
@cutscene
{@player}   Any idea where I should go next?
{@guide}	Let's head to the {nameof Modeling} to model the food web.

// IN MODELING

:: helpModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", JobTaskTop(foodweb)
@cutscene
{@player}   Any idea what to do here?
{@guide}	When we make a food web, the first step is to import our facts into the model.

:: ModelingSetup-Wrong
@trigger	VisualModelStarted
@when       modeling:ecosystemSelected != "WarmKelpForest", !HasFact(WarmKelpForest.Model.Conceptual)
@cutscene
{@guide}	Ah, hang on, this isn't the right ecosystem.
            Head back to the {h}Ecosystem{/h} tab and select the {nameof WarmKelpForest}.

:: generic.visual-model.opened
@trigger	VisualModelStarted
@when		scene:name == "Modeling"
@once
@cutscene
{@guide}	Start by clicking the {h}Import New Facts{/h} button to bring all the facts we know about this ecosystem into the model.

:: generic.visual-model.imported
@trigger	VisualModelUpdated
@when		scene:name == "Modeling"
@once
@cutscene
{@guide}	This is a visual model of all the species that exist at the site.
            Arrows show any relationships you've discovered from experiments. Arrows showing eating relations point toward the thing doing the consuming.
			If you are in a job, and the Visual Model meets all the requirements, you will be able to save the model.
	
:: modelingComplete
@trigger    JobTasksUpdated
@when       JobTaskTop(reportBack)
@once
@cutscene
{@guide}    Looks like you've successfully created a visual model of the warm kelp forest!
            Let's bring it back to the {map-name}research station{/map-name}, where we can discuss it with {nameof drKelp}.
$set jobs:kelp-energy-visual-model.saved = true

// report back

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskCompleted(foodweb)
@boostScore 2
@cutscene
{@player} 	What should we do now?
{@guide}	We've modeled the relationships between {pluralnameof Urchin}, {pluralnameof GiantKelp}, and {pluralnameof SeaOtter}.
			So let's report back to {nameof @drKelp}.
$if !IsPlayerOnStation()
	{@guide}	We should first head back to the {map-name}research station{/map-name}.
$endif

// SUGGEST ARGUMENTATION

:: helpArgumentation
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportBack)
@cutscene
$if scene:name == "Argumentation"
    {@player}   What should I be doing again?
    {@guide}    Report your findings to {nameof @drKelp}.
$elseif !IsPlayerOnStation()
    {@player}   What should we do now?
    {@guide}    Let's report our findings to {nameof @drKelp}.
$else
    {@player} 	What should we do now?
	{@guide}	Well, we've completed the modeling, so let's report back to {nameof @drKelp}.
                We should first head back to the {map-name}research station{/map-name}.
$endif

// CATCH-ALL GUIDE TEXT

:: catchFoodWeb
@trigger    RequestPartnerHelp
@when 		JobTaskActive(foodWeb)
@boostScore -5
@cutscene
{@guide}    Create a Visual Model of the Warm Kelp Forest.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Talk to {nameof drKelp} at the research station.

// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(energyArgue)
@cutscene

$call ArgueLoad(energyArgue)
	$branch .argue.hello

	
:: argue.hello
{@drKelp}   I heard you made a model of the Warm Kelp food web. Fantastic!
			So what did it show as the source of the energy? To say it another way, what is the thing that is consumed but doesn't consume anything else?
$goto .argue.chooseEnergy


:: argue.chooseEnergy
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice .argue.giantKelp; Giant Kelp
	$choice .argue.urchins; Urchins
	$choice .argue.otters; Otters
    $choice .argue.giveUp; Let me get back to you
$endif

:: argue.giantKelp
$if ArgueIsFactSubmitted(WarmKelpForest.Model.Conceptual)
	$goto .argue.done
$else
	{@drKelp}    Can I see your Warm Kelp Forest model? It should be in the {h}Sites Tab{/h} of AQOS. 
	$goto .argue.chooseFacts
$endif

:: argue.chooseFacts
$if ArgueSetClaim(kelpEnergyArgueClaim, jobs.kelp-energy.argue.claimLabel)
			$call ArgueFactSlot(WarmKelpForest.Model.Conceptual)
$endif
$call ArgueDisplayClaim()
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice #argueFact; Present facts from AQOS
		$answer WarmKelpForest.Model.Conceptual, .argue.energyModel
        $answer *, .argue.unrelated
    $choice .argue.giveUp; Let me get back to you
$endif

:: argue.urchins
{@drKelp}	Not quite, you need to look at the way the eat rules move in the model.
			That organism needs to eat something else to get energy.

:: argue.otters
{@drKelp}   Not quite, you need to look at the way the eat rules move in the model.
			That organism needs to eat something else to get energy.

:: argue.energyModel
{@drKelp}	Awesome! Kelp is like a plant. It gets its energy from the sun.
{@drKelp}	The other organisms eat it and its energy fuels the whole ecosystem.
$goto .argue.done

:: argue.unrelated
{@drKelp}	That's not a model. If you made a model, it should be saved in AQOS for this ecosystem. Can I see your model?
$call ArgueRejectIncorrect()
$goto .argue.chooseFacts

:: argue.giveUp
{@drKelp}    OK get back to me when you're ready.

:: argue.done
$call ArgueComplete()
{@drKelp}	Thanks so much for your help!
$call CompleteJob()

#basePath   job.kelp-energy

// beginning

:: start
@trigger    JobStarted
@cutscene

{@drKelp}	Okay, Olivia, I've got something a little different for you this time.
            I need you to create a model of Site C's food web.
{@drKelp}	Use the {map-name}Modeling Lab{/map-name} on your ship to create a food web model for the Forested Lagoon. 
            I would do it myself, but our funders have been calling me all day.
            And I should probably check on Osa the Otter... he was looking a little ragged.
 {@player}  Oh no, not Osa! Poor thing. 
{@player}   Are you doing okay, Mom? You sound a little-- 
{@drKelp}   Me? Oh, I'm fine, Mija. 
{@drKelp}    You just focus on your work. Leave all the stressful stuff to me.    

:: helpGoModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", JobTaskTop(foodweb)
@cutscene
{@player}   Any idea where I should go next?
{@guide}	Let's head to the {nameof Modeling} to model the food web.

// IN MODELING

:: helpModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", JobTaskTop(foodweb)
@cutscene
{@player}   Okay, {nameof @guide}. Can you walk me through this? 
{@guide}	You need to make a Food Web.
{@guide}    The first step is to import your facts into the model.

:: ModelingSetup-Wrong
@trigger	VisualModelStarted
@when       modeling:ecosystemSelected != "WarmKelpForest", !HasFact(WarmKelpForest.Model.Conceptual)
@cutscene
{@guide}	Just a moment, O. This isn't the right ecosystem.
            Go back to the {h}Ecosystem{/h} tab and select the {nameof WarmKelpForest}.

:: generic.visual-model.opened
@trigger	VisualModelStarted
@when		scene:name == "Modeling"
@once
@cutscene
{@guide}	Click the {h}Import New Facts{/h} button to bring all of your facts about this ecosystem into the model.

:: generic.visual-model.imported
@trigger	VisualModelUpdated
@when		scene:name == "Modeling"
@once
@cutscene
{@guide}	This is a visual model of all the species at the {nameof WarmKelpForest}.
            The arrows show relationships that your experiments have uncovered.
            In a Food Web, arrows point toward the species doing the consuming.
			If your Visual Model meets all the requirements of your job, you will be able to save it to AQOS. 
	
:: modelingComplete
@trigger    JobTasksUpdated
@when       JobTaskTop(reportBack)
@once
@cutscene
{@guide}    You've created a Visual Model! Your work is acceptable!
{@player}   You know, {nameof @guide}... I mean this in the nicest possible way, but not all humans think of "acceptable" as a compliment.  
{@guide}    My apologies, O. 
{@guide}    I have an onboard Thesaurus, if you'd like me to improvise.
{@guide}    Processing... processing... 
{@guide}    Tolerable job, O!
{@player}   Oh. Um.... 
{@guide}    Your work is sufficient!
{@player}   Never mind, {nameof @guide}. You're perfect. You do you.
{@player}   Let's head to the station. I need to report back to Mom. 

// report back

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskCompleted(foodweb)
@boostScore 2
@cutscene
{@player} 	What should we do now?
{@guide}	You've modeled the relationships between {pluralnameof Urchin}, {pluralnameof GiantKelp}, and {pluralnameof SeaOtter}.
			Now you need to report back to {nameof @drKelp}.
$if !IsPlayerOnStation()
	{@guide}	We should first head back to the {map-name}research station{/map-name}.
$endif

// SUGGEST ARGUMENTATION

:: helpArgumentation
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportBack)
@cutscene
$if scene:name == "Argumentation"
    {@player}   Can you remind me what I need to do now, {nameof @guide}?
    {@guide}    Report your findings to {nameof @drKelp}.
$elseif !IsPlayerOnStation()
    {@player}   What should we do now?
    {@guide}    Let's report our findings to {nameof @drKelp}.
$else
    {@player} 	Okay, {nameof @guide}, what now?
	{@guide}	You need to head back to the {map-name}research station{/map-name}.
                There, you can report your findings to {nameof @drKelp}.
$endif

// CATCH-ALL GUIDE TEXT

:: catchFoodWeb
@trigger    RequestPartnerHelp
@when 		JobTaskTop(foodweb)
@cutscene
{@guide}    We need to create a {h}Visual Model{/h} of the {nameof RS-1C}.
$if !IsPlayerOnShip()
    {@guide}    We should head to the {m}Modeling Lab{/m} on the {h}AquaLab{/h}.
$elseif
    $if scene:name != "Modeling", scene:name != "ModelingFoyer"
        {@guide}    We should head to the {m}Modeling Lab{/m} to create a {h}Visual Model{/h}.
    $endif
$endif

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportBack)
@cutscene
{@guide}    Talk to {nameof drKelp} at the research station.

// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(energyArgue)
@boostScore 100
@cutscene
@once

$call ArgueLoad(energyArgue)
$branch .argue.hello

:: argue.intro2
@trigger    TryArgumentation
@when   !ArgueIsComplete(energyArgue)
@cutscene

$call ArgueLoad(energyArgue)
$branch .argue.chooseEnergy

:: argue.hello
{@player}  How's Osa doing, Mom?
{@drKelp}  Oh, don't worry, Sweetie. I'm sure she'll be okay.
{@player}  That didn't answer my question, Mom--
{@drKelp}  Let me worry about all that. I want to hear about your job! 
$goto .argue.chooseEnergy

:: argue.chooseEnergy
{@drKelp}   According to your Food Web, what is the source of energy in the Forested Lagoon?
{@drKelp}   What is the thing that is consumed, but doesn't consume anything else?
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice .argue.giantKelp; Giant Kelp
	$choice .argue.urchins; Urchins
	$choice .argue.otters; Otters
    $choice .argue.giveUp; Let me get back to you
$endif

:: argue.giantKelp
$if ArgueIsFactSubmitted(WarmKelpForest.Model.Conceptual)
	$goto .argue.done
$else
	{@drKelp}    Can I see your Forested Lagoon model? It should be in the {h}Sites Tab{/h} of AQOS. 
	$goto .argue.chooseFacts
$endif

:: argue.chooseFacts
$if ArgueSetClaim(kelpEnergyArgueClaim, jobs.kelp-energy.argue.claimLabel)
			$call ArgueFactSlot(WarmKelpForest.Model.Conceptual)
$endif
$call ArgueDisplayClaim()
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice #argueFact; Present facts from AQOS
		$answer WarmKelpForest.Model.Conceptual, .argue.energyModel
        $answer *, .argue.unrelated
    $choice .argue.giveUp; Let me get back to you
$endif

:: argue.urchins
{@drKelp}	Hmm. That doesn't sound right.
			That organism needs to eat something else to get energy.

:: argue.otters
{@drKelp}   Hmm. Not quite. 
			That organism needs to eat something else to get energy.

:: argue.energyModel
{@drKelp}	Perfect! Nice job, Olivia.
{@drKelp}    Kelp is like a plant. It gets its energy from the sun. 
{@drKelp}	The other organisms eat it, and its energy fuels the whole ecosystem.
$goto .argue.done

:: argue.unrelated
{@drKelp}	That's not a model. 
            If you made a model, it should be saved in AQOS for this ecosystem. Can I see your model?
$call ArgueRejectIncorrect()
$goto .argue.chooseFacts

:: argue.giveUp
{@drKelp}    Okay, get back to me when you're ready.

:: argue.done
$call ArgueComplete()
{@drKelp}	Excellent work, Olivia!
{@player}   Thanks, Mom. 
{@player}   Though you probably knew all this stuff already...     
{@drKelp}   Oh, Mija. I know these jobs seem simple.
{@drKelp}   But your work is so important.
            We've been considering creating a Kelp Refuge -- and to do it properly, it's not enough to make assumptions.
{@drKelp}   We need all the data you're collecting. We need to understand every part of this ecosystem.
{@player}   I get it, Mom. 
{@player}   We're a team. I'll do whatever you need. 
{@drKelp}   Thank you, Mija. I know I can count on you.   
$call CompleteJob()

#basePath   job.kelp-energy

// beginning

:: start
@trigger    JobStarted
@cutscene
$branch common.ringPhone
{@drKelp}	Good to see you again, {player-name}! 
            I need you to create a model of Site A's food web.
$if !HasUpgrade(VisualModel)
	{@drKelp}	I've unlocked a new room on your Ship, {map-name}the Modeling Lab{/map-name}.
	$call UnlockRoom("modelingRoom")
	$call UnlockRoom("Modeling")
	$call GiveUpgrade(VisualModel)
$endif
{@drKelp}	Use the {map-name}Modeling Lab{/map-name} to visualize Site A's food web.
            When you are done, check back with me at your {map-name}Office{/map-name}!
$set jobs:kelp-energy-visual-model.saved = false

:: helpGoModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Ship", JobTaskTop(foodweb)
@cutscene
{@player}   Any idea where I should go next?
{@kevin}	Let's head to the {nameof Modeling} to model the food web.

// IN MODELING

:: helpModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", JobTaskTop(foodweb)
@cutscene
{@player}   Any idea what to do here?
{@kevin}	When we make a food web, the first step is to import our facts into the model.

:: modelingStart
@trigger	VisualModelStarted
@when		!jobs:kelp-energy-visual-model.saved
@cutscene
{@kevin}	So this is the {nameof VisualModel}.
{@kevin}	From here you'll import any new facts you have about the ecosystem.
{@kevin}	If you have all the facts you need, you'll see a button to {h}Import Facts{/h}
{@kevin}	If you don't see the button, you may need to gather more data!

:: modelingComplete
@trigger    JobTasksUpdated
@when       JobTaskTop(reportBack)
@once
@cutscene
{@kevin}    Looks like you've successfully created a conceptual model of the warm kelp forest!
            Let's bring it back to the {map-name}Office{/map-name}, where we can discuss our model with {nameof drKelp}.
$set jobs:kelp-energy-visual-model.saved = true


// report back

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskCompleted(foodweb)
@boostScore 2
@cutscene
{@player} 	What should we do now?
{@kevin}	We've modeled the relationships between {pluralnameof Urchin}, {pluralnameof GiantKelp}, and {pluralnameof SeaOtter}.
			So let's report back to Kel.
$if global:nav.shipRoom != "office"
	{@kevin}	We should first head back to the {map-name}Office{/map-name}.
$else
	{@kevin}	Same as before, you can report your findings using the {h}Computer{/h}.
$endif

// SUGGEST ARGUMENTATION

:: helpArgumentation
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportBack)
@cutscene
$if scene:name == "Argumentation"
    {@player}   What should I be doing again?
    {@kevin}    Report your findings to {nameof @drKelp}.
$elseif global:nav.shipRoom == "office"
    {@player}   What should we do now?
    {@kevin}    Let's report our findings to {nameof @drKelp} using the {h}Computer{/h}.
$else
    {@player} 	What should we do now?
	{@kevin}	Well, we've completed the modeling, so let's report back to {nameof @drKelp}.
                We should first head back to the {map-name}Office{/map-name}.
$endif


// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(energyArgue)
@cutscene

$call ArgueLoad(energyArgue)
	$branch .argue.hello

	
:: argue.hello
{@drKelp}    Where does energy come from in the food web?
$goto .argue.chooseEnergy


:: argue.chooseEnergy
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice .argue.giantKelp; Giant Kelp
	$choice .argue.urchins; Urchins
	$choice .argue.otters; Otters
    $choice .argue.giveUp; Let me get back to you
$endif

:: argue.giantKelp
$if ArgueIsFactSubmitted(WarmKelpForest.Model.Conceptual)
	$goto .argue.done
$else
	{@drKelp}    Can I see your model?
	$goto .argue.chooseFacts
$endif

:: argue.chooseFacts
$if ArgueSetClaim(kelpEnergyArgueClaim, jobs.kelp-energy.argue.claimLabel)
			$call ArgueFactSlot(WarmKelpForest.Model.Conceptual)
$endif
$call ArgueDisplayClaim()
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice #argueFact; Present facts from AQOS
		$answer WarmKelpForest.Model.Conceptual, .argue.energyModel
        $answer *, .argue.unrelated
    $choice .argue.giveUp; Let me get back to you
$endif

:: argue.urchins
{@drKelp}	Not quite, you need to look at the way the eat rules move in the model.
			That organism needs to eat something else to get energy.

:: argue.otters
{@drKelp}   Not quite, you need to look at the way the eat rules move in the model.
			That organism needs to eat something else to get energy.

:: argue.energyModel
{@drKelp}	Awesome! Kelp is like a plant. It gets its energy from the sun.
{@drKelp}	The other organisms eat it and its energy fuels the whole ecosystem.
$goto .argue.done

:: argue.unrelated
{@drKelp}	That's not a model. If you made a model, it should be saved in AQOS for this ecosystem. Can I see your model?
$call ArgueRejectIncorrect()
$goto .argue.chooseFacts

:: argue.giveUp
{@drKelp}    OK get back to me when you're ready.

:: argue.done
$call ArgueComplete()
{@drKelp}	Thanks so much for your help!
$call CompleteJob()

// END

:: end
@trigger    JobCompleted

#basePath   job.kelp-urchin-farm

:: start
@trigger    JobStarted
@cutscene

{@kevin}	You'll need to use the {nameof MeasurementTank} to figure out how much Urchins eat.
			It's in the Experiment Room.

:: measurementTankSelect
@trigger	ExperimentTankViewed
@when		tankType == "Measurement"
@once 
@cutscene
{@kevin}	We know the Urchins behave normally in the Kelp Forest.
			
:: measurementChooseKelp
@trigger	ExperimentScreenViewed
@when		screenId == "measurement.organisms"
@once 
@cutscene
{@kevin}	Pick {nameof Urchin} and something we know the {nameof Urchin} eats.

// CATCH-ALL GUIDE TEXT

:: catchUrchinEatBull
@trigger    RequestPartnerHelp
@when 		JobTaskActive(urchinEatBull)
@boostScore -5
@cutscene
{@kevin}    Using the Measurement Tank, measure how quickly Urchins eat Bull Kelp.

:: catchUrchinEatKelp
@trigger    RequestPartnerHelp
@when 		JobTaskActive(urchinEatKelp)
@boostScore -5
@cutscene
{@kevin}    Using the Measurement Tank, measure how quickly Urchins eat Giant Kelp.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@kevin}    Talk to {nameof drKelp} in the Office.

// ARGUMENTATION
:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(urchinFarmArgue)
@cutscene
$call ArgueLoad(urchinFarmArgue)
{@drKelp}	I see you've gotten the hang of using the measurement tank to compare eating rates. How do these rates compare?
$goto .argue.presentFacts

: argue.giveUp
{@drKelp} OK. Get back to me when you're ready.

:: argue.presentFacts
$if ArgueSetClaim(urchinFarmClaim, jobs.kelp-urchin-farm.argue.claimEitherWorkLabel)
	$call ArgueFactSlot(Urchin.Eats.GiantKelp)
	$call ArgueFactSlot(Urchin.Eats.BullKelp)
$endif
$branch .argue.chooseFacts

::argue.chooseFacts
$call ArgueDisplayClaim()
$if ArgueAllFactsCorrect()
	$goto .argue.finalClaim
$else
	$choice #argueFact; Present facts from AQOS
		$answer Urchin.Eats.BullKelp, IsFactFullyUpgraded(Urchin.Eats.BullKelp), .argue.bullKelp
		$answer Urchin.Eats.GiantKelp, IsFactFullyUpgraded(Urchin.Eats.GiantKelp), .argue.giantKelp
		$answer *, .argue.unrelated
	$choice .argue.giveUp; Let me get back to you
$endif

:: argue.bullKelp
$if ArgueIsFactSubmitted(Urchin.Eats.GiantKelp)
	$goto .argue.finalClaim
$else
	{@drKelp}	Ah, so the {pluralnameof Urchin} consume 2g of {pluralnameof BullKelp}. How about the Giant Kelp? 
	$goto .argue.chooseFacts
$endif

:: argue.giantKelp
$if ArgueIsFactSubmitted(Urchin.Eats.BullKelp)
	$goto .argue.finalClaim
$else
	{@drKelp}	Ah, so the {pluralnameof Urchin} consume 2g of {pluralnameof GiantKelp}. How about the Bull Kelp? 
	$goto .argue.chooseFacts
$endif

:: argue.unrelated
{@drKelp}	Hmmm... I don't think this fact is relevant.
$call ArgueRejectIncorrect()
$goto .argue.chooseFacts

:: argue.giveUp
{@drKelp}	Ok, get back to me when you're ready.

:: argue.finalClaim
{@drKelp} Which type of kelp will the Urchins eat less of?
	$choice .argue.giantOrBull; Giant Kelp
	$choice .argue.giantOrBull; Bull Kelp
	$choice .argue.done; They are the same
    $choice .argue.giveUp; Let me get back to you
$choose branch

:: argue.giantOrBull
{@drKelp} Hmmm. Are you sure? I don't think your data supports that conculsion...
$goto .argue.finalClaim

//DONE
:: argue.done
$call ArgueComplete()
{@drKelp}	Huh, it actually looks like it doesn't matter. It seems like the rates are the same.
$call CompleteJob()

::end
@trigger	JobCompleted
@cutscene
{@drKelp}	Thanks for all your help! 
{@kevin}	$10. Excellent. One better than $9. Please choose another job for further remuneration.
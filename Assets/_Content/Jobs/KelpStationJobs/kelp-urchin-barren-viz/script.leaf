#basePath   job.kelp-urchin-barren

// Beginning
:: start
@trigger    JobStarted
@cutscene

{@drKelp}   Wonderful, Olivia! Now that you've got a {nameof ProbeHacker}, we can make some progress at Site B. 
{@player}   Site B? Isn't that where Sam and I--
{@drKelp}   Crashed that old sub? Don't worry, Sweetie. {nameof @guide} will be right there with you.
{@player}   I'm not worried. But... Mom, Site B looked pretty empty. 
{@drKelp}   That's why I need you there, Sweetie. 
            Something's wrong at Site B. The kelp has been disappearing. 
            If all of the kelp vanish, nothing will be able to survive there.  
{@player}   Oh no. That's awful!
{@player}   But we're scientists. We can fix it, right? 
{@drKelp}   I hope so, Mija. Start by counting the current populations. 
            {nameof @guide} will guide you from there. 

$call UnlockSite(RS-1B)

:: diveSite
@trigger    SceneStart
@when       scene:name == "RS-1B"
@triggerPriority   High
@once
@cutscene

{@player}It's so strange down here. 
{@guide} Yes. Something is clearly off balance in this ecosystem.
{@guide} My sensors indicate that you are experiencing stress, O.
{@player} It's just... Sam and I sneaked out here last year to explore. 
{@player} It didn't end super well.  
{@guide} Ah. Perhaps I can ease your mind. 
{@guide} The probability of crashing at the same dive site twice is only 8.2%! 
{@player} Thanks, {nameof @guide}. That's... sort of comforting, I guess. 

{wait 0.5}
{hide-dialog}

:: helpGoOutside
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", JobTaskTop(gotoSiteB)
@cutscene
{@player}   What now, {nameof @guide}?
{@guide}	You need to head to {h}Site B{/h}. 
            
:: helpGoToSiteB
@trigger    RequestPartnerHelp
@when 		scene:name != "RS-1B", JobTaskTop(gotoSiteB)
@cutscene
{@player} 	Okay, {nameof @guide}. What now? 
{@guide}	{h}Site B{/h} should be at the southwest buoy.
            Navigate to the site and dive down in your sub!
            

:: helpAtSiteB.A
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-1B", JobTaskTop(getTagged)
@cutscene
{@player} 	Ok, here we are. What now?
{@guide}    According to your task list in AQOS, you'll need to count all the organisms here. 
$if !TaggingHasStarted(Urchin)
    {@guide}    Can you find any {pluralnameof Urchin} here?
$elseif !TaggingHasFinished(Urchin)
    {@guide}    You haven't found all the {pluralnameof Urchin} yet.
$elseif !TaggingHasStarted(GiantKelp)
    {@guide}    Can you find any {pluralnameof GiantKelp} here?
$else
    {@guide}    You still need to count the rest of the {pluralnameof GiantKelp}.
$endif

:: countedCurrentPopulations
@trigger	JobTaskCompleted
@when		taskId == "getTagged"
@once
@cutscene
{@player}	Okay, we've got the current population count.
            That's a LOT of urchins. 
            What now, {nameof @guide}?
{@guide}    Now you must find the {h}Historic Population Probe{/h} and upload its data!

:: helpAtSiteB.B
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-1B", JobTaskTop(getProbeData)
@cutscene

{@player}   What should I do next?
{@guide}    Look for the {h}Historic Population Probe{/h}.

:: gotHistoricalPopulations
@trigger	JobTaskCompleted
@who		guide
@when		taskId == "getProbeData" 
@once
@cutscene
{@guide}	Ah, more data!! My favorite.
{@player}   Hmm. Looks like the urchins have been taking over for a while.
            But why?
{@guide}    I'm not sure, O. 
            You'll need to head back to your ship and interpret this data. 

// TO MODELING

:: helpBackToShip
@trigger    RequestPartnerHelp
@when 		scene:name == "KelpStation", JobTaskTop(visualSiteB)
@cutscene
{@player} 	What now, {nameof @guide}?
{@guide}	You need to return to your ship. 

:: helpToModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", JobTaskTop(visualSiteB)
@cutscene
{@player} 	What now, {nameof @guide}?
{@guide}	Head to your {map-name}Modeling Whiteboard{/map-name} in the {nameof Modeling}.

:: atShip
@trigger    SceneStart
@when       scene:name == "Helm", JobTaskTop(visualSiteB)
@once
@cutscene

{@player} Phew. We made it back! 
          Um... not that I was worried, or anything. 
          What now, {nameof @guide}?
{@guide}  You must create a food web model to help explain the vanishing kelp.
          Head to your Modeling Whiteboard in the {nameof Modeling}!

:: helpGoToModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", JobTaskTop(predictSiteB)
@cutscene
$if global:nav.shipRoom != "Modeling"
	{@player} 	Can you remind me where to go, {nameof @guide}?
	{@guide}	Certainly, O. Head to the {nameof Modeling}.
$else
	{@player} 	Okay, {nameof @guide}. What do we do from here? 
	{@guide}	You must use your {map-name}Modeling Whiteboard{/map-name} to create a Food Web Model!
$endif

// IN MODELING

:: ModelingSetup-Wrong
@trigger	VisualModelStarted
@when       JobTaskTop(predictSiteB), modeling:ecosystemSelected != "UrchinBarren", !jobs:kelp-urchin-barren.upgradedFacts
@cutscene

{@guide}    This isn't the right ecosystem, O.
            Head back to the {h}Ecosystem{/h} tab and select the {nameof UrchinBarren}.
            
:: ModelingSetup-WrongHelp
@trigger    RequestPartnerHelp
@when       JobTaskTop(predictSiteB), modeling:ecosystemSelected != "UrchinBarren", !jobs:kelp-urchin-barren.upgradedFacts
@cutscene
{@player}   What now, {nameof @guide}?
{@guide}    You need to open the {nameof UrchinBarren} {h}Ecosystem{/h}.
            
:: ModelingSetupPhase2
@trigger    VisualModelExported
@when       JobTaskTop(predictSiteB), modeling:ecosystemSelected == "UrchinBarren", !jobs:kelp-urchin-barren.upgradedFacts
@once
@cutscene

{@guide}  Adequate work, O!
          Time to report back to your mother and tell her what you found. 

// SUGGEST ARGUMENTATION

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportBack)
@cutscene
$if scene:name == "Argumentation"
    {@player}   What now, {nameof @guide}?
    {@guide}    Report your findings to {nameof @drKelp}.
$elseif !IsPlayerOnStation()
    {@player}   What should I do now?
    {@guide}    Report your findings to {nameof @drKelp} at the {m}research station{/m}.
$else
    {@player} 	What should I do now?
	{@guide}	You've completed the modeling, so it's time to report back to your mother.
                You'll need to report to the {map-name}research station{/map-name}.
$endif

// CATCH-ALL GUIDE TEXT

:: catchGoToSiteB
@trigger    RequestPartnerHelp
@when 		JobTaskActive(goToSiteB)
@boostScore -5
@cutscene
{@guide}    Head to Site B to discover any new species.

:: catchGetProbeData
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getProbeData)
@boostScore -5
@cutscene
{@guide}    Find the populations probe and scan it.

:: catchGetTagged
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getTagged)
@boostScore -5
@cutscene
{@guide}    Count all the populations at Site B.

:: catchVisualSiteB
@trigger    RequestPartnerHelp
@when 		JobTaskActive(visualSiteB)
@boostScore -5
@cutscene
{@guide}    Create a Visual Model of Site B.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Talk to {nameof drKelp} at the {m}research station{/m}.

// ARGUMENTATION
::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(urchinBarrenVizArgue)
@cutscene

$call ArgueLoad(urchinBarrenVizArgue)
	$if ArgueSetClaim(urchinBarrenVizClaim, jobs.kelp-urchin-barren-viz.argue.claimLabel)
		$call ArgueFactSlot(UrchinBarren.Model.Visual)
	$endif

	$branch .argue.hello
	
::argue.hello
{@drKelp}   Wonderful! So how did it go, Mija?
            Did you build a model of the food web at Site B? 
                $choice .argue.chooseFacts; Yep, got it right here!
                $choice .argue.giveUp; Let me get back to you

::argue.chooseFacts
$call ArgueDisplayClaim()
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice #argueFact; Present facts from AQOS
        $answer UrchinBarren.Model.Visual, .argue.barrenModel
        $answer *, .argue.unrelated
    $choice .argue.giveUp; Let me get back to you
$endif

::argue.barrenModel
// HasFact(KelpStation.SeaOtter.Eats.Urchin)
$if HasFact(Urchin.Eats.GiantKelp)
    $goto .argue.done
$else
{@drKelp}   Hmmm. This doesn't look complete. 
            I think some relationships might be missing. 
            What could be causing the kelp to disappear? 
            $goto .argue.giveUp
$endif

::argue.unrelated
{@drKelp}   Hmmm... this doesn't seem relevant, Mija.  
            Do you have anything else to show me?
$call ArgueRejectIncorrect()
$goto .argue.chooseFacts

::argue.giveUp
{@drKelp}    Okay, Sweetie. Let me know when you're ready.

::argue.done
$call ArgueComplete()
{@drKelp}   Hmmm. Que extra√±o. We have a complete picture of the ecosystem...
            But I still don't understand exactly what's happening here. 
{@player}   But... I did the science! We've got all the data! 
{@drKelp}   You did an amazing job, Mija. But it looks like there's still more work to do here.
            Let me know when you're ready to take on another job. 
            In the meantime, buen trabajo.
{@player}   Thanks, Mom. 
$call CompleteJob()

// END

:: end
@trigger    JobCompleted
@cutscene
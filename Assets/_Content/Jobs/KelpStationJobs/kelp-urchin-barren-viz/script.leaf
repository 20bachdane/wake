#basePath   job.kelp-urchin-barren

// Beginning

:: start
@trigger    JobStarted
@cutscene

$branch common.ringPhone

{@drKelp}  Now that you have a probe decoder, I have something new for you.
{@player}   How so?
{@drKelp}  First, you are going to get a current and historical count of the kelp and urchin populations at Site B. It's... not doing well.
            It's become what we refer to as an {h}Urchin Barren{/h}, where there are a whole lot of urchins and not so much kelp as a result.
            Second, you're going to build a model of the food web so we can better think about how the populations relate.
            Now head on over to Site B to get started.
{@player}   Sounds great. Let's go.            
{@player}   Wait, where is Site B exactly?
{@drKelp}  It should be southwest of your ship.

$call UnlockSite(RS-1B)

:: helpGoOutside
@trigger    RequestPartnerHelp
@when 		scene:name == "Ship", JobTaskTop(gotoSiteB)
@cutscene
{@player}   Any idea where I should go next?
{@kevin}	I think we need to head over to Site B.
            Let's exit the ship.
            
:: helpGoToSiteB
@trigger    RequestPartnerHelp
@when 		scene:name == "KelpStation", JobTaskTop(gotoSiteB)
@cutscene
{@player} 	Where should I be going again?
{@kevin}	Site B should be southwest of the ship.
            Let's head over there and dive down.

// In Site B

:: giveUpgrade1
@trigger	SceneStart
@when		scene:name == "RS-1B"
@once
@cutscene

$branch common.ringPhone

{@drKelp}  Let's start getting the current populations using the {nameof ROVTagger}.
{@drKelp}  Once you've {h}scanned{/h} a species, you can switch to the {nameof ROVTagger} and move close to one of them to {h}count{/h} it.
				Count enough of them and your {nameof ROVTagger} will do the rest and give you a population estimate.

:: helpAtSiteB.A
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-1B", JobTaskTop(getTagged)
@cutscene
{@player} 	I made it to Site B, what should I do now?
{@kevin}	Let's explore and count all these organisms.
$if !TaggingHasStarted(Urchin)
    {@kevin}    Are there any {pluralnameof Urchin} here?
$elseif !TaggingHasFinished(Urchin)
    {@kevin}    We haven't found all the {pluralnameof Urchin} yet.
$elseif !TaggingHasStarted(GiantKelp)
    {@kevin}    I can see a lot of {pluralnameof GiantKelp}...
$else
    {@kevin}    Let's try to find the rest of the {pluralnameof GiantKelp}.
$endif

:: countedCurrentPopulations
@trigger	JobTaskCompleted
@when		taskId == "getTagged"
@once
@cutscene
$branch common.ringPhone
{@kevin}	All right, that's the current population... thats a lot of urchins...

:: helpAtSiteB.B
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-1B", JobTaskTop(getProbeData)
@cutscene

{@player}   What should I do next?
{@kevin}    Maybe we should look for the {h}Historic Population Probe{/h}.

:: gotHistoricalPopulations
@trigger	JobTaskCompleted
@who		kevin
@when		taskId == "getProbeData" 
@once
{@kevin}	Great, we got the historical data. Looks like the urchins have been taking over for a while now.

// TO MODELING

:: helpBackToShip
@trigger    RequestPartnerHelp
@when 		scene:name == "KelpStation", JobTaskTop(visualSiteB)
@cutscene
{@player} 	Where should I be going again?
{@kevin}	We need to head back to the ship.

:: helpToModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Ship", JobTaskTop(visualSiteB)
@cutscene
{@player} 	Where should I be going again?
{@kevin}	We need to go to the {map-name}Modeling Whiteboard{/map-name} in the {nameof Modeling}.

:: atShip
@trigger    SceneStart
@when       scene:name == "Ship", JobTaskTop(visualSiteB)
@once
@cutscene
$branch common.ringPhone

{@drKelp}  Okay, lets put together a food web model.


:: helpGoToModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Ship", JobTaskTop(predictSiteB)
@cutscene
$if global:nav.shipRoom != "modeling"
	{@player} 	I'm back on the ship, what should I do next?
	{@kevin}	Let's first head to the {nameof Modeling}.
$else
	{@player} 	Made it to the {nameof Modeling}, what do we do from here?
	{@kevin}	I think {nameof @drKelp} is going to teach us how to make a model.
                Head over to the {map-name}Modeling Whiteboard{/map-name}.
$endif

// IN MODELING

:: ModelingIntro
@trigger    SceneStart
@when       scene:name == "Modeling"
@once
@cutscene

$branch common.ringPhone

{@drKelp}   Okay, this is the {h}Modeling Whiteboard{/h}.
            So you observed that {pluralnameof Urchin} eat {critter-name}Kelp{/critter-name}.
            And you also observed that {pluralnameof SeaOtter} eat {pluralnameof Urchin}.
            We can take those facts and add them to a {h}Visual Model{/h}. That can help us see how they fit together.
            Select the {nameof UrchinBarren} ecosystem and click on the {h}Visualize{/h} tab.

:: ModelingSetup-Wrong
@trigger	VisualModelStarted
@when       modeling:ecosystemSelected != "UrchinBarren", !jobs:kelp-urchin-barren.upgradedFacts
@cutscene

{@drKelp}   Ah, hang on, this isn't the right ecosystem.
            Head back to the {h}Ecosystem{/h} tab and select the {nameof UrchinBarren}.
            
:: ModelingSetup-WrongHelp
@trigger    RequestPartnerHelp
@when       modeling:ecosystemSelected != "UrchinBarren", !jobs:kelp-urchin-barren.upgradedFacts
{@player}   What am I doing here again?
{@kevin}    Remember, we need to open the {nameof UrchinBarren} {h}Ecosystem{/h}.

:: ModelingSetup
@trigger	VisualModelStarted
@when       modeling:ecosystemSelected == "UrchinBarren"
@once
@cutscene

{@drKelp}  Next, use the {h}Import New Facts{/h} button to add all the facts you have for this site in {item-name}AQOS{/item-name}.
            
:: ModelingSetupPhase2
@trigger    VisualModelUpdated
@when       modeling:ecosystemSelected == "UrchinBarren", !jobs:kelp-urchin-barren.upgradedFacts
@once
@cutscene

{@kevin}   That doesn't look right!
            It looks like the healthy kelp forests, but parts are missing. 
            Let's go talk to {nameof @drKelp}. 

// SUGGEST ARGUMENTATION

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportBack)
@cutscene
$if scene:name == "Argumentation"
    {@player}   What should I be doing again?
    {@kevin}    Report your findings to {nameof @drKelp}.
$elseif global:nav.shipRoom == "office"
    {@player}   What should we do now?
    {@kevin}    Let's report our findings to {nameof @drKelp} using the {h}Computer{/h}.
$else
    {@player} 	What should we do now?
	{@kevin}	Well, we've completed the modeling, so let's report back to {nameof @drKelp}.
                We should first head back to the {map-name}Office{/map-name}.
$endif

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(urchinBarrenVizArgue)
@cutscene

$call ArgueLoad(urchinBarrenVizArgue)
	$if ArgueSetClaim(urchinBarrenVizClaim, jobs.kelp-urchin-barren-viz.argue.claimLabel)
			$call ArgueFactSlot(UrchinBarren.Model.Visual)
	$endif

	$branch .argue.hello
	
::argue.hello
{@drKelp}   I see you explored Site B. 
            Did you build a model of the food web at Site B to explain the kelp's disappearance?
                $choice .argue.chooseFacts; Yes, here you go.
                $choice .argue.giveUp; Let me get back to you

::argue.chooseFacts
$call ArgueDisplayClaim()
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice #argueFact; Present facts from AQOS
        $answer UrchinBarren.Model.Visual, .argue.barrenModel
        $answer *, .argue.unrelated
    $choice .argue.giveUp; Let me get back to you
$endif

::argue.barrenModel
// HasFact(KelpStation.SeaOtter.Eats.Urchin)
$if HasFact(Urchin.Eats.GiantKelp)
    $goto .argue.done
$else
{@drKelp}   This doesn't look complete.
            I think some relationships might be missing. 
            Hmm... What could be causing that decrease in kelp population?
            $goto .argue.giveUp
$endif

::argue.unrelated
{@drKelp}   Hmmm... I'm not sure this is relevant. Do you have anything else to show me?
$goto .argue.chooseFacts

::argue.giveUp
{@drKelp}    Be sure to get back to me when you're ready.

::argue.done
$call ArgueComplete()
{@drKelp}   Hmm. Combined with the population data you gathered, we have a complete picture, 
            but I still don't understand it.  
            I'm going to need to give you another job so we can figure this out. 
            In the meantime, good work.
$call CompleteJob()

// END

:: end
@trigger    JobCompleted
@cutscene
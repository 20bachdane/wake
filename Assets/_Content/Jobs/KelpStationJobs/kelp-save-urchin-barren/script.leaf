#basePath   job.kelp-save-urchin-barren

:: start
@trigger    JobStarted
@cutscene

$branch common.ringPhone

{@drKelp}  Ok. So the {nameof UrchinBarren} isn't looking great.
            But I think we can fix it. 
            There's one more part of the {h}Simulator{/h} I haven't shown you yet.
            Meet me back at the {h}Modeling Whiteboard{/h}.

::helpGoToModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", JobTaskTop(makeAPlan)
@cutscene
{@player} 	How should we start making a plan to repair Site B?
{@guide}	Maybe we could make another model.
$if global:nav.shipRoom == "modeling"
    {@guide}    Let's head into the {h}Modeling Whiteboard{/h}.
$else
    {@guide}    Let's head over to the {nameof Modeling}.
$endif

// in modeling

:: InterventionModelingSetup
@trigger	VisualModelStarted
@once
@cutscene
$branch common.ringPhone

{@drKelp}   This time, we're going to use the modeling tool to predict what could happen if we {h}intervened{/h} with the ecosystem in some way.
            You should have all the rules from your {item-name}AQOS Tablet{/item-name} added already, so hit that {h}Intervene{/h} tab at the top.

::ModelHelp1
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual"
@cutscene
{@player} 	What should I do again?
{@guide}	Let's head to the {h}Intervene{/h} tab.

:: InterventionModelSynced
@trigger	SimulationModelStarted
@when       modeling:phase == "intervene"
@once
@cutscene

{@drKelp}   Okay, so this is the {h}Intervene{/h} screen. From here you can see what might happen if you intervene in an ecosystem.
            I need you to see if there's anything we can adjust to make the {critter-name}Kelp{/critter-name} population rise again.
            What would happen if we added more {critter-name}Kelp{/critter-name}, or removed {pluralnameof Urchin}, or even added another organism.
            You can use the plus and minus buttons next to the organisms to increase or decrease their populations.
            And use the {h}Add Organism{/h} button to select a new organism to add.
            We can only simulate one intervention at a time, though, so no adding multiple new organisms or adjusting multiple populations.
            ...Oh, sorry, I have to go for now. Good luck! Come talk to me in the {map-name}Office{/map-name} when you're done!
{hide-dialog}
{wait 1}
{@guide}    Looks like we're on our own. Let's see what we can do.

::ModelHelp3
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "intervene", JobTaskTop("makeAPlan")
@cutscene
{@player} 	I'm a bit stuck here - got any tips for me, V1ctor?
{@guide}	We want to change something so the {critter-name}Kelp{/critter-name} population increases to the target on the right.
            It seems like the main problem now is that it keeps getting eaten by {pluralnameof Urchin}.
            I wonder if there's something we could add that would keep the {nameof Urchin} population under control...

:: InterventionModelingGraphComplete
@trigger	SimulationInterveneSuccess
@once
@cutscene
{@guide}    Ok. It looks like we have a plan!
            I have no idea what adding {pluralnameof SeaOtter} practically means, but let's report back to {nameof @drKelp} at the {map-name}Office{/map-name}.

// to argumentation

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskCompleted(makeAPlan)
@cutscene
$if global:nav.shipRoom != "office"
	{@player} 	What should we do now?
	{@guide}	We've got a model now that shows us what might help Site B, so let's report back to {nameof @drKelp}.
	{@guide}	We should first head back to the {map-name}Office{/map-name}.
$else
	{@player} 	So... now what?
	{@guide}	We can report our findings to {nameof @drKelp} using the {h}Computer{/h}.
$endif

// CATCH-ALL GUIDE TEXT

:: catchMakeAPlan
@trigger    RequestPartnerHelp
@when 		JobTaskActive(makeAPlan)
@boostScore -5
@cutscene
{@guide}    Build an Intervention Model in the Modeling Lab.

:: catchReturn
@trigger    RequestPartnerHelp
@when 		JobTaskActive(return)
@boostScore -5
@cutscene
{@guide}    Talk to {nameof drKelp} in the Office.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(saveBarrenArgue)
@cutscene

$call ArgueLoad(saveBarrenArgue)
{@drKelp} I figured it was hopeless... There's no way we can fix Site B, right?
	$choice .argue.hopeless; You're right, Site B is hopeless.
	$choice .argue.otterSolution; Site B can be fixed by adding {pluralnameof SeaOtter}!
$choose branch

::argue.introRevisit
{@drKelp} What do you think?  Can we fix Site B?
	$choice .argue.hopeless; Site B is hopeless.
	$choice .argue.otterSolution; Site B can be fixed by adding {pluralnameof SeaOtter}!
$choose branch

//it's hopeless

:: argue.hopeless
$if ArgueSetClaim(saveBarrenClaim, jobs.kelp-save-urchin-barren.argue.claimHopeless)
		$call ArgueFactSlot(UrchinBarren.Model.Prediction)
$endif
$goto .argue.checkHopeless

::argue.checkHopeless
{@drKelp}    I thought so... Maybe I could take a look at your model to see for sure?
$goto .argue.chooseFactsHopeless

::argue.chooseFactsHopeless
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
		$answer UrchinBarren.Model.Prediction, .argue.currentModel
		$answer UrchinBarren.Model.IntroduceOtters, .argue.hopelessButOtters
		$answer *, .argue.unrelatedHopeless
$choice .argue.giveUpHopeless; Let me get back to you

::argue.currentModel
{@drKelp}    No, that's not relevant. Show me the model you made of changing the Urchin Barren.
$call ArgueClearFacts()
$goto .argue.chooseFactsHopeless

::argue.hopelessButOtters
{@drKelp}    Huh, I'm seeing something different in your model...
I think we should revisit your claim.
$call ArgueCancelClaim()
$goto .argue.introRevisit

::argue.incomplete
{@drKelp}    I don't think you've tried to model every type of intervention, here.  Come back when you're absolutely sure nothing can be done.
$call ArgueCancelClaim()
$goto .argue.introRevisit

::argue.giveUpHopeless
{@drKelp}    Maybe you should revisit your claim.
$call ArgueCancelClaim()

::argue.unrelatedHopeless
{@drKelp}    Hmm, no, that isn't relevant.
$call ArgueRejectIncorrect()
$goto .argue.chooseFactsHopeless


// just add otters

::argue.otterSolution	
$if ArgueSetClaim(saveBarrenClaim, jobs.kelp-save-urchin-barren.argue.claimOtters)
		$call ArgueFactSlot(UrchinBarren.Model.IntroduceOtters)
$endif
$goto .argue.checkOtters

::argue.checkOtters
{@drKelp}    Do you have a model that shows how otters would help?
$goto .argue.chooseFactsOtters

::argue.chooseFactsOtters
$call ArgueDisplayClaim()
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice #argueFact; Present facts from AQOS
        $answer UrchinBarren.Model.IntroduceOtters, .argue.otters
        $answer *, .argue.unrelated
    $choice .argue.giveUp; Let me get back to you
$endif

::argue.otters
$call ArgueComplete()
{@drKelp}    Aha! So according to your model, the increase in {critter-name}Kelp{/critter-name} is linked to adding {critter-name}Otters{/critter-name}!
$goto .argue.done

::argue.unrelated
{@drKelp}    Hmm, no, that isn't relevant.
$call ArgueRejectIncorrect()
$goto .argue.chooseFactsOtters

::argue.giveUp
{@drKelp}    OK. Get back to me when you're ready.

::argue.done
{@drKelp}    Okay, so because {pluralnameof Urchin} eat {pluralnameof GiantKelp}, and {pluralnameof SeaOtter} eat {pluralnameof Urchin}...
Adding some {pluralnameof SeaOtter} will ultimately let the {critter-name}Kelp{/critter-name} repopulate!
Now... where to find some otters..
You know what, I'll work on that. Absolutely fantastic work, you two.
{@player}   Thanks. It was nice being able to use some science to help.
$call CompleteJob()


// END

:: end
@trigger    JobCompleted
@cutscene

// $branch common.ringPhone

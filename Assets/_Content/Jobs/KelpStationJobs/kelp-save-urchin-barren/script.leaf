#basePath   job.kelp-save-urchin-barren

:: start
@trigger    JobStarted
@cutscene

{@drKelp}  Oh, Olivia. Thank goodness.
            Arch Oasis at Site B is looking quite... well, barren.
           Our funders are talking about pulling the funding for Mer's Refuge.
{@player}   What?? Why?
{@drKelp}   Think about how this looks, Olivia. If we can't keep Site B healthy, how can they trust us to create a whole new ecosystem?
{@drKelp}   Luckily, I think we can fix this.
            Head back to your {h}Modeling Whiteboard{/h}.
           There's one part of the Simulator that you haven't used yet. {nameof @guide} will talk you through it. 
           Good luck, Mija. 
::helpGoToModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", JobTaskTop(makeAPlan)
@cutscene
{@player} 	Where should we start, {nameof @guide}?
{@guide}	Head to the {nameof Modeling}!
$if global:nav.shipRoom == "modeling"
    {@guide}    Head to the {h}Modeling Whiteboard{/h}.
$else
    {@guide}    Head over to the {nameof Modeling}.
$endif

// in modeling

:: InterventionModelingSetup
@trigger	VisualModelStarted
@once
@cutscene

{@player}  Okay, {nameof @guide}. We need a plan to repair Arch Oasis.
           Mom said the {h}Modeling Whiteboard{/h} could help.
{@guide}   Ah, yes! One of my favorite predictive modeling functions!
{@player}  Ooookay... 
{@guide}   You need to use your modeling tool to simulate an {h}intervention{/h} and predict what would happen!
           You've already added the rules from your {item-name}AQOS Tablet{/item-name} added already.
           Now hit the {h}Intervene{/h} tab! 

::ModelHelp1
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual"
@cutscene
{@player} 	What should I do, {nameof @guide}?
{@guide}	Go to the {h}Intervene{/h} tab at the top!

:: InterventionModelSynced
@trigger	SimulationModelStarted
@when       modeling:phase == "intervene"
@once
@cutscene

{@guide} Use this tab to predict what might happen if you intervene at Site B!
         Use the plus and minus buttons to increase or decrease a certain population. 
         For example, you could add more {critter-name}Kelp{/critter-name}, or remove {pluralnameof Urchin}. 
         You can also use the {h}Add Organism{/h} button to select a new organism to add!
         The tool can only simulate one intervention at a time, so make sure to only change one variable. 
{@player} Okay. No problema. I've got this. 

::ModelHelp3
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "intervene", JobTaskTop("makeAPlan")
@cutscene
{@player} 	Ugh. I'm stuck.
            Any ideas, {nameof @guide}?
{@guide}	Processing...
            You want to make an intevention that helps the {critter-name}Kelp{/critter-name} population meet the target on the right.
            The {critter-name}Kelp{/critter-name} is being consumed by the {pluralnameof Urchin}.
            Can you add a new organism to get the {nameof Urchin} population under control? 

:: InterventionModelingGraphComplete
@trigger	SimulationInterveneSuccess
@once
@cutscene
{@guide}   Look at all this predictive data!! 
{@player}  And we have a plan! It looks like we can add {pluralnameof SeaOtter} to help increase the kelp population!
{@player}  I knew I loved those little otters for a reason. 

// to argumentation

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskCompleted(makeAPlan)
@cutscene
$if !IsPlayerOnStation()
	{@player} 	What should we do now, {nameof @guide}?
	{@guide}	You've created an Intervention Model to show what might help Site B!
                Now you need to report back to {nameof @drKelp} at the {map-name}research station{/map-name}.
$else
	{@player} 	What now, {nameof @guide}?
	{@guide}	Report your findings to {nameof @drKelp}!
$endif

// CATCH-ALL GUIDE TEXT

:: catchMakeAPlan
@trigger    RequestPartnerHelp
@when 		JobTaskActive(makeAPlan)
@boostScore -5
@cutscene
{@player}   Okay, {nameof @guide}. What should I do now? 
{@guide}    Build an Intervention Model in the Modeling Lab!

:: catchReturn
@trigger    RequestPartnerHelp
@when 		JobTaskActive(return)
@boostScore -5
@cutscene
{@guide}    Talk to {nameof drKelp} at the {m}research station{/m}!

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(saveBarrenArgue)
@cutscene

$call ArgueLoad(saveBarrenArgue)
{@drKelp} Okay, Mija. What do you think? Can we save {nameof RS-1B}? 
$if JobTaskTop(return)
	$choice .argue.hopeless; I'm sorry, Mom. Site B is hopeless.
	$choice .argue.otterSolution; We can save Site B by adding {pluralnameof SeaOtter}!
$choose branch
$else
	$choice .argue.hopeless; I'm sorry, Mom. Site B is hopeless.
$choose branch
$endif

::argue.introRevisit
{@drKelp} What do you think? Can we save {nameof RS-1B}? 
$if JobTaskTop(return)
	$choice .argue.hopeless; I'm sorry, Mom. Site B is hopeless.
	$choice .argue.otterSolution; We can save Site B by adding {pluralnameof SeaOtter}!
$choose branch
$else
	$choice .argue.hopeless; I'm sorry, Mom. Site B is hopeless.
$choose branch
$endif

//it's hopeless

:: argue.hopeless
$if ArgueSetClaim(saveBarrenClaim, jobs.kelp-save-urchin-barren.argue.claimHopeless)
    $call ArgueFactSlot(UrchinBarren.Model.Prediction)
$endif
$goto .argue.checkHopeless

::argue.checkHopeless
{@drKelp}   Hmmm. Hopeless? 
            Since when do you give up so easy, Mija?
{@player}   I'm not giving up, Mom. But there's no solution.
{@drKelp}   Well, maybe I can take a look at your model to see for sure.   
$goto .argue.chooseFactsHopeless

::argue.chooseFactsHopeless
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
		$answer UrchinBarren.Model.Prediction, .argue.currentModel
		$answer UrchinBarren.Model.IntroduceOtters, .argue.hopelessButOtters
		$answer *, .argue.unrelatedHopeless
$choice .argue.giveUpHopeless; Let me get back to you.

::argue.currentModel
{@drKelp}    That's not relevant, Olivia. 
            Show me your Intervention Model of Arch Oasis.
$call ArgueClearFacts()
$goto .argue.chooseFactsHopeless

::argue.hopelessButOtters
{@drKelp}    Hmmm. This model isn't as hopeless as you made it sound, Mija. 
             Can we talk this through again? 
$call ArgueCancelClaim()
$goto .argue.introRevisit

::argue.incomplete
{@drKelp}    I think there might be more you can do here, Mija.
{@player}    More?? What's the point, Mom? Nothing is working. 
{@drKelp}    Well, maybe that's because you didn't try every type of intervention.
             Keep trying. Come back when you're sure that nothing else can be done. 
$call ArgueCancelClaim()
$goto .argue.introRevisit

::argue.giveUpHopeless
{@drKelp}    Maybe you should revisit your claim, Mija.
$call ArgueCancelClaim()

::argue.unrelatedHopeless
{@drKelp}    That's not relevant, Olivia. Give it another try. 
$call ArgueRejectIncorrect()
$goto .argue.chooseFactsHopeless


// just add otters

::argue.otterSolution	
$if ArgueSetClaim(saveBarrenClaim, jobs.kelp-save-urchin-barren.argue.claimOtters)
		$call ArgueFactSlot(UrchinBarren.Model.IntroduceOtters)
$endif
$goto .argue.checkOtters

::argue.checkOtters
{@drKelp}   Ooh. Sounds promising!
            Do you have a model that shows how otters would help?
$goto .argue.chooseFactsOtters

::argue.chooseFactsOtters
$call ArgueDisplayClaim()
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice #argueFact; Present facts from AQOS
        $answer UrchinBarren.Model.IntroduceOtters, .argue.otters
        $answer *, .argue.unrelated
    $choice .argue.giveUp; Let me get back to you
$endif

::argue.otters
$call ArgueComplete()
{@drKelp}   Amazing work, Olivia! 
            According to your model, adding {critter-name}Otters{/critter-name} is linked to an increase in {critter-name}Kelp{/critter-name}.
$goto .argue.done

::argue.unrelated
{@drKelp}    Hmm... I don't think that's relevant, Mija. 
$call ArgueRejectIncorrect()
$goto .argue.chooseFactsOtters

::argue.giveUp
{@drKelp}    Okay. Get back to me when you're ready.

::argue.done
{@drKelp} Thank you, Mija. I'll bring this solution to our funders right away.
          {pluralnameof Urchin} eat {pluralnameof GiantKelp}, and {pluralnameof SeaOtter} eat {pluralnameof Urchin}...
          So adding some {pluralnameof SeaOtter} should control the {pluralnameof Urchin} population and give the {critter-name}Kelp{/critter-name} a chance to repopulate!
          Now we just need to decide which otters to add. Maybe Ofelia and Otis? And Orion could use a change of scenery...
{@player}  You'll figure it out, Mom. I'm just glad I could help. 
$call CompleteJob()


// END

:: end
@trigger    JobCompleted
@cutscene

// $branch common.ringPhone

#basePath   job.coral-stressed

:: start
@trigger    JobStarted
@cutscene

{@profCoral}  I've been keeping an eye on the coral at Site R for a while now. It just doesn't look right. 
			  Everything here is so connected. I'm concerned about how this will affect our turtle populations. 
{@player}	 Do you have an idea of what might be wrong? 
{@profCoral} Not yet. But then again, it has been hard to keep up with everything lately.
			 I'd like you to head to Site R and scan the coral for yourself. 
			Then use your Stress Tank to figure out if something about the environment is stressing the coral.
{@player} 	Okay. I'm on it!
$set	jobs:coral-stressed.struggling = false

:: helpLeaveShip
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-2V-StationInterior", !jobs:coral-stressed.seen.bottom
@cutscene
{@player}   Okay. Looks like I need to head out and look for Site R. 


:: navigation
@trigger    SceneStart
@when       scene:name == "CoralStation"
@once
@cutscene
{@player} Okay. Site R... where are you?
					
:: diveSite
@trigger    SceneStart
@when       scene:name == "RS-2R"
@once
@cutscene
$set    	jobs:coral-stressed.seen.bottom = true
{@player}  Wow. Look at all the green stuff on the water.
		   I know I'm new around here, but I feel like this can't be normal. 
{@guide}	Yes. It does seem highly unusual.
{@player}	Better dive down and check out how the coral's doing.

:: helpAtSiteR
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-2R"
@cutscene
{@player}   What should I be doing, {nameof @guide}?
$if HasEntity(StaghornCoral)
	$set    jobs:coral-stressed.got.scans = true
	{@guide}   You've obtained all the necessary data, O.
			   Time to return to the AquaLab!
$else
	{@guide}   You still need to scan the coral, O. 
$endif

:: navigation.goBackUp
@trigger    JobTasksUpdated
@when       HasEntity(StaghornCoral), HasEntity(SargassumCoveredReef)
@once
@cutscene
$set jobs:coral-stressed.gotScans = true
{@guide}   You've gathered all the data you need, O!
		   Time to return to the AquaLab and use your Stress Tank.


:: helpBackToShip
@trigger    RequestPartnerHelp
@when 		scene:name == "CoralStation", jobs:coral-stressed.got.scans
@cutscene
{@player} 	What now, {nameof @guide}?
{@guide}	You will need to return to your ship, O. 


:: atShip
@trigger    SceneStart
@when       scene:name == "Helm", JobTaskCompleted(siteR), JobTaskActive(stressCoral)
@once
@cutscene
{@player}   Guess I should head over to {nameof Experimentation}.
	
:: helpBackAtShip
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", JobTaskActive(stressCoral)
@cutscene
{@player} 	What should I do now, {nameof @guide}?
{@guide}	You need to head to the {nameof Experimentation} and try to learn more about the coral's condition. 

:: startExperiment
@trigger    SceneStart
@when       scene:name == "ExperimentV2", JobTaskActive(stressCoral)
@once
@cutscene
{@player}   Okay. Time to see what's stressing the coral. Right, {nameof @guide}?
{@guide}   Yes, O. Add Coral to the Stress Tank, and see if it can give you a clue about what's happening to it.  

:: openStressTank
@trigger	ExperimentTankViewed
@when		tankType == "Stress", jobs:coral-stressed.got.scans == true
@once
@cutscene
{@guide} You can move the dials on the bottom.
		 Remember, they will auto adjust to make sure no harm comes to the species inside!

:: helpAtExperiment
@trigger    RequestPartnerHelp
@when 		scene:name == "ExperimentV2", jobs:coral-stressed.got.scans == true
@cutscene
{@guide}	Select the Stress Tank. Then add the Coral and see if you can find what's causing its condition. 

:: experimentEnd
@trigger    JobTaskCompleted
@when 		taskId == "stressCoral"
@once
@cutscene
{@guide}	It appears that the Staghorn Coral is stressed if the temperature is too hot or cold...
			Or if the light levels are too low.
			Time to report this information to {nameof @profCoral}!

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportBack)
@boostScore 1
@cutscene
$if	jobs:coral-stressed.struggling
	{@player} 	Any tips about what to tell {nameof @profCoral}?
	{@guide}    I would recommend using your AQOS to compare the coral stress ranges with the conditions at Site R. 	
				Perhaps something will match up. 
$else
	{@player} 	What now, {nameof @guide}?
	{@guide}	You've gathered all the data you need. 
			    Time to report back to {nameof @profCoral}!
$endif

// CATCH-ALL GUIDE TEXT

:: catchSiteR
@trigger    RequestPartnerHelp
@when 		JobTaskActive(siteR)
@boostScore -5
@cutscene
{@player}   Where should we go next, {nameof @guide}?
{@guide}	You will need to explore until you find Site R. Then dive down and investigate the coral! 

:: catchStressCoral
@trigger    RequestPartnerHelp
@when 		JobTaskActive(stressCoral)
@boostScore -5
@cutscene
{@player} What should I do next, {nameof @guide}? 
{@guide}    Head to the Experimentation room and put the {nameof StaghornCoral} in the Stress Tank!

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@player} Okay, {nameof @guide}. What now? 
{@guide}  Return to the station and share your findings with {nameof @profCoral}.

// ARGUMENTATION

::argue.startArgue
@trigger    TryArgumentation
@when   !ArgueIsComplete(coralstressedArgue)
@cutscene
$call ArgueLoad(coralstressedArgue)
$goto .argue.chooseClaim

::argue.chooseClaim
{@profCoral} Ah. Excellent.
			 Did you discover what's going on with the coral?
	$choice .argue.coralNeedsLightIntro; The coral needs more light.
	$choice .argue.waterIsAcidicIntro; The water is too acidic.
	$choice .argue.waterIsHotIntro; The temperature of the water is too hot for the coral.
$call ArgueCancelClaim()
$choose branch

::argue.coralNeedsLightIntro
{@profCoral} Hmmmm.
			 Come to think of it, there was a lot of shade down there.
			Do you have evidence about why a lack of sunlight might have affected the coral?
$goto .argue.coralNeedsLight

::argue.coralNeedsLight
$if ArgueSetClaim(coralstressedClaim, jobs.coral-stressed.argue.coralNeedsLightClaim)
		$call ArgueFactSlot(SargassumCoveredReef.Light)
		$call ArgueFactSlot(StaghornCoral.Light.Stressed)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctLight
		$answer incorrect, .argue.incorrectLight
$choice .argue.giveUp; Let me get back to you

:: argue.correctLight
$call ArgueComplete()
{@profCoral} I see. It seems the Coral need much brighter conditions. 
		     Unfortunately, the Sargassum on the surface is making that difficult.
{@player}	 Yeah, that stuff was everywhere!
			 Poor coral...
{@profCoral} Hmm. I wonder if there's something we could do to shed a little more light on the situation...
{@player}	Ha. Good one.
{@profCoral} Pardon me, Ollie?
{@player} Oh.. uh, never mind, Professor. I'll check back soon and see if I can help! 
$call CompleteJob()

:: argue.incorrectLight
{@profCoral} Hmmm. This doesn't fully support your claim. 
			 What are the current light levels at Site R, and what is the light range for coral life?
$call ArgueRejectIncorrect()
$set	jobs:coral-stressed.struggling = true
$goto .argue.coralNeedsLight

:: argue.giveUp
{@profCoral} Take your time, Ollie. I'm sure we'll get to the bottom of this eventually. 

:: argue.waterIsAcidicIntro
{@profCoral} What evidence do you have about pH at Site R and how it might affect the coral?
$set	jobs:coral-stressed.struggling = true
$goto .argue.waterIsAcidic

::argue.waterIsAcidic
$if ArgueSetClaim(coralstressedClaim, jobs.coral-stressed.argue.waterIsAcidicClaim)
		$call ArgueFactSlot(SargassumCoveredReef.PH) // arbitrary slot, since there is no correct answer
		$call ArgueFactSlot(StaghornCoral.PH.Stressed) // arbitrary slot, since there is no correct answer
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctAcid
		$answer incorrect, .argue.incorrectAcid
$choice .argue.giveUp; Let me get back to you

::argue.correctAcid
{@profCoral} Hmmm. These facts are related to your claim.
			 But it appears the water pH is within the Coral's comfort level.
			 Is there another issue we're missing?
$goto .argue.chooseClaim

:: argue.incorrectAcid
{@profCoral} Hmmm. No, this doesn't seem helpful. 
$call ArgueRejectIncorrect()
$goto .argue.chooseClaim

::argue.waterIsHotIntro
{@profCoral} What evidence do you have about temperature at Site R and how it might affect the coral?
$set	jobs:coral-stressed.struggling = true
$goto .argue.waterIsHot

::argue.waterIsHot
$if ArgueSetClaim(coralstressedClaim, jobs.coral-stressed.argue.waterIsHotClaim)
		$call ArgueFactSlot(SargassumCoveredReef.Temperature) // arbitrary slot, since there is no correct answer
		$call ArgueFactSlot(StaghornCoral.Temperature.Stressed) // arbitrary slot, since there is no correct answer
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctHot
		$answer incorrect, .argue.incorrectHot
$choice .argue.giveUp; Let me get back to you.

::argue.correctHot
{@profCoral} Well... at least this evidence is related to your claim.
		     But it appears the water temperature is within the Coral's comfort levels.
			 Do you have another idea? 
$goto .argue.chooseClaim

:: argue.incorrectHot
{@profCoral} Hmmm. No, this isn't relevant. 
$call ArgueRejectIncorrect()
$goto .argue.chooseClaim

::end
#basePath   job.coral-check-up

:: start
@trigger    JobStarted
@cutscene

{@profCoral} I've been worrying about those {nameof BlueTang}.
			 They must be stressed. They're eating much less than your model would suggest.
			 I wondered if you could collect data to improve the model's accuracy.
{@player}	Sure, Professor. I'd love to help. 
$set jobs:coral-tang-checkup.grantedData = false
$set jobs:coral-tang-checkup.microHintGiven = false
$set jobs:coral-tang-checkup.sync-failed = false
$if JobTaskTop(findStress)
	{@profCoral} First, you'll need to obtain the stress ranges for the {nameof BlueTang}.
                 I'd suggest heading to your {h}Stress Tank{/h}.
$endif
$if JobTaskCompleted(findStress), !jobs:coral-tang-checkup.microHintGiven
	$branch .microHintContents
$endif
$if JobTaskCompleted(countIck), !jobs:coral-tang-checkup.grantedData
	{@profCoral} I noticed that you already measured the stress ranges of the Blue Tang.
				 I used your data to measure their eating and reproduction rates under stress. I'll send you the data. 
	$branch .grantStressedData
$endif
{@profCoral} Thank you, Ollie! Let me know what you find out. 

:: switchToJob
@trigger    JobSwitched
@cutscene
$if JobTaskCompleted(findStress), !jobs:coral-tang-checkup.microHintGiven
	$branch common.ringPhone
	{@profCoral}	Welcome back to the job! 
	$branch .microHintContents
$endif
$if JobTaskCompleted(countIck), !jobs:coral-tang-checkup.grantedData
	$branch common.ringPhone
	{@profCoral}	Welcome back to the job! 
	{@profCoral} I noticed that you already measured the stress ranges of the Blue Tang.
				 I used your data to measure their eating and reproduction rates under stress. I'll send you the data. 
	$branch .grantStressedData
$endif

:: grantStressedData
$call UpgradeFact(Ick.Stresses.BlueTang)
$call UpgradeFact(BlueTang.Eats.TurfAlgae.Stressed)
$call UpgradeFact(BlueTang.Reproduce.Stressed)
$call GiveFact(BlueTang.Eats.TurfAlgae.Stressed)
$call GiveFact(BlueTang.Reproduce.Stressed)
$call GiveFact(StaghornCoral.Reproduce)
$call GiveFact(Ick.Reproduce)
$set jobs:coral-tang-checkup.grantedData = true
{@player} Awesome! 

:: microHint
@trigger	JobTaskCompleted
@when		taskId == "findStress", !jobs:coral-tang-checkup.microHintGiven
@once
@cutscene
$branch common.ringPhone

{@profCoral}	Forgive the intrusion, Ollie.
$branch .microHintContents

:: microHintContents
{@profCoral}	I was looking through some of your data from {nameof @guide}'s previous upload.
				According to the {nameof BlueTang} stress ranges you've measured, the environmental conditions at {h}Site S{/h} are well within the {nameof BlueTang}'s comfortable range. 
{@player}       So... the tang aren’t being stressed by the water chemistry. It must be something else then?
$set jobs:coral-tang-checkup.microHintGiven = true
$if HasEntity(Ick)
	{@player}	I did notice some {nameof Ick} out there previously...
	$if !HasFact(Ick.Stresses.BlueTang)
		{@player}	Let’s see if the {nameof Ick} is effecting them, it sure looks like a parasite.
		$if !HasFact(LionfishInvasion.Population.Ick)
			{@player}	I'll go and get counts of them.
		$endif
	$else
		{@player}	That's what was stressing the {nameof BlueTang}!
	$endif
$else
	{@player}	I wonder if they are sick. Let’s go observe the {nameof BlueTang} with the microscope and see if we learn anything.
$endif

$if JobTaskCompleted(countIck), !jobs:coral-tang-checkup.grantedData
	{@profCoral}	Also, I used the stress data you gathered to measure {nameof BlueTang} eating and reproduction rates under stress. I'll send you the data. 
	$branch .grantStressedData
$endif

:: scanIck
@trigger	JobTasksUpdated
@when		JobTaskTop("countIck"), scene:name == "RS-2S"
@once
@cutscene
{@player}	This must be what's stressing the {nameof BlueTang}! 
			Hm... better get a population count.
			Since you will be counting a microscopic organism, you will need to use the {nameof Microscope} and the {nameof ROVTagger} {h}at the same time{/h}.

:: countIck
@trigger	JobTaskCompleted
@when		taskId == "countIck", scene:name == "RS-2S"
@once
@cutscene
{@player}	These fish are just crawling with {nameof Ick}. 
{@guide} 	Yes. I'd suggest using your {item}Observation tank{/item} to see how the {nameof Ick} is affecting the Tang.


:: measureIck
@trigger	JobTaskCompleted
@when		taskId == "observeIck", scene:name == "ExperimentV2"
@once
@cutscene
{@guide}	Adequate work, O!
		    Now you know that {nameof Ick} stresses {nameof BlueTang}.
			You can use the reproduction and eating rates of the stressed Tang to improve your model.
$if !jobs:coral-tang-checkup.grantedData
	{@guide}	{nameof @profCoral} has sent us the relevant data!
	$branch .grantStressedData
$endif

:: helpMeasure1
@trigger    RequestPartnerHelp
@when 		JobTaskActive(measureIck), !IsFactFullyUpgraded(BlueTang.Reproduce.Stressed), !IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
@cutscene
{@guide}     Use the measurement tank to get the reproduction rate of Blue Tang when stressed

:: describeComplete
@trigger	JobTasksUpdated
@when		JobTaskTop(report)
@once
@cutscene
{@guide}	This model seems much more aligned with what we observed at Site S!
			Time to report back to {nameof @profCoral}.


// MODELING SUGGESTIONS

:: triggerSyncFailure
@trigger    SimulationSyncError
@when       !jobs:coral-tang-checkup.sync-failed
@once
$set jobs:coral-tang-checkup.sync-failed = true

:: helpModelSync.Visual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reviseModels), scene:name == "Modeling", modeling:phase == "visual"
@cutscene
$branch .modelSuggestions

:: helpModelSync.Sync
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reviseModels), scene:name == "Modeling", modeling:phase == "sync"
@cutscene
$branch .modelSuggestions

:: modelSuggestions
$if HasFact(Fishers.Eats.Lionfish), IsFactFullyUpgraded(Fishers.Eats.Lionfish), HasFact(BlueTang.Reproduce.Stressed), HasFact(BlueTang.Eats.TurfAlgae), IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae), HasFact(BlueTang.Eats.TurfAlgae.Stressed), IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed), HasFact(Lionfish.Eats.BlueheadWrasse), HasFact(Lionfish.Eats.BlueTang), HasFact(Ick.Reproduce), HasFact(Ick.Stresses.BlueTang), IsFactFullyUpgraded(Ick.Stresses.BlueTang), HasFact(StaghornCoral.Reproduce), HasFact(RedGrouper.Reproduce)
    $if HasFact(LionfishInvasion.Model.IckStressVisual)
        {@guide}    You're done with this portion! Head to the {h}Describe{/h} tab next.
    $else
        {@guide}    Once you import your facts and save the Visual model, we should be good to make our Describe model!
    $endif
$else
    $if !jobs:coral-tang-checkup.sync-failed
        {@guide}    Time to try out your model in the {h}Describe{/h} tab.
    $else
        {@guide}    Seems like we don't have enough information to complete our model accurately.
                    Look for {h}question marks{/h} in the  Visual model interface, those point to where we may need more data.

		$if !HasFact(Fishers.Eats.Lionfish)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(Fishers.Eats.Lionfish)
			$branch .suggestMeasure
		$elseif !HasFact(BlueTang.Reproduce.Stressed)
			$branch .suggestReproduce
		$elseif !HasFact(BlueTang.Eats.TurfAlgae)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae)
			$branch .suggestMeasure
		$elseif !HasFact(BlueTang.Eats.TurfAlgae.Stressed)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
			$branch .suggestMeasure
		$elseif !HasFact(Lionfish.Eats.BlueheadWrasse)
			$branch .suggestObserve
		$elseif !HasFact(Lionfish.Eats.BlueTang)
			$branch .suggestObserve
		$elseif !HasFact(Ick.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(Ick.Stresses.BlueTang)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(Ick.Stresses.BlueTang)
			$branch .suggestMeasure
		$elseif !HasFact(StaghornCoral.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(RedGrouper.Reproduce)
			$branch .suggestReproduce
		$endif
    $endif
$endif

:: suggestReproduce
{@guide}    Did you get all the reproduction rates?

:: suggestObserve
{@guide}    Are you sure you have observed all the interactions here?

:: suggestMeasure
{@guide}    You may need to measure the rates of interactions.


// CATCH-ALL GUIDE TEXT

:: catchFindStress
@trigger    RequestPartnerHelp
@when 		JobTaskActive(findStress)
@boostScore -5
@cutscene
{@player} What now, {nameof @guide}?
{@guide}   You need to do some experiments on the {nameof BlueTang}.

:: catchFindMicro
@trigger    RequestPartnerHelp
@when 		JobTaskActive(findMicro)
@boostScore -5
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}    Go to {h}Site S{/h} and scan for microorganisms.

:: catchCountIck
@trigger    RequestPartnerHelp
@when 		JobTaskActive(countIck)
@boostScore -5
@cutscene
{@player}	What's our next move, {nameof @guide}?
{@guide}    Get a population count of the {nameof Ick} microorganism at {h}Site S{/h} that you saw on the {nameof BlueTang}.
			You will need to use both the {nameof Microscope} and the {nameof ROVTagger} for counting microscopic organisms. 

:: catchObserveIck
@trigger    RequestPartnerHelp
@when 		JobTaskActive(observeIck)
@boostScore -5
@cutscene
{@player} What now, {nameof @guide}?
{@guide}   You need to {map-name}Observe{/map-name} the interactions between {nameof BlueTang} and {nameof Ick}.

// :: catchMeasureIck
// @trigger    RequestPartnerHelp
// @when 		JobTaskActive(measureIck)
// @boostScore -5
// @cutscene
// {@guide}    You'll need to measure {nameof BlueTang} and {nameof TurfAlgae} in {h}water that stresses{/h} the {nameof BlueTang}.
// 			Place the {nameof BlueTang} in water that stresses it. We could try the {h}Forested Lagoon{/h}...

:: catchReviseVisual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reviseModels)
@boostScore -5
@cutscene
{@player} What should I do next, {nameof @guide}?
$if HasFact(LionfishInvasion.Model.IckStressVisual)
    {@guide}    Let's see if we can make a {item}more descriptive model{/item} based on our newly acquired data.
$else
    {@guide}    Remake your visual model based on your new {nameof Ick} data.
$endif

// :: catchImproveDescribe
// @trigger    RequestPartnerHelp
// @when 		JobTaskActive(improveDescribe)
// @boostScore -5
// @cutscene
// {@guide}    Remake your describe model based on your new {nameof Ick} data.

:: catchReport
@trigger    RequestPartnerHelp
@when 		JobTaskActive(report)
@boostScore -5
@cutscene
{@player} Okay, {nameof @guide}. What should I do next? 
{@guide}    Present your new model to {nameof @profCoral} back at the {nameof RS-Coral}!

// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when		!ArgueIsComplete(checkUpArgueFinal)
@cutscene
{@profCoral}  Let's work through this, step by step.
			  What's going on with the {nameof BlueTang}?
$if JobTaskTop(report)
	$choice .argue.ickStressing; The Ick are making them stressed!
$endif
$choice .argue.giveUp; I'm still not sure...

// Present Ick stresses Blue Tang

::argue.ickStressing
@cutscene
$if ArgueIsComplete(CheckUpArgueIckStressing)
	{@profCoral}	Oh, that's right. You already showed me that.
	$branch .argue.transition
$else
	$call ArgueLoad(CheckUpArgueIckStressing)
	{@profCoral}  How do you know?
	$if ArgueSetClaim(checkUpClaimIckStressing, jobs.coral-check-up.argue.claimLabelIckStressing)
			$call ArgueFactSlot(Ick.Stresses.BlueTang)
	$endif
	$call ArgueDisplayClaim()
	$branch .argue.presentFactsIckStressing
$endif

:: argue.presentFactsIckStressing
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.completeIckStressing
    $answer incorrect, .argue.incorrectIckStressing
$choice .argue.giveUp; Let me get back to you.

:: argue.incorrectIckStressing
{@profCoral}	I'm not seeing how that shows {nameof Ick} stresses {nameof BlueTang}.
				Do you want to try something else?
$call ArgueRejectIncorrect()
{@profCoral}	Why do you say the {nameof Ick} are stressing the {nameof BlueTang}?
$branch .argue.presentFactsIckStressing

:: argue.completeIckStressing
$call ArgueComplete()
$call ArgueHideClaim()
$branch .argue.transition

// Present model

:: argue.transition
$call ArgueLoad(checkUpArgueFinal)
{@profCoral}	I was afraid that might be the case.
				Did adding {nameof Ick} fix your model?
$if ArgueSetClaim(checkUpClaim, jobs.coral-check-up.argue.claimLabel)
		$call ArgueFactSlot(LionfishInvasion.Model.IckStressDescribe)
$endif
$call ArgueDisplayClaim()
$branch .argue.presentFacts

:: argue.presentFacts
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.correctModel
    $answer incorrect, .argue.incorrectModel
$choice .argue.giveUp; Let me get back to you.

:: argue.correctModel
{@profCoral} Well done, Ollie.
			 Now we understand more about the effects of Ick on Blue Tang.
{@player}	 So... what's the solution?
{@player}	How are we going to get rid of the Ick and save the Tang?
{@profCoral} It's not that simple, Ollie. The problems at Site S are... to put it mildly... complex.
		     But don't worry. I have a feeling the data you gathered will come in handy sooner than you think. 
$branch .end

:: argue.incorrectModel
$if ArgueIsFactSubmitted(LionfishInvasion.Model.IckStressVisual)
{@profCoral}	Ah, I see you revised your {item}Visual{/item} model!
                Where you able to build a more {h}Descriptive model{/h}?
$elseif ArgueIsFactSubmitted(LionfishInvasion.Model.MuchAlgaeDescriptive)
    Oh wait, isn't this your old model?
	Did adding {nameof Ick} allow you to make a new model?   
$elseif ArgueIsFactSubmitted(LionfishInvasion.Model.MuchAlgaeVisual)
    Oh wait, isn't this your old model?
	Did adding {nameof Ick} allow you to make a new model?   
$else
    Hmmmm | I'm not sure I see the connection to your model of the Ick and Algae...
    Do you want to try something else?
	Did your data on the {nameof Ick} allow you to make a new model?   
$endif
$call ArgueRejectIncorrect()
{@profCoral}	Why do you say the Ick are stressing the Tang?
$branch .argue.presentFacts

:: argue.giveUp
{@profCoral}	Okay, Ollie. Get back to me when you're ready.

// END

:: end
$call ArgueComplete()
$call CompleteJob()
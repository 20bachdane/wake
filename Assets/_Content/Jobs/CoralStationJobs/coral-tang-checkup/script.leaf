#basePath   job.coral-check-up

:: start
@trigger    JobStarted
@cutscene

{@profCoral} I've been worrying about those {nameof BlueTang}.
			 They must be stressed. They're eating much less than your model would suggest.
			 I wondered if you could collect data to improve the model's accuracy.
{@player}	Sure, Professor. I'd love to help. 
$set jobs:coral-tang-checkup.grantedData = false
$if JobTaskCompleted(observeIck)
	{@profCoral} I noticed that you already measured the stress ranges of the Blue Tang.
				 I used your data to measure their eating and reproduction rates under stress. I'll send you the data. 
	$branch .grantStressedData
$elseif JobTaskTop(findStress)
	{@profCoral} First, you'll need to obtain the stress ranges for the {nameof BlueTang}.
                 I'd suggest heading to your {h}Stress Tank{/h}.
$endif
{@profCoral} Thank you, Ollie! Let me know what you find out. 

:: switchToJob
@trigger    JobSwitched
@when		JobTaskCompleted(countIck), !jobs:coral-tang-checkup.grantedData
@cutscene
$branch common.ringPhone
{@profCoral}	Welcome back to the job! 
			    I noticed that you submitted the stress ranges of the Blue Tang...
				So I went ahead and measured their eating and reproduction rates when stressed. 
				I'll send you the data now.
$branch .grantStressedData

:: grantStressedData
$call UpgradeFact(Ick.Stresses.BlueTang)
$call UpgradeFact(BlueTang.Eats.TurfAlgae.Stressed)
$call UpgradeFact(BlueTang.Reproduce.Stressed)
$call GiveFact(BlueTang.Eats.TurfAlgae.Stressed)
$call GiveFact(BlueTang.Reproduce.Stressed)
$call GiveFact(StaghornCoral.Reproduce)
$call GiveFact(Ick.Reproduce)
$set jobs:coral-tang-checkup.grantedData = true
{@player} Awesome! 

:: microHint
@trigger	JobTasksUpdated
@when		JobTaskTop(findMicro)
@once
@cutscene
$branch common.ringPhone

{@profCoral}	Forgive the intrusion, Ollie.
			    I received some of your data from {nameof @guide}'s latest upload. 
				According to the stress ranges you've measured, the environmental conditions at {h}Site S{/h} are well within the Blue Tang's comfortable range. 
{@player}       So... something else is stressing the tang?
				I wonder what it could be...
{@profCoral}	I have an idea: {h}Microorganisms{/h}. 
				I'd suggest returning to Site S and scanning for any microorganisms you might have missed. 

:: scanIck
@trigger	JobTaskCompleted
@when		HasEntity(Ick)
@once
@cutscene
{@player}	This must be what's stressing the Tang!  
			Hm... better get a population count. 

:: countIck
@trigger	JobTaskCompleted
@when		JobTaskTop(observeIck)
@once
@cutscene
{@player}	Ugh. This place is just crawling with {nameof Ick}. 
{@guide} 	Yes. I'd suggest using your {item}Observation tank{/item} to see how the {nameof Ick} is affecting the Tang.

:: measureIck
@trigger	JobTaskCompleted
@when		JobTaskTop(reviseModels)
@once
@cutscene
{@guide}	Adequate work, O!
		    Now you know that {nameof Ick} stresses {nameof BlueTang}.
			You can use the reproduction and eating rates of the stressed Tang to improve your model.
			{nameof @profCoral} has sent us the relevant data!
$branch .grantStressedData

:: helpMeasure1
@trigger    RequestPartnerHelp
@when 		JobTaskActive(measureIck), !IsFactFullyUpgraded(BlueTang.Reproduce.Stressed), !IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
@cutscene
{@guide}     Use the measurement tank to get the reproduction rate of Blue Tang when stressed

// :: measureHint2
// @trigger	ExperimentFinished
// @when		IsFactFullyUpgraded(BlueTang.Reproduce.Stressed), !IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
// @once
// @cutscene
// {@guide}	The presence of {nameof Ick} really slows down {nameof BlueTang} reproduction. What about consumption?
//             Do Tang eat slower when stressed? You'll need to measure {nameof BlueTang} and {nameof TurfAlgae} in {h}water that stresses{/h} the {nameof BlueTang}.

// :: helpMeasure2
// @trigger    RequestPartnerHelp
// @when 		JobTaskActive(measureIck), IsFactFullyUpgraded(BlueTang.Reproduce.Stressed), !IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
// @cutscene
// {@guide}     Use the {map-name}Measurement Tank{/map-name} to get the rate at which {nameof BlueTang} eats {nameof TurfAlgae} when stressed.

// :: measureHint3
// @trigger	ExperimentFinished
// @when		IsFactFullyUpgraded(BlueTang.Reproduce.Stressed), IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
// @once
// @cutscene
// {@guide}	I calculate that this may be the missing element from our previous model.
// 			Let's try to revise your {map-name}descriptive model{/map-name} in light of the new information just acquired.

// :: helpMeasure3
// @trigger    RequestPartnerHelp
// @when 		JobTaskActive(improveDescribe), IsFactFullyUpgraded(BlueTang.Reproduce.Stressed), IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
// @cutscene
// {@guide}	Go to the {map-name}modeling tool{/map-name} and redo your {h}descriptive model{/h} with the new information you have.	 

:: describeComplete
@trigger	JobTasksUpdated
@when		JobTaskTop(report)
@once
@cutscene
{@guide}	This model seems much more aligned with what we observed at Site S! 
			Time to report back to {nameof @profCoral}.


// CATCH-ALL GUIDE TEXT

:: catchFindStress
@trigger    RequestPartnerHelp
@when 		JobTaskActive(findStress)
@boostScore -5
@cutscene
{@player} What now, {nameof @guide}?
{@guide}   You need to do some experiments on the {nameof BlueTang}.

:: catchFindMicro
@trigger    RequestPartnerHelp
@when 		JobTaskActive(findMicro)
@boostScore -5
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}    Go to {h}Site S{/h} and scan for microorganisms.

:: catchCountIck
@trigger    RequestPartnerHelp
@when 		JobTaskActive(countIck)
@boostScore -5
@cutscene
{@player} What's our next move, {nameof @guide}?
{@guide}    Get a population count of the {nameof Ick} microorganism you just found.

:: catchObserveIck
@trigger    RequestPartnerHelp
@when 		JobTaskActive(observeIck)
@boostScore -5
@cutscene
{@player} What now, {nameof @guide}?
{@guide}   You need to {map-name}Observe{/map-name} the interactions between {nameof BlueTang} and {nameof Ick}.

// :: catchMeasureIck
// @trigger    RequestPartnerHelp
// @when 		JobTaskActive(measureIck)
// @boostScore -5
// @cutscene
// {@guide}    You'll need to measure {nameof BlueTang} and {nameof TurfAlgae} in {h}water that stresses{/h} the {nameof BlueTang}.
// 			Place the {nameof BlueTang} in water that stresses it. We could try the {h}Forested Lagoon{/h}...

:: catchReviseVisual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reviseModels)
@boostScore -5
@cutscene
{@player} What should I do next, {nameof @guide}?
$if HasFact(LionfishInvasion.Model.IckStressVisual)
    {@guide}    Let's see if we can make a {item}more descriptive model{/item} based on our newly acquired data.
$else
    {@guide}    Remake your visual model based on your new {nameof Ick} data.
$endif

// :: catchImproveDescribe
// @trigger    RequestPartnerHelp
// @when 		JobTaskActive(improveDescribe)
// @boostScore -5
// @cutscene
// {@guide}    Remake your describe model based on your new {nameof Ick} data.

:: catchReport
@trigger    RequestPartnerHelp
@when 		JobTaskActive(report)
@boostScore -5
@cutscene
{@player} Okay, {nameof @guide}. What should I do next? 
{@guide}    Present your new model to {nameof @profCoral} back at the {nameof RS-Coral}!

// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when		!ArgueIsComplete(checkUpArgue)
@cutscene
$call ArgueLoad(checkUpArgue)
{@profCoral}  Let's work through this, step by step.
			  What's going on with the {nameof BlueTang}?
$if JobTaskTop(report)
	$choice .argue.transition; The Ick are making them stressed!
$endif
$choice .argue.giveUp; I'm still not sure...

:: argue.transition
{@profCoral}	I was afraid that might be the case.
				Did adding {nameof Ick} fix your model?
$if ArgueSetClaim(checkUpClaim, jobs.coral-check-up.argue.claimLabel)
		$call ArgueFactSlot(LionfishInvasion.Model.IckStressDescribe)
$endif
$call ArgueDisplayClaim()
$branch .argue.presentFacts

:: argue.presentFacts
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.correctModel
    $answer incorrect, .argue.incorrectModel
$choice .argue.giveUp; Let me get back to you.

:: argue.correctModel
{@profCoral} Well done, Ollie.
			 Now we understand more about the effects of Ick on Blue Tang.
{@player}	 So... what's the solution?
{@player}	How are we going to get rid of the Ick and save the Tang?
{@profCoral} It's not that simple, Ollie. The problems at Site S are... to put it mildly... complex.
		     But don't worry. I have a feeling the data you gathered will come in handy sooner than you think. 
$branch .end

:: argue.incorrectModel
$if ArgueIsFactSubmitted(LionfishInvasion.Model.IckStressVisual)
{@profCoral}	Ah, I see you revised your {item}Visual{/item} model!
                Where you able to build a more {h}Descriptive model{/h}?
$elseif ArgueIsFactSubmitted(LionfishInvasion.Model.MuchAlgaeDescriptive)
    Oh wait, isn't this your old model?
	Did adding {nameof Ick} allow you to make a new model?   
$elseif ArgueIsFactSubmitted(LionfishInvasion.Model.MuchAlgaeVisual)
    Oh wait, isn't this your old model?
	Did adding {nameof Ick} allow you to make a new model?   
$else
    Hmmmm | I'm not sure I see the connection to your model of the Ick and Algae...
    Do you want to try something else?
	Did your data on the {nameof Ick} allow you to make a new model?   
$endif
$call ArgueRejectIncorrect()
{@profCoral}	Why do you say the Ick are stressing the Tang?
$branch .argue.presentFacts

:: argue.giveUp
{@profCoral}	Okay, Ollie. Get back to me when you're ready.

// END

:: end
$call ArgueComplete()
$call CompleteJob()
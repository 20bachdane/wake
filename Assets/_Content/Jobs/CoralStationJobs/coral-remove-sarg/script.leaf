#basePath   job.coral-remove-sarg

:: start
@trigger    JobStarted
@cutscene

$branch common.ringPhone

{@profCempaka}	Welcome back {player-name}! It's time for us to figure out if we should remove that pesky Sargassum.
{@player} 		Alright, so what do you want me to do?
{@profCempaka}	I need you find out if sargassum is really what's causing the coral to be stressed. Can it block light?
{@player} 		Got it, I'll get started on it now.
{@kevin}		{player-name}, let's start by heading to the experiment lab!
{@player} 		Good thinking, Kevin!

:: helpGoToExperiment
@trigger    RequestPartnerHelp
@when 		scene:name != "ExperimentPrototype", !HasFact(Sargassum.Consume.Light)
@cutscene
{@player} 	What should we be doing now?
{@kevin}	Let's head over to the experiment room and try to learn more about Sargassum.

:: helpAtExperiment
@trigger    RequestPartnerHelp
@when 		scene:name == "ExperimentPrototype", !HasFact(Sargassum.Consume.Light)
@cutscene
{@player} 	How should this go again?
{@kevin}	We want to determine if Sargassum is really to blame for the low light at Site R.
{@kevin}	Try putting some Sargassum in a measurement tank and see if the light levels change.

:: startExperiment
@trigger    SceneStart
@when       scene:name == "ExperimentPrototype", !HasFact(Sargassum.Consume.Light)
@once
@cutscene
{@player}   Any tips of what we should to this time?
{@kevin}  	We want to know if Sargassum really does lower light, so I think a measurement tank is our best bet!

:: experimentEnd
@trigger    JobTaskUpdated
@when 		HasFact(Sargassum.Consume.Light)
@once
@cutscene
{@player}	Seems like we were right, Kevin!
{@kevin}	Great! Now let's see how this affects the coral by making a model.

:: helpAfterExperiment
@trigger    RequestPartnerHelp
@when 		HasFact(Sargassum.Consume.Light), scene:name != "ModelingPrototype", !HasFact(Model.SargLightPrediction)
@cutscene
{@player} 	What should we be doing next?
{@kevin}	We should take this new knowledge about Sargassum and make a model to know for sure what's causing the low light. 


:: InterventionModelingSetup
@trigger	UniversalModelStarted
@once
@cutscene
{@kevin} 	Make sure you add the rule we just learned, and let's get started!

::ModelHelp1
@trigger    RequestPartnerHelp
@when 		scene:name == "ModelingPrototype", modeling:phase == "universal", !HasFact(Model.SargLightPrediction)
@cutscene
{@player} 	What should I do next?
{@kevin}	Make sure to import the new rule we just learned, and then press "Simulate"


:: InterventionGetSync
@trigger	ModelGraphStarted
@once
@cutscene
{@kevin} 	Now, let's match up the historical data again.

::ModelHelp2
@trigger    RequestPartnerHelp
@when 		scene:name == "ModelingPrototype", modeling:phase == "model", !HasFact(Model.SargLightPrediction)
@cutscene
{@player} 	What should I do next?
{@kevin}	Drag the sliders on the left to match the historical data, and then press "Sync" to continue.


:: InterventionModelSyncedImmediate
@trigger	ModelSyncedImmediate
@who        kevin
@once
@chatter
{@kevin} 	Looks good!!

::ModelHelp3
@trigger    RequestPartnerHelp
@when 		scene:name == "ModelingPrototype", modeling:phase == "predict", !HasFact(Model.SargLightPrediction)
@cutscene
{@player} 	What should I do next?
{@kevin}	The graph now shows a prediction of how the light levels change over time. 
{@kevin}	Hit the "Save Prediction" button to move on.


:: InterventionModelingGraphComplete
@trigger	ModelCompleted
@once
@cutscene
{@kevin} 	Nicely done! Looks like Sargassum is to blame for the low light at Site R. Let's report this back to Professor Cempaka.

:: helpAfterModel
@trigger    RequestPartnerHelp
@when 		HasFact(Model.SargLightPrediction)
@cutscene
{@player} 	What should we be doing next?
{@kevin}	Let's report back to the office with our findings!
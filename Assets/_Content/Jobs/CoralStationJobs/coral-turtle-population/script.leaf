#basePath   job.coral-turtle-population

:: start
@trigger    JobStarted
@cutscene

{@profCoral}	We need to get an accurate count of the Loggerhead Turtle population here at {h}site V{/h}.
{@profCoral}  Drop outside and use your Scanner to locate a Turtle.
{@profCoral}  Then switch to Counting mode and navigate the site to get a representative sample.
{@player} 	We're on our way!

:: helpLeaveShip
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", !JobTaskCompleted(countTurtle)
@cutscene
{@player}   Where should I go from here?
{@guide}	Let's exit the ship and head to the sub.
					
:: helpGoToSiteV
@trigger    RequestPartnerHelp
@when 		scene:name == "CoralStation", !JobTaskCompleted(countTurtle)
@cutscene
{@player}   I think I'm lost?
{@guide}	{h}Site V{/h} should be just East of the ship.

:: diveSite
@trigger    SceneStart
@when       scene:name == "RS-2V"
@once
@cutscene
{@guide}   Let's look around for that Loggerhead Turtle.

:: helpAtSiteR
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-2V"
@cutscene
{@player}   What should I be doing here?
$if !HasEntity(LoggerheadTurtle)
	{@guide}   Have you Scanned a Turtle, yet? There should be some around here somewhere...
$else
	$if HasFact(ReefEdge.Population.LoggerheadTurtle)
		{@guide}   We've gotten everything we need from here, head back up to the surface when you're ready to leave.
	$else
	{@guide}   Switch to Count mode and try to get near all the Turtles you can!
	$endif
$endif

:: navigation.goBackUp
@trigger    JobTasksUpdated
@when       HasFact(ReefEdge.Population.LoggerheadTurtle)
@once
@cutscene
{@guide}    Nice.  We got the estimated population of Turtles at {h}Site V{/h}.  Let's head back.

:: navigation.return
@trigger    SceneStart
@when       scene:name == "CoralStation", JobTaskTop(countTurtle)
@once
@cutscene
{@guide}   Looks like you didn't get a representative count of the Turtles.
{@guide}   We should head back to {h}Site V{/h} when we can.

:: navigation.return.again
@trigger    SceneStart
@when       scene:name == "CoralStation", JobTaskTop(countTurtle), Seen(job.coral-stressed.navigation.return)
@cutscene
{@guide}   	We still don't have a representative Count of Loggerhead Turtles at {h}Site V{/h}...

:: helpBackToShip
@trigger    RequestPartnerHelp
@when 		scene:name == "CoralStation", JobTaskCompleted(countTurtle)
@cutscene
{@player} 	Where should we go from here?
{@guide}	Let's return to the ship.


:: atShip
@trigger    SceneStart
@when       scene:name == "Helm", JobTaskCompleted(countTurtle)
@once
@cutscene
{@player}   We're back. Now what?
{@guide}   	Let's report back with our findings.
{@player}   OK!

:: helpBackAtShip
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", JobTaskCompleted(countTurtle)
@cutscene
{@player} 	We're back at the ship, but what should we be doing now?
{@guide}	Let's get back to the {nameof RS-Coral} and report our findings to {nameof @profCoral}.

// CATCH-ALL GUIDE TEXT

:: catchScanTurtle
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanTurtle)
@boostScore -5
@cutscene
{@guide}    Look for a turtle and scan it.

:: catchCountTurtle
@trigger    RequestPartnerHelp
@when 		JobTaskActive(countTurtle)
@boostScore -5
@cutscene
{@guide}    Count the turtle population at Serenity Meadow.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Talk to {nameof profCoral} in the research station.

// ARGUMENTATION
// 
::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(turtlePopulationArgue)
@cutscene
$call ArgueLoad(turtlePopulationArgue)
$if ArgueSetClaim(Claim, jobs.coral-turtle-population.argue.turtlePopulationClaim)
		$call ArgueFactSlot(ReefEdge.Population.LoggerheadTurtle)
$endif
{@profCoral} What is the current {nameof LoggerheadTurtle} population at {nameof ReefEdge}?
$branch .argue.showClaim

::argue.showClaim
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctPopulation
		$answer incorrect, .argue.incorrectPopulation
$choice .argue.giveUp; Let me get back to you.
$choose branch

::argue.correctPopulation
$call ArgueComplete()
{@profCoral} That looks great. 
{@profCoral} It looks like you are getting good at studying populations with your sub.
$call CompleteJob()

::argue.incorrectPopulation
$call ArgueRejectIncorrect()
{@profCoral} Ok, that's interesting, but it's not answering my question.
$goto .argue.showClaim

:: argue.giveUp
{@profCoral} OK. Get back to me when you're ready.


::end
#basePath   job.coral-check-up

:: start
@trigger    JobStarted
@cutscene
$branch common.ringPhone

{@kevin}	 Let's see what range of environmental factors the Tang can tolerate. We'll need the Stress Tank.


:: microHint
@trigger	JobTasksUpdated
@when		JobTaskTop(findMicro)
@once
@cutscene
$branch common.ringPhone

{@profCempaka}	Forgive the intrusion, but your AI tells me that according to the stress ranges you've measured,
				the environmental conditions at Site S should be well within the Blue Tang's comfortable range. 
				I just wanted to point out that there is something else which could be stressing the Blue Tang: Microorganisms. 
				I'm going to need you to go back to Site S and scan for microorganisms.

:: scanIck
@trigger	JobTaskCompleted
@when		HasEntity(Ick)
@once
@cutscene
{@kevin}	This must be what's stressing the Tang!  We'd better get a population count.


:: countIck
@trigger	JobTaskCompleted
@when		JobTaskTop(observeIck)
@once
@cutscene
{@kevin}	This place is just crawling with Ick.  We've got to get back to the Observation tank and see how this is affecting the Tang.

:: measureHint1
@trigger	ExperimentTankViewed
@when		tankType == "Measurement", JobTaskTop(measureIck)
@once
@cutscene
{@kevin}	Now that we know Ick stresses Blue Tang, we'll need to measure the rate at which Blue Tang reproduces when stressed.
			Place the Blue Tang in water that stresses it. I believe the Warm Kelp Forest should do the trick...

:: helpMeasure1
@trigger    RequestPartnerHelp
@when 		JobTaskActive(measureIck), !IsFactFullyUpgraded(BlueTang.Reproduce.Stressed), !IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
@cutscene
{@kevin}     Use the measurement tank to get the reproduction rate of Blue Tang when stressed

:: measureHint2
@trigger	ExperimentFinished
@when		IsFactFullyUpgraded(BlueTang.Reproduce.Stressed), !IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
@once
@cutscene
{@kevin}	The presence of Ick really slows down Ick reproduction.  What about consumption?  Do Tang eat slower when stressed?
			You'll need to measure Blue Tang and Turf Algae in water that stresses Blue Tang.

:: helpMeasure2
@trigger    RequestPartnerHelp
@when 		JobTaskActive(measureIck), IsFactFullyUpgraded(BlueTang.Reproduce.Stressed), !IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
@cutscene
{@kevin}     Use the measurement tank to get the rate at which Blue Tang eats Turf Algae when stressed.

:: measureHint3
@trigger	ExperimentFinished
@when		IsFactFullyUpgraded(BlueTang.Reproduce.Stressed), IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
@once
@cutscene
{@kevin}	I calculate that this may be the missing element from our previous model.
			Let's try to revise your descriptive model in light of the new information just acquired.

:: helpMeasure3
@trigger    RequestPartnerHelp
@when 		JobTaskActive(improveDescribe), IsFactFullyUpgraded(BlueTang.Reproduce.Stressed), IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
@cutscene
{@kevin}	Go to the modeling tool and redo your descriptive model with the new information you have.	 

:: describeComplete
@trigger	JobTasksUpdated
@when		JobTaskTop(report)
@once
@cutscene
{@kevin}	This model seems much more aligned to he Professor's observations. Let's go tell them the good news.


// CATCH-ALL GUIDE TEXT

:: catchFindStress
@trigger    RequestPartnerHelp
@when 		JobTaskActive(findStress)
@boostScore -5
@cutscene
{@kevin}    Stick some {nameof BlueTang} in the stress tank.

:: catchFindMicro
@trigger    RequestPartnerHelp
@when 		JobTaskActive(findMicro)
@boostScore -5
@cutscene
{@kevin}    Go to Site S and try to scan for microorganisms.

:: catchCountIck
@trigger    RequestPartnerHelp
@when 		JobTaskActive(countIck)
@boostScore -5
@cutscene
{@kevin}    Get a population count of the "Ick" microorganism you just found.

:: catchObserveIck
@trigger    RequestPartnerHelp
@when 		JobTaskActive(observeIck)
@boostScore -5
@cutscene
{@kevin}    Stick some {nameof BlueTang} and {nameof Ick} in the Observation Tank to learn about the effect of {nameof Ick} on {nameof BlueTang}.

:: catchMeasureIck
@trigger    RequestPartnerHelp
@when 		JobTaskActive(measureIck)
@boostScore -5
@cutscene
{@kevin}    Stick some {nameof BlueTang} and {nameof Ick} in the Measurement Tank to measure the effect of {nameof Ick} on {nameof BlueTang}.

:: catchReviseVisual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reviseVisual)
@boostScore -5
@cutscene
{@kevin}    Remake your visual model based on your new {nameof Ick} data.

:: catchImproveDescribe
@trigger    RequestPartnerHelp
@when 		JobTaskActive(improveDescribe)
@boostScore -5
@cutscene
{@kevin}    Remake your describe model based on your new {nameof Ick} data.

:: catchReport
@trigger    RequestPartnerHelp
@when 		JobTaskActive(report)
@boostScore -5
@cutscene
{@kevin}    Present your new model to Prof. Cempaka in the Comms room.



// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when		!ArgueIsComplete(checkUpArgue)
@cutscene
$call ArgueLoad(checkUpArgue)
{@profCempaka}	What's going on with the Tang?
$if JobTaskTop(report)
	$choice .argue.transition; The Ick are making them stressed!
$endif
$choice .argue.giveUp; I'm still not sure...

:: argue.transition
{@profCempaka}	The Ick? Did adding Ick fix the model?
$if ArgueSetClaim(checkUpClaim, jobs.coral-check-up.argue.claimLabel)
		$call ArgueFactSlot(LionfishInvasion.Model.IckStressDescribe)
$endif
$call ArgueDisplayClaim()
$branch .argue.presentFacts

:: argue.presentFacts
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctModel
		$answer incorrect, .argue.incorrectModel
$choice .argue.giveUp; Let me get back to you

:: argue.correctModel
{@profCempaka}	Well done! Now we understand more about the effects of Ick on Blue Tang.
$branch .end

:: argue.incorrectModel
{@profCempaka}	Hmm. I don't see how this pertains to the issue at hand.
$call ArgueRejectIncorrect()
{@profCempaka}	Why do you say the Ick are stressing the Tang?
$branch .argue.presentFacts

:: argue.giveUp
{@profCempaka}	OK. Get back to me when you're ready.

// END

:: end
$call ArgueComplete()
$call CompleteJob()
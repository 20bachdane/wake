#basePath   job.coral-much-algae

:: start
@trigger    JobStarted
@cutscene

$branch common.ringPhone

{@kevin}	 We need to develop a sense of why the {nameof TurfAlgae} population has gotten big enough to cover the coral.
$if !JobTaskCompleted(scanAll)
	// BRANCH A
	{@kevin}	We need to know the species at Site S that could be affecting the Turf Algae. Let's dive!
$else
	$if !JobTaskCompleted(observeEatAlgae)
		// BRANCH B
		{@kevin}	In a balanced ecosystem, something would be eating the Turf Algae and reducing its population.
					Have you used a tank to Observe what species from Site S eats Turf Algae?
	$else
		$if !JobTaskCompleted(measureEatRate)
			// BRANCH C
			{@kevin}	We'll need to use the measurement tank to figure out how much Turf Algae the Blue Tang eat.
		$else
			$if !JobTaskCompleted(modelPopulations)
				//BRANCH D
				{@kevin}	We've got numbers, but we won't know if that number makes sense until we build a Descriptive Model.
			$endif
		$endif
	$endif
$endif


// SCANNING

:: enterSite
@trigger    SceneStart
@when       scene:name == "RS-2S", !JobTaskCompleted(scanAll) // BRANCH A
@once
@cutscene
{@kevin} 	You should probably scan absolutely everything. Go crazy.

:: continueSite
@trigger    JobTasksUpdated
@when       scene:name == "RS-2S", JobTaskTop(observeEatAlgae) // BRANCH A
@once
@cutscene
{@kevin} 	That's pretty much everything that lives in this area.

:: helpEnterSite
@trigger    RequestPartnerHelp
@when       JobTaskTop(scanAll) // BRANCH A
@cutscene
{@kevin} 	Go to Site S and scan all species.


// EXPERIMENT
	

:: helpExperiment
@trigger    RequestPartnerHelp
@when       JobTaskTop(observeEatAlgae) // BRANCH B
@cutscene
{@kevin} 	Use the Observation Tank to determine what eats {nameof TurfAlgae} and is native to Site S.

:: rateMeasured
@trigger    JobTasksUpdated
@when       JobTaskTop(measureEatRate) // BRANCH B
@once
@cutscene
{@kevin} 	All right, so it's the {nameof BlueTang} that eat {nameof TurfAlgae}.

:: helpMeasure
@trigger    RequestPartnerHelp
@when       JobTaskTop(measureEatRate) // BRANCH C
@cutscene
{@kevin} 	Use the Measurement Tank to get the rate that {nameof BlueTang} eat {TurfAlgae}.

// MODELING

:: buildModel
@trigger	JobTasksUpdated
@when		JobTaskTop(modelPopulations)
@once
@cutscene
{@kevin}	We've got numbers, but we won't know if that number makes sense until we build a Descriptive Model.

:: helpBuildModel
@trigger    RequestPartnerHelp
@when       JobTaskTop(modelPopulations) // BRANCH D
@cutscene
{@kevin} 	Build a Descriptive Model of the Site S ecosystem, focusing on the {nameof BlueTang} and {nameof TurfAlgae}.

:: inModeling
@trigger	SceneStart
@when		scene:name == "Modeling"
@once
@cutscene
{@kevin}	You'll need to build a Visual Model first, if you haven't done that yet. Then make a Descriptive Model so we can compare it to the empirical data.

:: modelingComplete
@trigger	JobTasksUpdated
@when		scene:name == "Modeling", JobTaskTop(reportBack)
@once
@cutscene
{@kevin}	We have a model, but for some reason it doesn't match what we've observed. The {nameof BlueTang} aren't eating as much as we'd expect.
			Let's talk through it with {nameof profCempaka}.


// ARGUMENTATION

:: helpReport
@trigger    RequestPartnerHelp
@when       JobTaskTop(reportBack) // BRANCH D
@cutscene
{@kevin} 	Return to the Office and describe your results to {nameof profCempaka}.






:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(coralFakeFixArgue)
@cutscene
$branch .argue.chooseClaim

:: argue.chooseClaim
{@profCempaka}	Have the artificial reefs improved coral populations?
	$choice .argue.claimNoHelp; The artificial reefs have not helped.
	$choice .argue.claimHelp; The artificial reefs helped!
$choose branch	

// BRANCH: NO HELP

:: argue.claimNoHelp
{@profCempaka}	How do you know?
$call ArgueLoad(coralFakeFixArgue)
$if ArgueSetClaim(coralFakeFixArgueClaim, jobs.coral-fake-fix.argue.claimLabel)
		$call ArgueFactSlot(LionfishInvasion.Population.ArtificialReef)
		$call ArgueFactSlot(LionfishInvasion.PopulationHistory.StaghornCoral)
$endif
$call ArgueDisplayClaim()
$goto .argue.chooseFactsNoHelp

:: argue.chooseFactsNoHelp
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFactsAB
		$answer incorrect, .argue.incorrectFacts
$choice .argue.giveUp; Let me get back to you

:: argue.correctFactsAB
$call ArgueComplete()
{@profCempaka}	I see. The artificial reefs really have no effect.
$call CompleteJob()

:: argue.incorrectFacts
$if ArgueIsFactSubmitted(LionfishInvasion.PopulationHistory.StaghornCoral)
	// B only
	{@profCempaka}	The coral seem to be continuing to stay the same.
					Was the installation successful? Are the artificial reefs still there?
	$call ArgueClearFacts()
	$call ArgueSubmitFact(LionfishInvasion.PopulationHistory.StaghornCoral)
	$goto .argue.chooseFactsNoHelp
$else
	$if ArgueIsFactSubmitted(LionfishInvasion.Population.ArtificialReef)
		// A only 
		{@profCempaka}	I see the installation was successful. How are the coral affected?
		$call ArgueClearFacts()
		$call ArgueSubmitFact(LionfishInvasion.Population.ArtificialReef)
		$goto .argue.chooseFactsNoHelp
	$else
		// neither
		{@profCempaka}	I don't think that is important for answering this question.
		$call ArgueRejectIncorrect()
		$call ArgueClearFacts()
		$call ArgueHideClaim()
	$endif
$endif

:: argue.giveUp
{@profCempaka}	OK. Get back to me when you're ready.

// BRANCH: HELP

:: argue.claimHelp
{@profCempaka}	Can you show me the historic coral populations?
$call ArgueLoad(coralFakeFixIncorrectArgue)
$if ArgueSetClaim(coralFakeFixIncorrectArgueClaim, jobs.coral-fake-fix.argue.claimLabelIncorrect)
			$call ArgueFactSlot(LionfishInvasion.PopulationHistory.StaghornCoral)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFactsIncorrect
		$answer incorrect, .argue.incorrectFactsIncorrect
$choice .argue.giveUp; Let me get back to you

:: argue.correctFactsIncorrect
{@profCempaka}	This shows the coral populations staying the same. I think you should reconsider your claim.
$call ArgueRejectIncorrect()
$call ArgueClearFacts()
$call ArgueHideClaim()
$goto .argue.chooseClaim

:: argue.incorrectFactsIncorrect
{@profCempaka}	These aren't the historic coral populations. Are you reconsidering your claim?
$call ArgueRejectIncorrect()
$call ArgueClearFacts()
$call ArgueHideClaim()
$goto .argue.chooseClaim
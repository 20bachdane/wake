#basePath   job.coral-ocean-plastic

:: start
@trigger    JobStarted
@cutscene

{@profCoral} I need your help, Ollie. Is it true that you scanned plastic during one of your jobs?
{@player} Yeah, I found it at the reef.
{@profCoral} Oh no. This won't do at all. 
             What if the plastic makes its way to Serenity Meadows? What if the turtles try to eat it??  
{@player}   Aw, Professor, don't worry. We'll figure out a way to keep the turtles safe. 
            What should I do first? 
{@profCoral} We need to understand how plastic might affect Serenity Meadows.    
$if JobTaskTop(scanReefEdge)
    {@profCoral}  Start by making sure you've scanned all the species here at Site V.
                  Then observe their interactions and construct a food web. 
    {@player}     Copy that. 
$elseif JobTaskTop(whatTurtlesEat)
    {@profCoral}  I need you to use your Observation Tank to learn more about the organisms you've scanned here at Site V.
                  Then use what you find out to construct a Food Web. 
    {@player}    Copy that. 
$else
    {@profCoral}  I'd like you to use what you've learned about the species at Site V to construct a food web. 
    {@player}       Copy that. 
$endif
{@profCoral} Thank you. And Ollie... please hurry. 


:: helpLeaveShip
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", !jobs:coral-ocean-plastic.task.speciesReefEdge, JobTaskTop(scanReefEdge)
@cutscene
{@player}   What should I be doing, {nameof @guide}?
{@guide}	Head to Site V and scan anything that the Loggerhead Turtle might eat.

:: navigation
@trigger    SceneStart
@when       scene:name == "CoralStation"
@once
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide} Let's head to Site V and scan anything that the Loggerhead Turtle might eat.
					
:: helpGoToSiteV
@trigger    RequestPartnerHelp
@when 		scene:name == "CoralStation", !jobs:coral-ocean-plastic.task.speciesReefEdge
@cutscene
{@player}   I think I'm lost, {nameof @guide}. 
{@guide}	Keep exploring. You will need to dive at Site V. 

:: diveSite
@trigger    SceneStart
@when       scene:name == "RS-2V", !jobs:coral-ocean-plastic.task.speciesReefEdge
@once
@cutscene
$set    	jobs:coral-turtle-population.seen.bottom = true
{@player} Wow. If {nameof @profCoral} wants me to hurry, this must be serious.
          Poor guy. He would be heartbroken if anything bad happened to the turtles.
{@guide}  Yes. He seems to be nearly as attached to them as I am to new influxes of data.
{@player} Plastic in the reef... how awful.
          I hope it never ends up here. 

:: navigation.goBackUp
@trigger    JobTasksUpdated
@when       JobTaskCompleted(scanReefEdge)
@once
@cutscene
{@guide} Adequate work, O!
         Time to head back to the Meredith. 

// CATCH-ALL GUIDE TEXT

:: catchScanReef
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanReef)
@boostScore -5
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}    Scan the Organisms at Site V.

:: catchWhatTurtlesEat
@trigger    RequestPartnerHelp
@when 		JobTaskActive(whatTurtlesEat)
@boostScore -5
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}    Use the Observation Tank to figure out what Loggerhead Turtles eat.

:: catchMakeModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(makeModel)
@boostScore -5
@cutscene
{@player} Okay, {nameof @guide}. What now? 
{@guide}    Head to the Modeling Lab and create a Visual Model.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@player} Okay, {nameof @guide}. We're done here, right?
{@guide}  That's correct, O. Return to the station to talk to {nameof profCoral}!

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(oceanPlasticArgue)
@cutscene
$call ArgueLoad(oceanPlasticArgue)
{@profCoral} Okay, O. Let's get to the bottom of this, and quickly.
             How would plastic affect Serenity Meadows? 
$choice .argue.turtles; The plastic will only affect the turtles. 
$choice .argue.all; The plastic could affect all species. 
//$choice .argue.queen; The conch will be impacted.
//$choice .argue.staghorn; The coral will be impacted.
$choice .argue.nan; The plastic won't affect anything. 
$choice .argue.giveUp; I'm not sure yet, Let me get back to you.
$choose branch

::argue.turtles
$if ArgueSetClaim(oceanPlasticClaim, jobs.coral-ocean-plastic.argue.claimLabel1)
    $call ArgueFactSlot(LoggerheadTurtle.Eats.PlasticBag)
$endif
{@profCoral}  Oh no.... the poor turtles. This is awful! 
              Do you have evidence to support your claim, Ollie? 
$goto .argue.chooseFacts

::argue.all
$if ArgueSetClaim(oceanPlasticClaim, jobs.coral-ocean-plastic.argue.claimLabel4)
    $call ArgueFactSlot(ReefEdge.Model.PlasticsVisual)
$endif
{@profCoral} Oh dear. I was afraid of this--everything here is so connected.
             Do you have evidence to support your claim? 
$goto .argue.chooseFacts

::argue.queen
$if ArgueSetClaim(oceanPlasticClaim, jobs.coral-ocean-plastic.argue.claimLabel3)
    $call ArgueFactSlot(LoggerheadTurtle.Eats.PlasticBag)
$endif
{@profCoral} Oh no. That doesn't sound good.
            Do you have evidence to support your claim? 	
$goto .argue.chooseFactsDummy

::argue.nan
{@profCoral} Hmmm. That doesn't sound right, Ollie. 
             We've never noticed plastic here at Serenity Meadows, but I've see the harm it's done to other ecosystems. 
             Can you double-check your observations? 

::argue.staghorn
$if ArgueSetClaim(oceanPlasticClaim, jobs.coral-ocean-plastic.argue.claimLabel2)
		$call ArgueFactSlot(QueenConch.Light.Stressed)
$endif
{@profCoral}  Oh no. That doesn't sound good. 
              Do you have evidence to support your claim? 
$goto .argue.chooseFactsDummy

::argue.chooseFacts
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer ReefEdge.Model.PlasticsVisual, .argue.done
    $answer LoggerheadTurtle.Eats.PlasticBag, .argue.done2
    $answer *, .argue.unrelated
$choice .argue.giveUp; Let me get back to you
$choose branch

::argue.chooseFactsDummy
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer *, .argue.unrelated
$choice .argue.giveUp; Let me get back to you
$choose branch

::argue.done
$call ArgueComplete()
{@profCoral}  Well done, Ollie. Unfortunately, this all makes sense.
              Our poor turtles will eat the plastic... and all the other species will get thrown out of balance.
              It's a mess. A travesty
{@player}   I'm so sorry, Professor.
{@profCoral} Don't worry. We aren't going to take this lying down.
{@profCoral} We need to do something to get rid of this plastic, as soon as possible.
             For the turtles!!
             ....And, um, for the other species too, of course. 
{@player}    Ha. No judgment here, Professor. 

$call CompleteJob()

::argue.done2
$call ArgueComplete()
{@profCoral} Well done, Ollie. 
             I just wish it was better news for our poor turtles.            
{@player}   I'm so sorry, Professor.
{@profCoral} Don't worry. We aren't going to take this lying down.
{@profCoral} We need to do something to get rid of this plastic, as soon as possible.
             For the turtles!!
$call CompleteJob()

::argue.unrelated
$call ArgueRejectIncorrect()
{@profCoral} Hmmm. I'm not seeing a clear relationship between that species and the plastic. 
             Can you double-check your observations? 
$call ArgueCancelClaim()

:: argue.giveUp
{@profCoral} Very well, Ollie. Let me know when you're ready. 
$call ArgueCancelClaim()

::end
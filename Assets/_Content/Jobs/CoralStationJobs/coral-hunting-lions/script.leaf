#basePath   job.coral-hunting-lions

:: start
@trigger    JobStarted
@cutscene

{@guide}	This job calls for a complete model of all living things in this ecosystem.  Maybe we should come back to it later?
			If you want to keep going, we'll need to make sure all species are scanned and counted,
			make sure we've observed every interaction between every pair of species, get data on what causes each species too be stressed,
			and then measure the effect on water chemistry and the rates of predation and reproduction under stressed and unstressed conditions for each species. 
			But don't worry, we'll take it one step at a time.

// SCANNING

:: scanSpeciesComplete
@trigger    JobTasksUpdated
@when		scene:name == "RS-2S", JobTaskCompleted(scanCritters)
@once
@cutscene
{@guide}	Alright, looks like we know about every species living here.


:: scanProbesComplete
@trigger    JobTasksUpdated
@when		scene:name == "RS-2S", JobTaskCompleted(scanHistory)
@once
@cutscene
{@guide}	Great, we've got the historic populations and water chemistry data here.


:: countPopulationsComplete
@trigger    JobTasksUpdated
@when		scene:name == "RS-2S", JobTaskCompleted(countPopulations)
@once
@cutscene
{@guide}	Perfect, these population counts really form the base of any accurate model.


// EXPERIMENTATION

:: observeEatRulesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(observeEatRules)
@once
@cutscene
{@guide}	OK, we've got some of the basics of the ecosystem, but we're going to need a lot more for an intervention model.

:: obtainStressRulesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(obtainStressRules)
@once
@cutscene
{@guide}	We now know what causes every species to be stressed but not necessarily how they behave under stress.

:: measureStressEatRatesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(measureStressEatRates)
@once
@cutscene
{@guide}	Great!  Now we know not only what eats what, but how much!

:: measureStressReproduceRatesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(measureStressReproduceRates)
@once
@cutscene
{@guide}	Wow! Reproduction rates for every species at Site S can now be found in your AQOS tablet.


:: obtainChemistryComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(obtainChemistry)
@once
@cutscene
{@guide}	That was the last piece of the puzzle!

// MODELING
:: predictModelComplete
@trigger    JobTasksUpdated
@when		scene:name == "Modeling", JobTaskCompleted(predictModel)
@once
@cutscene
{@guide}	OK now, this is it.  We're ready to make an intervention model of what would happen if we added more fishers to hunt the Lionfish.  Good luck!

:: interveneModelComplete
@trigger    JobTasksUpdated
@when		scene:name == "Modeling", JobTaskCompleted(interveneModel)
@once
@cutscene
{@guide}	Alright!  Looks like allowing the hunting of lionfish would seriously benefit the coral and the ecosystem overall.  Time to hand over your findings.

// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(huntingLionsArgue)
@cutscene
$call ArgueLoad(huntingLionsArgue)
{@profCoral}	We know I'm not the fishers' biggest fan, but if I'm going to advocate for hunting, I need a model that demonstrates it will improve the populations or the diversity of the reef in the future.
				Have that model yet?
	$choice .argue.haveModel; Yes! I know how it works!
	$choice .argue.noModel; No, not yet.
$choose branch	

:: argue.noModel
{@profCoral}	Well, let me know when you do.

:: argue.haveModel
{@profCoral}	Okay. I need a model that shows the coral will come back, an observation of what species Lionfish impact, and a connection to the Coral.
$if ArgueSetClaim(hunting-lionsClaim, jobs.coral-hunting-lions.argue.claimEvidence)
		$call ArgueFactSlot(LionfishInvasion.Model.HuntingLionsIntervene)
		$call ArgueFactSlot(Lionfish.Eats.BlueTang)
		$call ArgueFactSlot(Lionfish.Eats.BlueheadWrasse)
		$call ArgueFactSlot(StaghornCoral.Light.Stressed)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFacts
		$answer incorrect, .argue.incorrectFacts
$choice .argue.giveUp; Let me get back to you

:: argue.giveUp
{@profCoral}	OK. Get back to me when you're ready.

:: argue.incorrectFacts
{@profCoral}	Hmm, this isn't quite what I'm looking for.
$call ArgueRejectIncorrect()
$call ArgueClearFacts()

:: argue.correctFacts
{@profCoral}	So, the less Lionfish, the more small fish, less algae, more light, happier coral!
				Whoa. That is complex, but you did it!
				I knew those Lionfish were awful from day 1.
$call ArgueComplete()
$call CompleteJob()


// REQUEST HELP

:: collectData
@trigger RequestPartnerHelp
@when   scene:name != "RS-2S", !JobTaskCompleted(countPopulation), !JobTaskCompleted(scanCritters), !JobTaskCompleted(scanHistory)
@cutscene
{@guide}	We need to collect more data at {h}Site S{/h}.

:: requestHelpScans
@trigger    RequestPartnerHelp
@when		JobTaskTop(scanCritters)
@cutscene
{@guide}	Why don't you check your {item}AQOS{/item} for our first task?

:: requestHelpProbes
@trigger    RequestPartnerHelp
@when		JobTaskTop(scanHistory)
@cutscene
{@guide}	Be sure to check your {item}AQOS{/item} for the next steps as you collect data.

:: requestHelpCounts
@trigger    RequestPartnerHelp
@when		JobTaskTop(countPopulation)
@cutscene
{@guide}	Be sure to check your {item}AQOS{/item} for the next steps as you collect data.

:: backToShip
@trigger    RequestPartnerHelp
@when		JobTaskCompleted(scanCritters), JobTaskCompleted(scanHistory), JobTaskCompleted(countPopulation), !IsPlayerOnShip()
@cutscene
{@guide}    Let's head back to the {m}Ship{/m} to continue this job.

:: requestHelpEatRules
@trigger    RequestPartnerHelp
@when		JobTaskTop(observeEatRules), IsPlayerOnShip()
@cutscene
{@guide}	Use the {item}Observation Tank{/item} to find what eats what. Check AQOS to see which species you haven't covered yet.
            By examining your {m}Visual Model{/m} you can also check for {h}missing eat behaviors{/h}.

:: blueTangTurfAlgaeStress
@trigger    RequestPartnerHelp
@when		JobTaskTop(observeEatRules), !HasFact(BlueTang.Eats.TurfAlgae.Stressed)
@cutscene
{@guide}    We might need to observe the {nameof BlueTang} more closely.
            I would recommend {item}observing{/item} it's behavior when it interacts with other creatures while it's stressed by the {nameof Ick}

:: requestHelpStressRules
@trigger    RequestPartnerHelp
@when		JobTaskTop(obtainStressRules)
@cutscene
{@guide}	Get the stress ranges for each  Site S species using the {item}Stress Tank{/item}. Check AQOS to see which species you haven't covered yet.

:: requestHelpStressEatRates
@trigger    RequestPartnerHelp
@when		JobTaskTop(measureEatRates)
@cutscene
{@guide}	Get the rate at which each creature at {h}Site S{/h} eats its prey using the {item}Measurement Tank{/item}.
            By examining your {m}Visual Model{/m} you can check the blue eat lines for any rules {h}missing rates{/h}.

:: requestHelpStressReproduceRates
@trigger    RequestPartnerHelp
@when		JobTaskTop(measureStressReproduceRates)
@cutscene
{@guide}	Use the measurement tank to get each Site S species' rate of reproduction.  Check AQOS to see which species you haven't covered yet.

:: requestHelpObtainChemistry
@trigger    RequestPartnerHelp
@when		JobTaskTop(obtainChemistry)
@cutscene
{@guide}	Get the amount each species at Site S affects the water around it using the Measurement Tank.

:: requestHelpPredictModel
@trigger    RequestPartnerHelp
@when		JobTaskTop(predictModel)
@cutscene
{@guide}	Start making a model of Site S using the Modeling tool, and take it as far as you can.

:: requestHelpArgueIncentive
@trigger    RequestPartnerHelp
@when		JobTaskTop(argueIncentive)
@cutscene
{@guide}	It's time to go to {nameof @profCoral} and show off the model you created.
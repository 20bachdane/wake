#basePath   job.coral-hunting-lions

:: start
@trigger    JobStarted
@cutscene

{@profCoral} Okay, Ollie, let's get started. 
			 For this job, you'll need to create an {h}intervention model{/h}.
			 Sofia has...<i>suggested</i> that we get rid of the lionfish, and the local community would be happy to do more lionfish hunting.
			 I want to investigate what would happen if we did allow——or even encourage——more spearfishing. 
{@player}	Awesome. Let's do it! 
{@profCoral} Aguas, mi amiga... this one's a little tricky. 
		     First, you'll need to make sure all the species are {h}scanned{/h} and {h}counted{/h}.
			 Then you'll {h}observe{/h} how every pair of species interact with each other. 
{@player}	 Well, that's not too bad——
{@profCoral} Then, you'll need to figure out what stresses each species...
			 As well as their {h}eating{/h} and {h}reproduction rates{/h} when stressed and unstressed.
		     And finally, you'll need to know how each species affects the {h}water chemistry{/h} of its environment.
{@player} .|.|.|Ooookay.| You almost had me there, Professor.| Muy divertido.
{@profCoral} It's not a joke, Ollie. But we'll take it one step at a time. Slow and steady, remember?
		     You can decide if you're ready to take this one on, or if you'd like to come back later. 
$set jobs:coral-hunting-lions.sync-failed = false
$call GiveJournalEntry("N07_CoralDetective")

// SCANNING

:: scanSpeciesComplete
@trigger    JobTasksUpdated
@when		scene:name == "RS-2S", JobTaskCompleted(scanCritters)
@once
@cutscene
{@guide}	Adequate work, O! You've scanned all the organisms at {m}Site S{/m}!
{@player}	Well, at least that's one task down.
{@guide}	Yes! And many more tasks full of data still ahead of us! Isn't it exciting? 


:: scanProbesComplete
@trigger    JobTasksUpdated
@when		scene:name == "RS-2S", JobTaskCompleted(scanHistory)
@once
@cutscene
{@player} Okay. We've got the historic populations and water chemistry data.
		  What now, {nameof @guide}?
{@guide}  You will need to continue gathering data in order to complete your model for the Restoration Reef.
		  Check {item}AQOS{/item} for your next task!


:: countPopulationsComplete
@trigger    JobTasksUpdated
@when		scene:name == "RS-2S", JobTaskCompleted(countPopulations)
@once
@cutscene
{@guide}	You've obtained the population counts you need!
		    This should provide the foundation for an accurate model.
{@player}   And lots more data, right, V?
{@guide}	Affirmative, O!!
{@player}   Awww, {nameof @guide}. I haven't heard you so excited in... well, ever. 

// EXPERIMENTATION

:: observeEatRulesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(observeEatRules)
@once
@cutscene
{@player} Okay. We've got the basics!
{@guide}	Affirmative, O. But you will need quite a bit more data for an intervention model.
		Check {item}AQOS{/item} for your next task!

:: obtainStressRulesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(obtainStressRules)
@once
@cutscene
{@player} Okay, {nameof @guide}, we've got the stress ranges.	
		  What do I need to do next?
{@guide} You have discovered the conditions that stress each species.
		 Now you will need to use your {item}Measurement Tank{/item} to determine how they behave under stress. 

:: measureStressEatRatesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(measureStressEatRates)
@once
@cutscene
{@guide}	Adequate work, O! You have obtained the eating rates!

:: measureStressReproduceRatesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(measureStressReproduceRates)
@once
@cutscene
{@guide} You have obtained the reproduction rates!
		 So much data!!! 


:: obtainChemistryComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(obtainChemistry)
@once
@cutscene
{@player} So... that's it, right? The last piece of the puzzle? 
{@guide} That is correct, O. It's time to use your {item}Modeling tool{/item}!

// MODELING
:: predictModelComplete
@trigger    JobTasksUpdated
@when		scene:name == "Modeling", JobTaskCompleted(predictModel)
@once
@cutscene
{@guide} Now you must use all of your wonderful data to create an Intervention Model!
		{nameof @profCoral} needs to know what would happen if we added more Fishers to hunt the Lionfish. 

:: interveneModelComplete
@trigger    JobTasksUpdated
@when		scene:name == "Modeling", JobTaskCompleted(interveneModel)
@once
@cutscene
{@player} Wow... Sofia was right! 
	      Those spears at the Reef looked so strange and scary. But they're actually... helpful?
{@guide} Yes. It appears that more hunting of Lionfish would benefit the entire ecosystem... including the Coral. 
		 Excellent work, O!
{@player} Whoa, hold up. Did you just say "excellent?" You??
{@guide} Well, you really were quite excellent. And all that data!!!
		 Time to head back to the station and tell {nameof @profCoral} what you found!


// MODELING SUGGESTIONS

:: triggerSyncFailure
@trigger    SimulationSyncError
@when       !jobs:coral-hunting-lions.sync-failed
@once
$set jobs:coral-hunting-lions.sync-failed = true

:: helpModelSync.Visual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(predictModel), scene:name == "Modeling", modeling:phase == "visual"
@cutscene
$branch .modelSuggestions

:: helpModelSync.Sync
@trigger    RequestPartnerHelp
@when 		JobTaskActive(predictModel), scene:name == "Modeling", modeling:phase == "sync"
@cutscene
$branch .modelSuggestions

:: modelSuggestions
$if HasFact(Fishers.Eats.Lionfish), IsFactFullyUpgraded(Fishers.Eats.Lionfish), HasFact(Lionfish.Reproduce), HasFact(Lionfish.Eats.BlueTang), IsFactFullyUpgraded(Lionfish.Eats.BlueTang), HasFact(Lionfish.Eats.BlueheadWrasse), IsFactFullyUpgraded(Lionfish.Eats.BlueheadWrasse), HasFact(Lionfish.Consume.Oxygen), HasFact(Lionfish.Produce.CarbonDioxide), HasFact(RedGrouper.Reproduce), HasFact(RedGrouper.Eats.BlueheadWrasse), IsFactFullyUpgraded(RedGrouper.Eats.BlueheadWrasse), HasFact(RedGrouper.Eats.BlueTang), IsFactFullyUpgraded(RedGrouper.Eats.BlueTang), HasFact(RedGrouper.Consume.Oxygen), HasFact(RedGrouper.Produce.CO2), HasFact(BlueTang.Reproduce), HasFact(BlueTang.Eats.TurfAlgae), IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae), HasFact(BlueTang.Eats.TurfAlgae.Stressed), IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed), HasFact(BlueTang.Consume.Oxygen), HasFact(BlueTang.Produce.CarbonDioxide), HasFact(BlueheadWrasse.Reproduce), HasFact(BlueheadWrasse.Eats.Ick), IsFactFullyUpgraded(BlueheadWrasse.Eats.Ick), HasFact(BlueheadWrasse.Consume.Oxygen), HasFact(BlueheadWrasse.Produce.CarbonDioxide), HasFact(Ick.Reproduce), HasFact(Ick.Stresses.BlueTang), HasFact(Sargassum.Reproduce), HasFact(Sargassum.Produce.Oxygen), HasFact(Sargassum.Consume.CO2), HasFact(Sargassum.Consume.Light), HasFact(TurfAlgae.Reproduce), HasFact(TurfAlgae.Produce.Oxygen), HasFact(TurfAlgae.Consume.CarbonDioxide), HasFact(TurfAlgae.Consume.Light), HasFact(StaghornCoral.Reproduce), HasFact(StaghornCoral.Produce.Oxygen), HasFact(StaghornCoral.Consume.CO2), HasFact(StaghornCoral.Consume.Light)
    $if HasFact(LionfishInvasion.Model.HuntingLionsVisual)
        {@guide}    You're done with this portion! Head to the {h}Describe{/h} tab next.
    $else
        {@guide}    Once you import your facts and save the Visual model, we should be good to make our Describe model!
    $endif
$else
    $if !jobs:coral-hunting-lions.sync-failed
        {@guide}    Time to try out your model in the {h}Describe{/h} tab.
    $else
        {@guide}    Seems like we don't have enough information to complete our model accurately.
                    Look for {h}question marks{/h} in the  Visual model interface, those point to where we may need more data.
		$if !HasFact(Fishers.Eats.Lionfish)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(Fishers.Eats.Lionfish)
			$branch .suggestMeasure
		$elseif !HasFact(Lionfish.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(Lionfish.Eats.BlueTang)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(Lionfish.Eats.BlueTang)
			$branch .suggestMeasure
		$elseif !HasFact(Lionfish.Eats.BlueheadWrasse)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(Lionfish.Eats.BlueheadWrasse)
			$branch .suggestMeasure
		$elseif !HasFact(Lionfish.Consume.Oxygen)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(Lionfish.Produce.CarbonDioxide)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(RedGrouper.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(RedGrouper.Eats.BlueheadWrasse)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(RedGrouper.Eats.BlueheadWrasse)
			$branch .suggestMeasure
		$elseif !HasFact(RedGrouper.Eats.BlueTang)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(RedGrouper.Eats.BlueTang)
			$branch .suggestMeasure
		$elseif !HasFact(RedGrouper.Consume.Oxygen)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(RedGrouper.Produce.CO2)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(BlueTang.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(BlueTang.Eats.TurfAlgae)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae)
			$branch .suggestMeasure
		$elseif !HasFact(BlueTang.Eats.TurfAlgae.Stressed)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(BlueTang.Eats.TurfAlgae.Stressed)
			$branch .suggestMeasure
		$elseif !HasFact(BlueTang.Consume.Oxygen)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(BlueTang.Produce.CarbonDioxide)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(BlueheadWrasse.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(BlueheadWrasse.Eats.Ick)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(BlueheadWrasse.Eats.Ick)
			$branch .suggestMeasure
		$elseif !HasFact(BlueheadWrasse.Consume.Oxygen)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(BlueheadWrasse.Produce.CarbonDioxide)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(Ick.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(Ick.Stresses.BlueTang)
			$branch .suggestObserve
		$elseif !HasFact(Sargassum.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(Sargassum.Produce.Oxygen)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(Sargassum.Consume.CO2)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(Sargassum.Consume.Light)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(TurfAlgae.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(TurfAlgae.Produce.Oxygen)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(TurfAlgae.Consume.CarbonDioxide)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(TurfAlgae.Consume.Light)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(StaghornCoral.Reproduce)
			$branch .suggestReproduce
		$elseif !HasFact(StaghornCoral.Reproduce.Stressed)
			$branch .suggestReproduce
		$elseif !HasFact(StaghornCoral.Produce.Oxygen)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(StaghornCoral.Consume.CO2)
			$branch .suggestMeasureEnviro
		$elseif !HasFact(StaghornCoral.Consume.Light) 
			$branch .suggestMeasureEnviro
		$endif
    $endif
$endif

:: suggestReproduce
{@guide}    Did you get all the reproduction rates?

:: suggestObserve
{@guide}    Are you sure you have observed all the interactions here?

:: suggestMeasure
{@guide}    You may need to measure the rates of interactions.

:: suggestMeasureEnviro
{@guide}    Are you sure you've found out all the ways the different organisms affect the water conditions? The {h}Measurement Tank{/h} may still be useful.



// REQUEST HELP

:: collectData
@trigger RequestPartnerHelp
@when   scene:name != "RS-2S", !JobTaskCompleted(countPopulation), !JobTaskCompleted(scanCritters), !JobTaskCompleted(scanHistory)
@cutscene
{@player} What now, {nameof @guide}?
{@guide}	You need to collect more data at {m}Site S{/m}.

:: requestHelpScans
@trigger    RequestPartnerHelp
@when		JobTaskTop(scanCritters)
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}	Why don't you check your {item}AQOS{/item} for your first task?

:: requestHelpProbes
@trigger    RequestPartnerHelp
@when		JobTaskTop(scanHistory)
@cutscene
{@player} What's our next move, {nameof @guide}?
{@guide}	Be sure to check your {item}AQOS{/item} for the next steps as you collect data.

:: requestHelpCounts
@trigger    RequestPartnerHelp
@when		JobTaskTop(countPopulation)
@cutscene
{@guide}	Be sure to check your {item}AQOS{/item} for the next steps as you collect data.

:: backToShip
@trigger    RequestPartnerHelp
@when		JobTaskCompleted(scanCritters), JobTaskCompleted(scanHistory), JobTaskCompleted(countPopulation), !IsPlayerOnShip(), !JobTaskTop(argueIncentive)
@cutscene
{@player} What now, {nameof @guide}?
{@guide}   You will need to return to the AquaLab to continue your job. 

:: requestHelpEatRules
@trigger    RequestPartnerHelp
@when		JobTaskTop(observeEatRules), IsPlayerOnShip()
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}	Use the {item}Observation Tank{/item} to find what eats what. Check {item}AQOS{/item} to see which species you haven't observed yet.
	  		You can also find {h}missing eat behaviors{/h} by examining your {m}Visual Model{/m}.

:: blueTangTurfAlgaeStress
@trigger    RequestPartnerHelp
@when		JobTaskTop(observeEatRules), !HasFact(BlueTang.Eats.TurfAlgae.Stressed)
@cutscene
{@guide}    You might need to observe the {nameof BlueTang} more closely.
            I recommend {item}observing{/item} how it interacts with other creatures while it's being stressed by the {nameof Ick}

:: requestHelpStressRules
@trigger    RequestPartnerHelp
@when		JobTaskTop(obtainStressRules)
@cutscene
{@player} What now, {nameof @guide}?
{@guide}	Use your {item}Stress Tank{/item} to obtain the stress ranges for each {m}Site S{/m} species. 
 			Check {item}AQOS{/item} to see which species you haven't covered yet.

:: requestHelpStressEatRates
@trigger    RequestPartnerHelp
@when		JobTaskTop(measureEatRates)
@cutscene
{@player} Okay, {nameof @guide}. What's our next step? 
{@guide}  Use your {item}Measurement Tank{/item} to find the rate at which each creature at {m}Site S{/m} eats its prey.            
		  To figure out what you're missing, check the blue eat lines in your {item}Visual Model{/item}.

:: requestHelpStressReproduceRates
@trigger    RequestPartnerHelp
@when		JobTaskTop(measureStressReproduceRates)
@cutscene
{@player} What now, {nameof @guide}?
{@guide}	Use the {item}Measurement Tank{/item} to get each {m}Site S{/m} species' rate of reproduction.  
		   Check {item}AQOS{/item} to see which species you haven't covered yet.

:: requestHelpObtainChemistry
@trigger    RequestPartnerHelp
@when		JobTaskTop(obtainChemistry)
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide} 	Use your {item}Measurement Tank{/item} to find out how each species at {m}Site S{/m} affects water chemistry. 

:: requestHelpPredictModel
@trigger    RequestPartnerHelp
@when		JobTaskTop(predictModel)
@cutscene
{@player} What's next, {nameof @guide}?
{@guide}  You will need to create a model of {m}Site S{/m} using the {item}Modeling tool{/item}. 
		  Use your data to make the model as complete and comprehensive as possible!

:: requestHelpArgueIncentive
@trigger    RequestPartnerHelp
@when		JobTaskTop(argueIncentive)
@cutscene
{@player} Okay. We're done, right, {nameof @guide}?
{@guide}  Yes! It's time to go to {nameof @profCoral} and show off your model!
{@player} Don't you mean, show off my "excellent" model? 
{@guide} Processing... processing...
{@player} Ha. Just teasing you, V. Let's head back to the Station. 


// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(huntingLionsArgue)
@cutscene
$call ArgueLoad(huntingLionsArgue)
{@profCoral} Thank you, Ollie. We've all been waiting eagerly for your results.
{@player} Engine's still wrecked, huh?
{@profCoral} Ahem. Let's just get to it.
			 Have you used a model to determine how Lionfish hunting might affect {m}Site S{/m}?
$choice .argue.haveModel; Yes! Lionfish hunting would help the ecosystem! 
$choice .argue.noModel; No, not yet.

:: argue.noModel
{@profCoral}	Okay, Ollie. Let me know when you're ready.

:: argue.haveModel
{@profCoral}	Can I see the model you've made?
$if ArgueSetClaim(hunting-lionsClaimModel, jobs.coral-hunting-lions.argue.claimModel)
		$call ArgueFactSlot(LionfishInvasion.Model.HuntingLionsIntervene)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.coralClaim
		$answer incorrect, .argue.incorrectFactsModel
$choice .argue.giveUpArg; Let me get back to you
$choose branch

:: argue.incorrectFactsModel
{@profCoral}	Hmmm. This isn't quite what I'm looking for.
$call ArgueRejectIncorrect()
$goto .argue.haveModel

// What is stressing the coral?
:: argue.coralClaim
$call ArgueHideClaim()
$if  ArgueSetClaim(hunting-lionsClaimCoral, jobs.coral-hunting-lions.argue.claimCoral)
		$call ArgueFactSlot(TurfAlgae.Consume.Light)
		$call ArgueFactSlot(StaghornCoral.Light.Stressed)
$endif
$call ArgueDisplayClaim()
{@profCoral}	To advocate for an intervention I need to see how this model outlines a chain of interactions linking the Lionfish to the Coral.
$branch .argue.chooseFactsCoral

:: argue.chooseFactsCoral
 {@profCoral}	First off: are there any organisms stressing the {nameof StaghornCoral}? And if so, how?
 $choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.lionfishClaim
		$answer incorrect, .argue.incorrectFactsCoral
$choice .argue.giveUpArg; Let me get back to you
$choose branch

:: argue.incorrectFactsCoral
{@profCoral}	Hmmm. This isn't quite what I'm looking for.
$call ArgueRejectIncorrect()
$goto .argue.chooseFactsCoral

// Why are Blue Tang stressed?
:: argue.lionfishClaim
{@profCoral}	I ask because in a previous job we determined that Lionfish don't directly interact with the coral. However, I think there is something indirect involving multiple organisms happening here.
$call ArgueHideClaim()
$if ArgueSetClaim(hunting-lionsClaimLionfish, jobs.coral-hunting-lions.argue.claimLionfish)
		$call ArgueFactSlot(Lionfish.Eats.BlueheadWrasse)
		$call ArgueFactSlot(BlueheadWrasse.Eats.Ick)
		$call ArgueFactSlot(Ick.Stresses.BlueTang)
		$call ArgueFactSlot(BlueTang.Eats.TurfAlgae.Stressed)
$endif
$call ArgueDisplayClaim()
$branch .argue.chooseFactsLionfish

:: argue.chooseFactsLionfish
 {@profCoral}	Okay, so. Given that the population of {nameof TurfAlgae} affects whether {nameof StaghornCoral} is stressed, how does the presence of Lionfish affect the {nameof StaghornCoral} populations?
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFactsLionfish
		$answer incorrect, .argue.incorrectFactsLionfish
$choice .argue.giveUpArg; Let me get back to you
$choose branch

:: argue.incorrectFactsLionfish
$if ArgueIsFactSubmitted(BlueTang.Eats.TurfAlgae), ArgueIsFactSubmitted(Ick.Stresses.BlueTang), ArgueIsFactSubmitted(BlueheadWrasse.Eats.Ick), ArgueIsFactSubmitted(Lionfish.Eats.BlueheadWrasse)
	// allow for submitting non-stressed rule
	$branch .argue.correctFactsLionfish
$else
	{@profCoral}	Hmmm. This isn't quite what I'm looking for.

	$call ArgueRejectIncorrect()
	$goto .argue.chooseFactsLionfish
$endif

:: argue.giveUpArg
$call ArgueClearFacts()
$call ArgueCancelClaim()
$branch .argue.giveUp

:: argue.giveUp
{@profCoral}    Of course. Take your time, O. This is a tough problem that has stumped us for a while now.

:: argue.correctFactsLionfish
$call ArgueComplete()
{@profCoral}	Wow! This is impressive work, Ollie.
			    It looks like less Lionfish means more small fish.
				More small fish means less ick, which means the {nameof BlueTang} are less stressed. That in turn means less algae, more light, and happier coral!
			    This was incredibly complex, but you did it! Great work, Ollie.
{@player}		Thanks, Professor. 
{@profCoral}	Ay... now I just have to tell Sofia.
			    Guess I'd better prepare myself for a few years' worth of I-Told-You-So's... 
$call CompleteJob()
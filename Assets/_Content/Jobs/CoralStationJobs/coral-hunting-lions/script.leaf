#basePath   job.coral-hunting-lions

:: start
@trigger    JobStarted
@cutscene

{@profCoral} Okay, Ollie, let's get started. 
			 For this job, you'll need to create an intervention model.
			 Sofia has...{i}suggested{i/} that we get rid of the lionfish, and the local community would be happy to do more lionfish hunting.
			 I want to investigate what would happen if we did allow——or even encourage——more spearfishing. 
{@player}	Awesome. Let's do it! 
{@profCoral} Aguas, mi amiga... this one's a little tricky. 
		     First, you'll need to make sure all the species are scanned and counted.
			 Then you'll observe how every pair of species interact with each other. 
{@player}	 Well, that's not too bad——
{@profCoral} Next, you'll need to figure out what stresses each species...
			 As well as their eating and reproduction rates when stressed and unstressed.
		     And finally, you'll need to know how each species affects the water chemistry of its environment.
{@player} ....Ooookay. You almost had me there, Professor. Muy divertido.
{@profCoral} It's not a joke, Ollie. But we'll take it one step at a time. Slow and steady, remember?
		     You can decide if you're ready to take this one on, or if you'd like to come back later. 

// SCANNING

:: scanSpeciesComplete
@trigger    JobTasksUpdated
@when		scene:name == "RS-2S", JobTaskCompleted(scanCritters)
@once
@cutscene
{@guide}	Adequate work, O! You've scanned all the organisms at Site S!
{@player}	Well, at least that's one task down.
{@guide}	Yes! And many more tasks full of data still ahead of us! Isn't it exciting? 


:: scanProbesComplete
@trigger    JobTasksUpdated
@when		scene:name == "RS-2S", JobTaskCompleted(scanHistory)
@once
@cutscene
{@player} Okay. We've got the historic populations and water chemistry data.
		  What now, {nameof @guide}?
{@guide}  You will need to continue gathering data in order to complete your model for the Restoration Reef.
		  Check AQOS for your next task!


:: countPopulationsComplete
@trigger    JobTasksUpdated
@when		scene:name == "RS-2S", JobTaskCompleted(countPopulations)
@once
@cutscene
{@guide}	You've obtained the population counts you need!
		    This should provide the foundation for an accurate model.
{@player}   And lots more data, right, V?
{@guide}	Affirmative, O!!
{@player}   Awww, {nameof @guide}. I haven't heard you so excited in... well, ever. 

// EXPERIMENTATION

:: observeEatRulesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(observeEatRules)
@once
@cutscene
{@player} Okay. We've got the basics!
{@guide}	Affirmative, O. But you will need quite a bit more data for an intervention model.
		Check AQOS for your next task!

:: obtainStressRulesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(obtainStressRules)
@once
@cutscene
{@player} Okay, {nameof @guide}, we've got the stress ranges.	
		  What do I need to do next?
{@guide} You have discovered the conditions that stress each species.
		 Now you will need to use your Measurement Tank to determine how they behave under stress. 

:: measureStressEatRatesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(measureStressEatRates)
@once
@cutscene
{@guide}	Adequate work, O! You have obtained the eating rates!

:: measureStressReproduceRatesComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(measureStressReproduceRates)
@once
@cutscene
{@guide} You have obtained the reproduction rates!
		 So much data!!! 


:: obtainChemistryComplete
@trigger    JobTasksUpdated
@when		scene:name == "ExperimentV2", JobTaskCompleted(obtainChemistry)
@once
@cutscene
{@player} So... that's it, right? The last piece of the puzzle? 
{@guide} That is correct, O. It's time to use your Modeling tool!

// MODELING
:: predictModelComplete
@trigger    JobTasksUpdated
@when		scene:name == "Modeling", JobTaskCompleted(predictModel)
@once
@cutscene
{@guide} Now you must use all of your wonderful data to create an Intervention Model!
		{nameof @profCoral} needs to know what would happen if we added more Fishers to hunt the Lionfish. 

:: interveneModelComplete
@trigger    JobTasksUpdated
@when		scene:name == "Modeling", JobTaskCompleted(interveneModel)
@once
@cutscene
{@player} Wow... Sofia was right! 
	      Those spears at the Reef looked so strange and scary. But they're actually... helpful?
{@guide} Yes. It appears that more hunting of Lionfish would benefit the entire ecosystem... including the Coral. 
		 Excellent work, O!
{@player} Whoa, hold up. Did you just say "excellent?" You??
{@guide} Well, you really were quite excellent. And all that data!!!
		 Time to head back to the station and tell {nameof @profCoral} what you found!

// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(huntingLionsArgue)
@cutscene
$call ArgueLoad(huntingLionsArgue)
{@profCoral} Thank you, Ollie. We've all been waiting eagerly for your results.
{@player} Engine's still wrecked, huh?
{@profCoral} Ahem. Let's just get to it.
			 Have you used a model to determine how Lionfish hunting might affect Site S?
	$choice .argue.haveModel; Yes! Lionfish hunting would help the ecosystem! 
	$choice .argue.noModel; No, not yet.
$choose branch	

:: argue.noModel
{@profCoral}	Okay, Ollie. Let me know when you're ready. 

:: argue.haveModel
{@profCoral} Very well. I need a model that shows three things:
			 Evidence that the coral will come back, an observation of what species are affected by Lionfish, and a connection between the Lionfish and the Coral.
$if ArgueSetClaim(hunting-lionsClaim, jobs.coral-hunting-lions.argue.claimEvidence)
		$call ArgueFactSlot(LionfishInvasion.Model.HuntingLionsIntervene)
		$call ArgueFactSlot(Lionfish.Eats.BlueTang)
		$call ArgueFactSlot(Lionfish.Eats.BlueheadWrasse)
		$call ArgueFactSlot(StaghornCoral.Light.Stressed)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFacts
		$answer incorrect, .argue.incorrectFacts
$choice .argue.giveUp; Let me get back to you

:: argue.giveUp
{@profCoral}	No worries, Ollie. Just let me know when you're ready. 

:: argue.incorrectFacts
{@profCoral}	Hmmm. This isn't quite what I'm looking for. 
$call ArgueRejectIncorrect()
$call ArgueClearFacts()

:: argue.correctFacts
{@profCoral}	Wow! This is impressive work, Ollie.
			    It looks like less Lionfish means more small fish.
				More small fish means less algae, more light, and happier coral!
			    This was incredibly complex, but you did it! Great work, Ollie.
{@player}		Thanks, Professor. 
{@profCoral}	Ay... now I just have to tell Sofia.
			    Guess I'd better prepare myself for a few years' worth of I-Told-You-So's... 
$call ArgueComplete()
$call CompleteJob()


// REQUEST HELP

:: collectData
@trigger RequestPartnerHelp
@when   scene:name != "RS-2S", !JobTaskCompleted(countPopulation), !JobTaskCompleted(scanCritters), !JobTaskCompleted(scanHistory)
@cutscene
{@player} What now, {nameof @guide}?
{@guide}	You need to collect more data at {h}Site S{/h}.

:: requestHelpScans
@trigger    RequestPartnerHelp
@when		JobTaskTop(scanCritters)
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}	Why don't you check your {item}AQOS{/item} for your first task?

:: requestHelpProbes
@trigger    RequestPartnerHelp
@when		JobTaskTop(scanHistory)
@cutscene
{@player} What's our next move, {nameof @guide}?
{@guide}	Be sure to check your {item}AQOS{/item} for the next steps as you collect data.

:: requestHelpCounts
@trigger    RequestPartnerHelp
@when		JobTaskTop(countPopulation)
@cutscene
{@guide}	Be sure to check your {item}AQOS{/item} for the next steps as you collect data.

:: backToShip
@trigger    RequestPartnerHelp
@when		JobTaskCompleted(scanCritters), JobTaskCompleted(scanHistory), JobTaskCompleted(countPopulation), !IsPlayerOnShip()
@cutscene
{@player} What now, {nameof @guide}?
{@guide}   You will need to return to the Meredith to continue your job. 

:: requestHelpEatRules
@trigger    RequestPartnerHelp
@when		JobTaskTop(observeEatRules), IsPlayerOnShip()
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}	Use the {item}Observation Tank{/item} to find what eats what. Check AQOS to see which species you haven't observed yet.
	  		You can also find {h}missing eat behaviors{/h} by examining your {m}Visual Model{/m}.

:: blueTangTurfAlgaeStress
@trigger    RequestPartnerHelp
@when		JobTaskTop(observeEatRules), !HasFact(BlueTang.Eats.TurfAlgae.Stressed)
@cutscene
{@guide}    You might need to observe the {nameof BlueTang} more closely.
            I recommend {item}observing{/item} how it interacts with other creatures while it's being stressed by the {nameof Ick}

:: requestHelpStressRules
@trigger    RequestPartnerHelp
@when		JobTaskTop(obtainStressRules)
@cutscene
{@player} What now, {nameof @guide}?
{@guide}	Use your {item}Stress Tank{/item} to obtain the stress ranges for each Site S species. 
 			Check AQOS to see which species you haven't covered yet.

:: requestHelpStressEatRates
@trigger    RequestPartnerHelp
@when		JobTaskTop(measureEatRates)
@cutscene
{@player} Okay, {nameof @guide}. What's our next step? 
{@guide}  Use your {item}Measurement Tank{/item} to find the rate at which each creature at {h}Site S{/h} eats its prey.            
		  To figure out what you're missing, check the blue eat lines in your {m}Visual Model{/m}.

:: requestHelpStressReproduceRates
@trigger    RequestPartnerHelp
@when		JobTaskTop(measureStressReproduceRates)
@cutscene
{@player} What now, {nameof @guide}?
{@guide}	Use the Measurement Tank to get each Site S species' rate of reproduction.  
		   Check AQOS to see which species you haven't covered yet.

:: requestHelpObtainChemistry
@trigger    RequestPartnerHelp
@when		JobTaskTop(obtainChemistry)
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide} 	Use your Measurement Tank to find out how each species at Site S affects water chemistry. 

:: requestHelpPredictModel
@trigger    RequestPartnerHelp
@when		JobTaskTop(predictModel)
@cutscene
{@player} What's next, {nameof @guide}?
{@guide}  You will need to create a model of Site S using the Modeling tool. 
		  Use your data to make the model as complete and comprehensive as possible!

:: requestHelpArgueIncentive
@trigger    RequestPartnerHelp
@when		JobTaskTop(argueIncentive)
@cutscene
{@player} Okay. We're done, right, {nameof @guide}?
{@guide}  Yes! It's time to go to {nameof @profCoral} and show off your model!
{@player} Don't you mean, show off my "excellent" model? 
{@guide} Processing... processing...
{@player} Ha. Just teasing you, V. Let's head back to the Station. 
		  

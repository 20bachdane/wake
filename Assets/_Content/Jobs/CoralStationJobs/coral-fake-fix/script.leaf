#basePath   job.coral-fake-fix

:: start
@trigger    JobStarted
@cutscene

{@profCoral} The site that we call Restoration Reef has been struggling.
			 A while back, I had my team add an Artifical Reef. 
			 We hoped it might boost the Staghorn Coral population.
{@player}	Is it working?
{@profCoral} I was hoping you'd find that out for us, Ollie.
		     We need to know if the {critter-name}artificial reefs{/critter-name} is still there...
			 And if the population of {nameof StaghornCoral} has increased.
{@player}    Copy that.
{@profCoral}  Oh, and Ollie... look out for spears out there.
{@player}	Um... excuse me? <i>Spears??<i/>
{@profCoral} Good luck! Now if you'll excuse me, the turtles in my lab need their mid-morning shrimp cakes... 

// SCANNING

:: enterSite
@trigger    SceneStart
@when       scene:name == "RS-2S"
@once
@cutscene
{@player} Oh no. {nameof @guide}, look at this place.
		  {nameof @profCoral} was right, there are spears everywhere. No wonder the coral is struggling!
{@guide}	Ah. Do humans typically spear-fish for Staghorn Coral?
{@player}	Um... well, no. But a bunch of spears everywhere can't be a good thing, right?
			We need to talk to the Professor about this... but I guess I better finish the job first. 
{@guide} Affirmative, O. Check your AQOS to see your current tasks!

:: helpEnterSite
@trigger	RequestPartnerHelp
@when		!HasEntity(ArtificialReef), !JobTaskTop(argue), scene:name != "RS-2S"
@cutscene
{@player} What now, {nameof @guide}?
{@guide}	Go to {h}Site S{/h} to scan the {critter-name}artificial reef{/critter-name} and find the current and historical coral population.

:: helpScanPop
@trigger	RequestPartnerHelp
@when		scene:name == "RS-2S", !JobTaskCompleted(scanProbes)
@cutscene
{@guide}	You still need to collect the historical data for the Coral. See if you can find the population probe!

:: helpCount
@trigger	RequestPartnerHelp
@when		scene:name == "RS-2S", !JobTaskCompleted(countPopulation)
@cutscene
{@player} What am I missing, {nameof @guide}?
{@guide}	You still need to count the {nameof StaghornCoral} and {critter-name}artificial reefs{/critter-name} using your Counting tool.

:: siteCompleted
@trigger	JobTasksUpdated
@when		scene:name == "RS-2S", JobTaskTop(argue)
@once
@cutscene
{@guide} Acceptable work, O!
		 You've gathered enough data to report back to {nameof @profCoral}.
{@player}  Good. All these spears and dead fish are creeping me out. 

:: helpSurface
@trigger	RequestPartnerHelp
@when		JobTaskTop(argue), scene:name == "RS-2S"
@cutscene
{@player} 	What now, {nameof @guide}?
{@guide}	You're ready to present your findings! Return to the Serenity Meadows station.

// :: helpReturnArgue
// @trigger	RequestPartnerHelp
// @when		JobTaskTop(argue), scene:name != "Helm"
// @cutscene
// {@guide}	Get back to the ship so you can make your case.

:: helpReturnArgue2
@trigger	RequestPartnerHelp
@when		JobTaskTop(argue)
@cutscene
{@guide}	{nameof profCoral} is waiting for your findings about the effectiveness of the coral reef.

// CATCH-ALL GUIDE TEXT

:: catchFindReef
@trigger    RequestPartnerHelp
@when 		JobTaskActive(findReef)
@boostScore -5
@cutscene
{@player} What now, {nameof @guide}?
{@guide}    Look for an {critter-name}artificial reef{/critter-name} at {h}Site S{/h}.

:: catchScanProbes
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanProbes)
@boostScore -5
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}    There should be a population probe at {h}Site S{/h}. You will need to collect its data.

:: catchCountPopulations
@trigger    RequestPartnerHelp
@when 		JobTaskActive(countPopulations)
@boostScore -5
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}    Count how much {nameof StaghornCoral} and {critter-name}artificial reef{/critter-name} can be found at {h}Site S{/h}.

// :: catchArgue
// @trigger    RequestPartnerHelp
// @when 		JobTaskActive(argue)
// @boostScore -5
// @cutscene
// {@guide}    Return to the research station to talk to {nameof profCoral}.

// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(coralFakeFixArgue)
@cutscene
$branch .argue.chooseClaim

:: argue.chooseClaim
$call ArgueCancelClaim()
{@profCoral} Okay, then. What did you find at the reef?
{@player} Ugh, it was muy loco, Professor. Spears everywhere, and tons of dead, creepy-looking fish!
	      We need to do something, report this to someone, before they wreck the whole reef——
{@profCoral} Just a moment, Ollie. I'd like to talk about your current job.
{@player} But... 
{@profCoral} Have the artificial reefs increased coral populations?
	$choice .argue.claimNoHelp; No, the artificial reefs haven't helped.
	$choice .argue.claimHelp; Yes, the artificial reefs helped!
	$choice .argue.giveUp; Let me check my notes and get back to you. 
$choose branch	

// BRANCH: NO HELP

:: argue.claimNoHelp
{@profCoral}	How do you know?
$call ArgueLoad(coralFakeFixArgue)
$if ArgueSetClaim(coralFakeFixArgueClaim, jobs.coral-fake-fix.argue.claimLabel)
		$call ArgueFactSlot(LionfishInvasion.Population.ArtificialReef)
		$call ArgueFactSlot(LionfishInvasion.PopulationHistory.StaghornCoral)
$endif
$call ArgueDisplayClaim()
$goto .argue.chooseFactsNoHelp

:: argue.chooseFactsNoHelp
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFactsAB
		$answer incorrect, .argue.incorrectFacts
$choice .argue.giveUp; Let me get back to you

:: argue.correctFactsAB
$call ArgueComplete()
{@profCoral} Hmmm. So it seems the artifical reef hasn't helped.
{@player} That's because there's something else going on out there, Professor!
		  What's the deal with all those spears?
{@profCoral}   Lionfish hunting is common here, Ollie. They're considered a delicacy. 
{@player}	Wait... those creepy dead fish were lionfish?? 
{@profCoral} Yes. If you're interested, I'll be looking into the impact of the lionfish soon...
			 Sofia is refusing to fix my engine until I investigate her conspiracy th——ahem, I mean, her theory. 
			 In the meantime, great work out there, Ollie. 

$call CompleteJob()

:: argue.incorrectFacts
$if ArgueIsFactSubmitted(LionfishInvasion.PopulationHistory.StaghornCoral)
	// B only
	{@profCoral}	Hmmm. The coral population hasn't seemed to improve. 
					Was our installation successful? Are the artificial reefs still there?
	$call ArgueClearFacts()
	$call ArgueSubmitFact(LionfishInvasion.PopulationHistory.StaghornCoral)
	$goto .argue.chooseFactsNoHelp
$else
	$if ArgueIsFactSubmitted(LionfishInvasion.Population.ArtificialReef)
		// A only 
		{@profCoral}	I see. So our installation was successful. And what did you discover about the coral population?
		$call ArgueClearFacts()
		$call ArgueSubmitFact(LionfishInvasion.Population.ArtificialReef)
		$goto .argue.chooseFactsNoHelp
	$else
		// neither
		{@profCoral}	That doesn't really help us, Ollie. 
		$call ArgueRejectIncorrect()
		$call ArgueClearFacts()
        $goto .argue.chooseFactsNoHelp
		// $call ArgueHideClaim()
	$endif
$endif

:: argue.giveUp
{@profCoral}	No hurry, Ollie. Get back to me when you're ready. 

// BRANCH: HELP

:: argue.claimHelp
{@profCoral}	Can you show me the historic coral populations?
$call ArgueLoad(coralFakeFixIncorrectArgue)
$if ArgueSetClaim(coralFakeFixIncorrectArgueClaim, jobs.coral-fake-fix.argue.claimLabelIncorrect)
	$call ArgueFactSlot(LionfishInvasion.PopulationHistory.StaghornCoral)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFactsIncorrect
		$answer incorrect, .argue.incorrectFactsIncorrect
$choice .argue.giveUp; Let me get back to you

:: argue.correctFactsIncorrect
{@profCoral}	This doesn't seem right, Ollie.
			    Can you reconsider your claim?
$call ArgueRejectIncorrect()
$call ArgueClearFacts()
$call ArgueHideClaim()
$goto .argue.chooseClaim

:: argue.incorrectFactsIncorrect
$if ArgueIsFactSubmitted(LionfishInvasion.PopulationHistory.ArtificialReef) 
    {@profCoral}  Actually, I'm looking for the population history of the {h}{nameof StaghornCoral}{/h}
    $call ArgueRejectIncorrect()
    $call ArgueClearFacts()
    $goto .argue.claimHelp
$else
    $call ArgueRejectIncorrect()
    $call ArgueClearFacts()
    {@profCoral}	Hmmm... That's not the fact we need, Ollie. 
				    Would you like to amend your claim? 
        $choice .argue.chooseClaim; Yeah, I'll give it another try. 
        $choice .argue.giveUp; Let me get back to you.
        $choose branch
$endif
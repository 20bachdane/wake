#basePath   job.coral-fake-fix

:: start
@trigger    JobStarted
@cutscene

{@guide}	Okay -- to prove that the {critter-name}artificial reefs{/critter-name} are working, you would need evidence that they're still there,
			and that the population of {nameof StaghornCoral} has increased. For both things the first step is to go down to {h}Site S{/h}.

// SCANNING

:: enterSite
@trigger    SceneStart
@when       scene:name == "RS-2S"
@once
@cutscene
{@guide} 	We have three things to do while we're down here. Check the job description to see what they are.
			Let's get to it!

:: helpEnterSite
@trigger	RequestPartnerHelp
@when		!HasEntity(ArtificialReef), !JobTaskTop(argue), scene:name != "RS-2S"
@cutscene
{@guide}	Go to {h}Site S{/h} to scan the {critter-name}artificial reef{/critter-name} and find the current and historical coral population.

:: helpScanPop
@trigger	RequestPartnerHelp
@when		scene:name == "RS-2S", !JobTaskCompleted(scanProbes)
@cutscene
{@guide}	There's another thing to do before we surface: collect the population probe data.

:: helpCount
@trigger	RequestPartnerHelp
@when		scene:name == "RS-2S", !JobTaskCompleted(countPopulation)
@cutscene
{@guide}	There's another thing to do before we surface: count the {nameof StaghornCoral} and {critter-name}artificial reefs{/critter-name} using your Counting tool.

:: siteCompleted
@trigger	JobTasksUpdated
@when		scene:name == "RS-2S", JobTaskTop(argue)
@once
@cutscene
{@guide}	All right! You've got enough data here to make an argument about the effectiveness of the artificial reef.

:: helpSurface
@trigger	RequestPartnerHelp
@when		JobTaskTop(argue), scene:name == "RS-2S"
@cutscene
{@guide}	You're ready to present your findings. Surface and get back to the Comms room on the ship.

:: helpReturnArgue
@trigger	RequestPartnerHelp
@when		JobTaskTop(argue), scene:name != "Helm"
@cutscene
{@guide}	Get back to the ship so you can make your case.

:: helpReturnArgue2
@trigger	RequestPartnerHelp
@when		JobTaskTop(argue), scene:name == "Helm"
@cutscene
{@guide}	{nameof profCempaka} is waiting to hear your findings about the effectiveness of the coral reef.

// CATCH-ALL GUIDE TEXT

:: catchFindReef
@trigger    RequestPartnerHelp
@when 		JobTaskActive(findReef)
@boostScore -5
@cutscene
{@guide}    Look for an {critter-name}artificial reef{/critter-name} at {h}Site S{/h}.

:: catchScanProbes
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanProbes)
@boostScore -5
@cutscene
{@guide}    There should be a population probe at {h}Site S{/h}. We need to collect data from it.

:: catchCountPopulations
@trigger    RequestPartnerHelp
@when 		JobTaskActive(countPopulations)
@boostScore -5
@cutscene
{@guide}    Count how much {nameof StaghornCoral} and {critter-name}artificial reef{/critter-name} is at {h}Site S{/h}.

:: catchArgue
@trigger    RequestPartnerHelp
@when 		JobTaskActive(argue)
@boostScore -5
@cutscene
{@guide}    Talk to {nameof profCempaka} in the Office.

// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(coralFakeFixArgue)
@cutscene
$branch .argue.chooseClaim

:: argue.chooseClaim
$call ArgueCancelClaim()
{@profCempaka}	Have the artificial reefs increased coral populations?
	$choice .argue.claimNoHelp; No, the artificial reefs have not helped.
	$choice .argue.claimHelp; Yes, the artificial reefs helped!
	$choice .argue.giveUp; Let me check my notes and get back to you
$choose branch	

// BRANCH: NO HELP

:: argue.claimNoHelp
{@profCempaka}	How do you know?
$call ArgueLoad(coralFakeFixArgue)
$if ArgueSetClaim(coralFakeFixArgueClaim, jobs.coral-fake-fix.argue.claimLabel)
		$call ArgueFactSlot(LionfishInvasion.Population.ArtificialReef)
		$call ArgueFactSlot(LionfishInvasion.PopulationHistory.StaghornCoral)
$endif
$call ArgueDisplayClaim()
$goto .argue.chooseFactsNoHelp

:: argue.chooseFactsNoHelp
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFactsAB
		$answer incorrect, .argue.incorrectFacts
$choice .argue.giveUp; Let me get back to you

:: argue.correctFactsAB
$call ArgueComplete()
{@profCempaka}	I see. The artificial reefs really have no effect.
$call CompleteJob()

:: argue.incorrectFacts
$if ArgueIsFactSubmitted(LionfishInvasion.PopulationHistory.StaghornCoral)
	// B only
	{@profCempaka}	The coral seem to be continuing to stay the same.
					Was the installation successful? Are the artificial reefs still there?
	$call ArgueClearFacts()
	$call ArgueSubmitFact(LionfishInvasion.PopulationHistory.StaghornCoral)
	$goto .argue.chooseFactsNoHelp
$else
	$if ArgueIsFactSubmitted(LionfishInvasion.Population.ArtificialReef)
		// A only 
		{@profCempaka}	I see the installation was successful. How are the coral affected?
		$call ArgueClearFacts()
		$call ArgueSubmitFact(LionfishInvasion.Population.ArtificialReef)
		$goto .argue.chooseFactsNoHelp
	$else
		// neither
		{@profCempaka}	I don't think that is important for answering this question.
		$call ArgueRejectIncorrect()
		$call ArgueClearFacts()
        $goto .argue.chooseFactsNoHelp
		// $call ArgueHideClaim()
	$endif
$endif

:: argue.giveUp
{@profCempaka}	OK. Get back to me when you're ready.

// BRANCH: HELP

:: argue.claimHelp
{@profCempaka}	Can you show me the historic coral populations?
$call ArgueLoad(coralFakeFixIncorrectArgue)
$if ArgueSetClaim(coralFakeFixIncorrectArgueClaim, jobs.coral-fake-fix.argue.claimLabelIncorrect)
	$call ArgueFactSlot(LionfishInvasion.PopulationHistory.StaghornCoral)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFactsIncorrect
		$answer incorrect, .argue.incorrectFactsIncorrect
$choice .argue.giveUp; Let me get back to you

:: argue.correctFactsIncorrect
{@profCempaka}	This shows the coral populations staying the same. I think you should reconsider your claim.
$call ArgueRejectIncorrect()
$call ArgueClearFacts()
$call ArgueHideClaim()
$goto .argue.chooseClaim

:: argue.incorrectFactsIncorrect
$if ArgueIsFactSubmitted(LionfishInvasion.PopulationHistory.ArtificialReef) 
    {@profCempaka}  Actually, I'm looking for the population history of the {h}{nameof StaghornCoral}{/h}
    $call ArgueRejectIncorrect()
    $call ArgueClearFacts()
    $goto .argue.claimHelp
$else
    $call ArgueRejectIncorrect()
    $call ArgueClearFacts()
    {@profCempaka}	Hmmm... That's not the fact I was looking for, Are you reconsidering your claim?
        $choice #argue.argue.chooseClaim; Let me amend my claim
        $choice .argue.giveUp; Let me get back to you
        $choose branch
$endif

$goto .argue.chooseClaim
#basePath   job.coral-fake-fix

:: start
@trigger    JobStarted
@cutscene

$branch common.ringPhone

{@kevin}	Okay -- to prove that the artifical reefs are working, you would need evidence that the artificial reefs are still there,
			and that the population of {nameof StaghornCoral} has increased. For both things the first step is to go down to Site S.
$set jobs:coral-fake-fix.seen.site = false

// SCANNING

:: enterSite
@trigger    SceneStart
@when       scene:name == "RS-2S"
@once
@cutscene
$set jobs:coral-fake-fix.seen.site = true
{@kevin} 	We have three things to do while we're down here. Check the job description to see what they are.
			Let's get to it!

:: helpEnterSite
@trigger	RequestPartnerHelp
@when		!jobs:coral-fake-fix.seen.site, !JobTaskTop(argue)
@once
@cutscene
{@kevin}	Go to Site S to scan the artificial reef and find the current and historical coral population.

:: helpScanPop
@trigger	RequestPartnerHelp
@when		!JobTaskCompleted(scanProbes)
@cutscene
{@kevin}	There's another thing to do before we surface: collect the population probe data.

:: helpCount
@trigger	RequestPartnerHelp
@when		!JobTaskCompleted(countPopulation)
@cutscene
{@kevin}	There's another thing to do before we surface: count the {nameof StaghornCoral} and artificial reefs using your Counting tool.

:: siteCompleted
@trigger	JobTasksUpdated
@when		JobTaskTop(argue)
@once
@cutscene
{@kevin}	All right! You've got enough data here to make an argument about the effectiveness of the artificial reef.

:: helpSurface
@trigger	RequestPartnerHelp
@when		JobTaskTop(argue), scene:name == "RS-2S"
@cutscene
{@kevin}	You're ready to present your findings. Surface and get back to the Comms room on the ship.

:: helpReturnArgue
@trigger	RequestPartnerHelp
@when		JobTaskTop(argue)
@cutscene
$if scene:name != "Ship"
	{@kevin}	Get back to the ship so you can make your case.
$else
	{@kevin}	{nameof profCempaka} is waiting to hear your findings about the effectiveness of the coral reef.
$endif

// ARGUMENTATION









:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(coralFishyBizzArgue)
@cutscene
$call ArgueLoad(coralFishyBizzArgue)
$branch .argue.chooseEvidence

:: argue.chooseEvidence
$if HasFact(ReefEdge.Model.GrouperFishingRate)
	{@profCempaka} So, how much should we be reducing fishing in the area to increase the Grouper population?
		$choice .argue.claimSome; We can reduce fishing by 12 fishers.
		$choice .argue.claimTooMany; We can reduce fishing by 5 fishers.
		$choice .argue.claimNone; We can't fish here at all.
	$choose branch	
$else
	{@profCempaka}	Back so soon? I don't think you've had enough time to look into this thoroughly.
					Come back when you've made a model.
$endif


:: argue.claimNone
{@profCempaka} Hold on, we've been fishing here for centuries! Please check your data.

:: argue.claimTooMany
{@profCempaka} That doesn't seem like it'd have an impact... Go check your evidence again and come back to me.

:: argue.claimSome
{@profCempaka} Not too many... seems reasonable. What evidence do you have to show to support that?
$goto .argue.defendClaim

:: argue.defendClaim
$if ArgueSetClaim(coralFishyBizzArgueClaim, jobs.coral-fishy-bizz.argue.claimLabel)
			$call ArgueFactSlot(ReefEdge.Model.GrouperFishingRate)
$endif

$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFacts
		$answer incorrect, .argue.incorrectFacts
$choice .argue.giveUp; Let me get back to you

:: argue.correctFacts
$call ArgueComplete()
{@profCempaka} Excellent! This is exactly what they need to see!
$call CompleteJob()

:: argue.incorrectFacts
$if ArgueIsFactSubmitted(Model.TurtleVisual)
	{@profCempaka} I see how that might be related, but I need a model to show how many fishers we can support.
$else
	{@profCempaka} Hmmm... Got anything else?
$endif

$call ArgueRejectIncorrect()
$goto .argue.defendClaim

:: argue.giveUp
{@profCempaka} OK. Get back to me when you're ready.

:: end
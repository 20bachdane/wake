#basePath   job.coral-fishy-bizz

:: start
@trigger    JobStarted
@cutscene

$set jobs:coral-fishy-bizz.gotScans = false
{@profCoral}	Site V is a very popular fishing spot for Grouper. We are looking to maximize how much people can fish without causing the Grouper fish population to decline. 
{@profCoral}	I need you to determine how much Red Grouper can be harvested sustainably.
{@profCoral}	Start by heading to Site V and learning about the Grouper and the Fishers.
{@player}		We're on it!

:: helpGoOutside
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", jobs:coral-fishy-bizz.gotScans == false
@cutscene
{@player}   Any idea where I should go next?
{@guide}	First let's exit the ship and head over to Site V.


:: navigation
@trigger    SceneStart
@when       scene:name == "Station2"
@once
@cutscene
{@guide} 	Site V should be to the east of the ship, let's go!

:: helpGoToSiteV
@trigger    RequestPartnerHelp
@when 		scene:name == "Station2", jobs:coral-fishy-bizz.gotScans == false
@cutscene
{@player} 	Where should I be going again?
{@guide}	Site V should be at the southern buoy.
{@guide}	Let's head over there and dive down. 


:: gotScans
@trigger    JobTasksUpdated
@when 		scene:name == "RS-2V", HasEntity(Fishers), HasFact(RedGrouper.Reproduce), HasFact(ReefEdge.PopulationHistory.Fishers), jobs:coral-fishy-bizz.gotScans == false
@cutscene
$set jobs:coral-fishy-bizz.gotScans = true
{@guide} 	That should be all the data we need from here for now, back to the ship we go!

:: helpAtSiteV
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-2V"
@cutscene
{@player} 	What should I be looking for here?
$if HasEntity(Fishers)
	$if HasFact(RedGrouper.Reproduce)
		$if HasFact(ReefEdge.PopulationHistory.Fishers)
			{@guide} 	We've found everything we need from here for now, head back up to the ship when you're ready.
		$else
			{@guide} 	Did you try scanning the population probe yet? Some of the data we need should be in there.
		$endif
	$else
		{@guide} 	Looks like we still need the Red Grouper.
		{@guide} 	Try seeing if you can find any swimming around. 
	$endif
$else
	$if HasFact(RedGrouper.Reproduce)
		{@guide} 	Looks like we still need some info on the fishers. 
		{@guide} 	Try scanning some of those nets near the surface.
	$else
		{@guide} 	First, we need to scan some Red Grouper and the Fisher nets.
		{@guide} 	Drive around and see if you can find them!
	$endif
$endif

:: helpBackToShip
@trigger    RequestPartnerHelp
@when 		scene:name == "Station2", jobs:coral-fishy-bizz.gotScans == true
@boostScore 2
@cutscene
{@player} 	Where should I be going again?
{@guide}	We've got all the scans we need from Site V, so let's head back to the ship.


:: backAtShip
@trigger    SceneStart
@when       scene:name == "Helm", jobs:coral-fishy-bizz.gotScans == true
@once
@cutscene
{@guide}   	Let's head to the {nameof Modeling} and see if we can understand how the Grouper's population and Fisher population interacts.

:: helpAfterExperiment
@trigger    RequestPartnerHelp
@when 		scene:name != "Modeling", jobs:coral-fishy-bizz.gotScans == true, !HasFact(ReefEdge.Model.GrouperFishingRate)
@cutscene
{@player} 	What should we be doing next?
{@guide}	Let's head to the {nameof Modeling} and figure out how many Fishers we have have at Site V.


::ModelHelp1
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual", !HasFact(ReefEdge.Model.GrouperFishingRate)
@cutscene
{@player} 	What should I do next?
{@guide}	Make sure to import the new rule we just learned, and then press "Import New Facts."

:: modelGetSync
@trigger	SimulationModelStarted
@once
@cutscene
{@guide} 	Time to match up the historical data again.

::ModelHelp2
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "sync", !HasFact(ReefEdge.Model.GrouperFishingRate)
@cutscene
{@player} 	What should I do next?
{@guide}	Drag the sliders on the left to match the historical data, and then press "Simulate" to continue.


:: modelSyncedImmediate
@trigger	SimulationSyncSuccess
@who        guide
@once
@chatter
{@guide} 	Nice!

::ModelHelp3
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "intervene", !HasFact(SargassumCoveredReef.Model.LightPrediction)
@cutscene
{@player} 	What should I do next?
{@guide}	Adjust the numbers of organisms on the left, or introduce a new organism to the system. 
{@guide}	Try running interventions until you find one where the populations match the intervention target on the right.


:: modelingGraphComplete
@trigger	SimulationInterveneSuccess
@once
@cutscene
{@guide} 	Well done! Seems we've found out how many fishers still keep the Grouper population safe. 
{@guide}	Let's report this back to {nameof @profCoral}.

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		HasFact(Urchin.Eats.Sargassum)
@cutscene
{@player} 	What should we be doing now?
{@guide}	We know now how many Fishers Site V can safely sustain, so let's report back to {nameof @profCoral}.

// CATCH-ALL GUIDE TEXT

:: catchGetScans
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getScans)
@boostScore -5
@cutscene
{@guide}    Site V has Fishers and Grouper we need to scan.

:: catchHistoricalPopulations
@trigger    RequestPartnerHelp
@when 		JobTaskActive(historicalPopulations)
@boostScore -5
@cutscene
{@guide}    Head to Site V and get the population probe data.

:: catchGetModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getModel)
@boostScore -5
@cutscene
{@guide}    Head to the Modeling Lab. We need to determine how many boats should be able to fish at the same time.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Take your prediction to {nameof @profCoral} in the research station.

//ARGUMENT

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(coralFishyBizzArgue)
@cutscene
$call ArgueLoad(coralFishyBizzArgue)
$branch .argue.chooseEvidence

:: argue.chooseEvidence
$if HasFact(ReefEdge.Model.GrouperFishingRate)
	{@profCoral} So, how can we make the Grouper population sustainable for fishing?
		$choice .argue.claimSome; We must reducing fishing significanly.
		$choice .argue.claimTooMany; We must reduce fishing only by a small mount.
		$choice .argue.claimNone; We can't fish here at all.
	$choose branch	
$else
	{@profCoral}	Back so soon? I don't think you've had enough time to look into this thoroughly.
					Come back when you've made a model.
$endif


:: argue.claimNone
{@profCoral} Hold on, we've been fishing here for centuries! Please check your data.

:: argue.claimTooMany
{@profCoral} That doesn't seem like it'd have an impact... Go check your evidence again and come back to me.

:: argue.claimSome
{@profCoral} Not too many... seems reasonable. What evidence do you have to show to support that?
$goto .argue.defendClaim

:: argue.defendClaim
$if ArgueSetClaim(coralFishyBizzArgueClaim, jobs.coral-fishy-bizz.argue.claimLabel)
			$call ArgueFactSlot(ReefEdge.Model.GrouperFishingRate)
$endif

$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFacts
		$answer incorrect, .argue.incorrectFacts
$choice .argue.giveUp; Let me get back to you

:: argue.correctFacts
$call ArgueComplete()
{@profCoral} Excellent! This is exactly what they need to see!
$call CompleteJob()

:: argue.incorrectFacts
$if ArgueIsFactSubmitted(Model.TurtleVisual)
	{@profCoral} I see how that might be related, but I need a model to show how many fishers we can support.
$else
	{@profCoral} Hmmm... Got anything else?
$endif

$call ArgueRejectIncorrect()
$goto .argue.defendClaim

:: argue.giveUp
{@profCoral} OK. Get back to me when you're ready.

:: end
#basePath   job.coral-fishy-bizz

:: start
@trigger    JobStarted
@cutscene

{@profCoral}	Ah, thank you, Ollie! 
			  I've been meaning to take on this job for ages, but I've just been so busy with my turtle research.
{@player}	  No hay problema. How can I help? 
{@profCoral}  Serenity Meadows has become a popular fishing spot for Red Grouper.
			  We do want people to be able to keep fishing... but we also need to make sure the Grouper population doesn't start to decline. 
			  Start by heading outside and gathering data about the Grouper and the Fishers.
			  Then figure out how much Grouper can be harvested sustainably. 
{@player}	  I'm on it! I'll let you know what I find out. 
$set jobs:coral-fishy-bizz.sync-failed = false

:: helpGoOutside
@trigger    RequestPartnerHelp
@when 		scene:name == "Helm", !JobTaskCompleted(getScans)
@cutscene
{@player}   Any idea where I should go next?
{@guide}	First you will need to head to Site V. 


:: navigation
@trigger    SceneStart
@when       scene:name == "Station2"
@once
@cutscene
{@guide} 	You need to investigate the Grouper and the Fishers.
			Make your way to Site V!

:: helpGoToSiteV
@trigger    RequestPartnerHelp
@when 		scene:name == "Station2", !JobTaskCompleted(getScans)
@cutscene
{@player} 	Where should I be going again?
{@guide}	Site V should be at the southern buoy.
{@guide}	Let's head over there and dive down. 


:: gotScans
@trigger    JobTasksUpdated
@when 		scene:name == "RS-2V", HasEntity(Fishers), HasFact(RedGrouper.Reproduce), HasFact(ReefEdge.PopulationHistory.Fishers), !JobTaskCompleted(getScans)
@cutscene
{@guide} 	Sufficient work, O!
			Time to head back to the AquaLab and run your experiment.

:: helpAtSiteV
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-2V"
@cutscene
{@player} 	What should I do next, {nameof @guide}?
$if HasEntity(Fishers)
	$if HasFact(RedGrouper.Reproduce)
		$if HasFact(ReefEdge.PopulationHistory.Fishers)
			{@guide} 	You've obtained all the data you need, O. Time to head back to your ship!
		$else
			{@guide} 	Did you try scanning the population probe yet? Some of the data you need should be in there.
		$endif
	$else
		{@guide} 	You still need to scan the Red Grouper.
		{@guide} 	See if you can find any swimming around here! 
	$endif
$else
	$if HasFact(RedGrouper.Reproduce)
		{@guide} 	You still need data on the fishers. 
		{@guide} 	Try scanning some of those nets near the surface.
	$else
		{@guide} 	First, we need to scan some Red Grouper and the Fisher nets.
		{@guide} 	Drive around and see if you can find them!
	$endif
$endif

:: helpBackToShip
@trigger    RequestPartnerHelp
@when 		scene:name == "Station2", JobTaskCompleted(getScans)
@boostScore 2
@cutscene
{@player} 	What should I do now, {nameof @guide}?
{@guide}	You've obtained all the data you need at Site V. Time to head back to the AquaLab!


:: backAtShip
@trigger    SceneStart
@when       scene:name == "Helm", JobTaskCompleted(getScans)
@once
@cutscene
{@guide}   	Let's head to the {nameof Modeling} and see if we can understand how the Grouper's population and Fisher population interacts.

:: helpAfterExperiment
@trigger    RequestPartnerHelp
@when 		scene:name != "Modeling", JobTaskCompleted(getScans), !HasFact(ReefEdge.Model.GrouperFishingRate)
@cutscene
{@player} 	What should I do now, {nameof @guide}?
{@guide}	Head to the {nameof Modeling} and figure out how many Fishers are at Site V.


::ModelHelp1
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual", !HasFact(ReefEdge.Model.GrouperConcept)
@cutscene
{@player} 	Okay, {nameof @guide}. What now? 
{@guide}	Select the new rule we just learned, and then press "Import New Facts."

:: modelGetSync
@trigger	SimulationModelStarted
@once
@cutscene
{@guide} 	Time to match up the historical data again.

::ModelHelp2
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "sync", !HasFact(ReefEdge.Model.GrouperReproduction)
@cutscene
{@player} 	What should I do next?
{@guide}	Drag the sliders on the left to match the historical data, and then press "Simulate" to continue.


:: modelSyncedImmediate
@trigger	SimulationSyncSuccess
@who        guide
@once
@chatter
{@guide} 	Your model looks sufficient! 

::ModelHelp3
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "intervene", !JobTaskCompleted(getModel)
@cutscene
{@player} 	What should I do next?
{@guide}	Adjust the numbers of organisms on the left, or introduce a new organism to the system. 
{@guide}	Try running interventions until you find one where the populations match the intervention target on the right.


:: modelingGraphComplete
@trigger	SimulationInterveneSuccess
@once
@cutscene
{@guide} 	Adequate work, O! 
		     You've discovered how many Fishers can harvest Grouper here...
			 While still keeping the Grouper population safe.
{@player}    Awesome. Let's report back to {nameof @profCoral}!

:: helpReportBack
@trigger    RequestPartnerHelp
@when 		HasFact(Urchin.Eats.Sargassum)
@cutscene
{@player} 	What should I do now?
{@guide}	Report back to {nameof @profCoral}!


// MODELING SUGGESTIONS

:: triggerSyncFailure
@trigger    SimulationSyncError
@when       !jobs:coral-fishy-bizz.sync-failed
@once
$set jobs:coral-fishy-bizz.sync-failed = true

:: helpModelSync.Visual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getModel), scene:name == "Modeling", modeling:phase == "visual"
@cutscene
$branch .modelSuggestions

:: helpModelSync.Sync
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getModel), scene:name == "Modeling", modeling:phase == "sync"
@cutscene
$branch .modelSuggestions

:: modelSuggestions
$if HasFact(Fishers.Eats.RedGrouper), IsFactFullyUpgraded(Fishers.Eats.RedGrouper), HasFact(RedGrouper.Reproduce)
    $if HasFact(ReefEdge.Model.GrouperConcept)
        {@guide}    You're done with this portion! Head to the {h}Describe{/h} tab next.
    $else
        {@guide}    Once you import your facts and save the Visual model, we should be good to make our Describe model!
    $endif
$else
    $if !jobs:coral-fishy-bizz.sync-failed
        {@guide}    Time to try out your model in the {h}Describe{/h} tab.
    $else
        {@guide}    Seems like we don't have enough information to complete our model accurately.
                    Look for {h}question marks{/h} in the  Visual model interface, those point to where we may need more data.
		$if !HasFact(Fishers.Eats.RedGrouper)
			$branch .suggestObserve
		$elseif !IsFactFullyUpgraded(Fishers.Eats.RedGrouper)
			$branch .suggestMeasure
		$elseif !HasFact(RedGrouper.Reproduce)
			$branch .suggestReproduce
		$endif
    $endif
$endif

:: suggestReproduce
{@guide}    Did you get all the reproduction rates?

:: suggestObserve
{@guide}    Are you sure you have observed all the interactions here?

:: suggestMeasure
{@guide}    You may need to measure the rates of interactions.


// CATCH-ALL GUIDE TEXT

:: catchGetScans
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getScans)
@boostScore -5
@cutscene
{@player} What now, {nameof @guide}?
{@guide}  Scan the Fishers and Grouper at Site V. 

:: catchHistoricalPopulations
@trigger    RequestPartnerHelp
@when 		JobTaskActive(historicalPopulations)
@boostScore -5
@cutscene
{@player} Okay, {nameof @guide}. What's next? 
{@guide}  Obtain the population probe data from Site V!

:: catchGetModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getModel)
@boostScore -5
@cutscene
{@player} What should I be doing, {nameof @guide}?
{@guide}    Head to the Modeling Lab. You need to determine how many boats should be allowed to fish at the same time.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Take your prediction to {nameof @profCoral} in the research station!

//ARGUMENT

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(coralFishyBizzArgue)
@cutscene
$call ArgueLoad(coralFishyBizzArgue)
$branch .argue.chooseEvidence

:: argue.chooseEvidence
$if HasFact(ReefEdge.Model.GrouperFishingRate)
	{@profCoral} Oh, already? You're quite the fast worker, Ollie! 
			    Though knowing your mother, I'm not surprised. She was never one to slow down.  
				 So, did you figure out how to keep the Grouper fishing sustainable? 
		$choice .argue.claimSome; We need to reduce fishing significantly.
		$choice .argue.claimTooMany; We need to reduce fishing only by a small amount.
		$choice .argue.claimNone; No one can fish here at all.
	$choose branch	
$else
	{@profCoral}	Back so soon? I know you're a quick worker, Ollie...
					But I don't think even you would've had time to look into this thoroughly yet.
					Head back to your ship and create a model. Come see me when you're done. 
$endif


:: argue.claimNone
{@profCoral} Hmmm... that doesn't add up, Ollie.
			 People have been fishing here for centuries, and the Grouper are still around!
			 Why don't you check your data? 

:: argue.claimTooMany
{@profCoral} Slow down, Ollie. Are you sure that would have an impact?
			 Why don't you check your data again? 

:: argue.claimSome
{@profCoral} Hmmm. That might be difficult for people.
		     But it's better than losing our entire Red Grouper population.
			 Do you have evidence to show why fishing needs to be significantly reduced? 
 $goto .argue.defendClaim

:: argue.defendClaim
$if ArgueSetClaim(coralFishyBizzArgueClaim, jobs.coral-fishy-bizz.argue.claimLabel)
			$call ArgueFactSlot(ReefEdge.Model.GrouperFishingRate)
$endif

$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFacts
		$answer incorrect, .argue.incorrectFacts
$choice .argue.giveUp; Let me get back to you

:: argue.correctFacts
$call ArgueComplete()
{@profCoral} This is exactly what I needed, Ollie. Great work.
			 We need to protect our Grouper. The whole ecosystem depends on everything staying in balance...
			 Including our wonderful turtles!
			 I'll make sure this information ends up in the right hands. Thanks again for your help, Ollie. 
$call CompleteJob()

:: argue.incorrectFacts
$if ArgueIsFactSubmitted(ReefEdge.Model.TurtleVisual)
	{@profCoral} I see how that might be related, but it's not quite what I need.  
			    Do you have a model to show how many fishers we can support? 
$elseif ArgueIsFactSubmitted(ReefEdge.Model.GrouperReproduction)
	{@profCoral}	Yes, that's definitely the problem -- but do you have a model that shows how much we have to decrease fishing?
$else
	{@profCoral} Hmmm... that's not helpful here, Ollie. Do you have anything else? 
$endif
$call ArgueRejectIncorrect()
$goto .argue.defendClaim

:: argue.giveUp
{@profCoral} Ah, yes. Sometimes slow is the way to go. Just let me know when you're ready. 

:: end
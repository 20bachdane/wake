#basePath   job.coral-turtle-stability

:: start
@trigger    JobStarted
@cutscene

$branch common.ringPhone

{@profCempaka}	We need to know why the turtles are doing so well here.
				I need you to scan all the species at the reef edge, 
				then run some experiments to see what the turtles eat.
$set jobs:turtle-stability-visual-model.saved = false

// SCAN ALL

:: helpLeaveShip
@trigger    RequestPartnerHelp
@when 		scene:name == "Ship", JobTaskTop(scanAll)
@cutscene
{@player}   Where should I go from here?
{@kevin}	Let's exit the ship and head to the sub.

:: helpGoToSiteR
@trigger    RequestPartnerHelp
@when 		scene:name == "CoralStation", !jobs:coral-turtle-stability.got.scans
@cutscene
{@player}   Where should we go next?
{@kevin}	Site V should be to the East of the ship, let's head over and dive down!

:: diveSite
@trigger    SceneStart
@when       scene:name == "RS-2V"
@once
@cutscene
$set    	jobs:coral-turtle-stability.seen.bottom = true
{@kevin}   Looks like we made it! Time to see what species we can find here.

:: helpAtSiteR
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-2V"
@cutscene
{@player}   What do you think? Have we got everything?
$if HasEntity(Copepod), HasEntity(QueenConch), HasEntity(WhiteShrimp), HasEntity(StaghornCoral),  HasEntity(LoggerheadTurtle) 
	$set    jobs:coral-turtle-stability.got.scans = true
	{@kevin}   I think so! Head back up to the surface when you're ready to leave.
$else
	{@kevin}   Make sure to get all those little things swimming around in the cloudy spots, and the coral too.
$endif

:: navigation.goBackUp
@trigger    JobTasksUpdated
@when       JobTaskTop(behavior), HasEntity(Copepod), HasEntity(QueenConch), HasEntity(WhiteShrimp), HasEntity(StaghornCoral), HasEntity(LoggerheadTurtle)
@once
@cutscene
$set jobs:coral-turtle-stability.gotScans = true
{@kevin}    I think that's all the info we need from here for now! Feel free to head back up when you're ready.

:: navigation.return
@trigger    SceneStart
@when       scene:name == "CoralStation", jobs:coral-turtle-stability.seen.bottom, jobs:coral-turtle-stability.got.scans == false
@cutscene
{@player}   Hmm, do you think we got everything?
{@kevin}   Let me check...
$if HasEntity(Copepod), HasEntity(QueenConch), HasEntity(WhiteShrimp), HasEntity(StaghornCoral), HasEntity(LoggerheadTurtle)
	$set    jobs:coral-turtle-stability.got.scans = true
	{@kevin}   Yup! That's everything we needed, time to head back to the ship. 
$else
	{@kevin}   Hmm... I think there's more we need to find. Let's head back down.
	{@kevin}   Make sure to get all those little things swimming around in the cloudy spots, and the coral too.
$endif

:: helpBackToShip
@trigger    RequestPartnerHelp
@when 		scene:name == "CoralStation", jobs:coral-turtle-stability.got.scans
@cutscene
{@player} 	Where should we go from here?
{@kevin}	Let's head west and return to the ship.

// BEHAVIOR

:: atShip
@trigger    SceneStart
@when       scene:name == "Ship", jobs:coral-turtle-stability.got.scans == true
@once
@cutscene
{@player}   We're back. Now what?
{@kevin}   	Let's head to the {nameof Experimentation} and see what the turtles eat.
{@player}   On it!

:: helpBackAtShip
@trigger    RequestPartnerHelp
@when 		scene:name == "Ship", jobs:coral-turtle-stability.got.scans == true
@cutscene
{@player} 	We're back at the ship, but what should we be doing now?
{@kevin}	Let's head over to the {nameof Experimentation} and see what the turtles eat.

:: startExperiment
@trigger    SceneStart
@when       scene:name == "ExperimentV2", jobs:coral-turtle-stability.got.scans == true
@once
@cutscene
{@player}   What kind of experiment should we be doing this time?
{@kevin}  	Let's put the organisms in the tank and see what eats what.

::helpDoExperiment
@trigger    RequestPartnerHelp
@when 		scene:name == "ExperimentV2", jobs:coral-turtle-stability.got.scans == true
@cutscene
{@player} 	What kind of experiment should we be doing this time?
$if ExperimentIsRunning(Observation)
    $branch .helpDoExperiment.InExperiment
$elseif ExperimentViewed(Observation)
    $branch .helpDoExperiment.TankView
$else
    $branch .helpDoExperiment.None
$endif

:: helpDoExperiment.InExperiment
$if ExperimentHasCritter(Copepod)
    {@kevin}    Is anything interacting with the {pluralnameof Copepod}?
$elseif ExperimentHasCritter(QueenConch)
    {@kevin}    Is anything interacting with the {pluralnameof QueenConch}?
$elseif ExperimentHasCritter(WhiteShrimp)
    {@kevin}    Is anything interacting with the {pluralnameof WhiteShrimp}?
$else
    {@kevin}    Is it possible to get any new information from this experiment?
                Maybe add some of the swimmers, like {pluralnameof WhiteShrimp} or {pluralnameof Copepod}.
$endif

:: helpDoExperiment.TankView
{@kevin}    We have a few new species - let's see which of them the turtle eats.
$if ExperimentHasCritter(Copepod)
    {@kevin}    Well, we've added some {pluralnameof Copepod} - what might it interact with?
$elseif ExperimentHasCritter(QueenConch)
    {@kevin}    Well, we've added some {pluralnameof QueenConch} - what might it interact with?
$elseif ExperimentHasCritter(WhiteShrimp)
    {@kevin}    Well, we've added some {pluralnameof WhiteShrimp} - what might it interact with?
$else
    {@kevin}    Maybe we should add some {pluralnameof Copepod}?
$endif

:: helpDoExperiment.None
{@kevin}    We have a few new species - let's see which of them the turtle eats.
            We should be able to run an {h}Observation Tank{/h} experiment for that.
			
:: helpReturnExperiment
@trigger	ExperimentTankExited
@when		JobTaskTop(behavior)
@cutscene
{@kevin}	Maybe we should test turtles individually with each species to make sure we got all the eat rules.
			
:: completedExperiment
@trigger    JobTaskCompleted
@when       scene:name == "ExperimentV2", JobTaskTop(turtleModel)
@once
@cutscene
{@kevin}   Nice work! I think we know all the facts about what Turtles eat.
{@profCempaka}	Oh, are you ready to make the model?
$if !HasUpgrade(VisualModel)
	{@profCempaka}	I've unlocked a new room on your Ship, {map-name}the Modeling Lab{/map-name}.
	$call UnlockRoom("modelingRoom")
	$call UnlockRoom("Modeling")
	$call GiveUpgrade(VisualModel)
$endif
{@profCempaka}	Use the {map-name}Modeling Lab{/map-name} to visualize {h}site V{/h}'s food web.

// TURTLE MODEL

:: helpModeling
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", JobTaskTop(turtleModel)
@cutscene
{@player}   Any idea what to do here?
{@kevin}	When we make a food web, the first step is to import our facts into the model.

:: modelingStart
@trigger	VisualModelStarted
@when		!jobs:turtle-stability-visual-model.saved
@cutscene
{@kevin}	So this is the {nameof VisualModel}.
{@kevin}	From here you'll import any new facts you have about the ecosystem.
{@kevin}	If you have all the facts you need, you'll see a button to {h}Import Facts{/h}
{@kevin}	If you don't see the button, you may need to gather more data!
{@kevin}	You will only be able to {h}Save{/h} a model if your current job requires it and you are working in the correct ecosystem.
{@kevin}	Always double check that you have the right ecosystem pulled up!

:: modelingComplete
@trigger    JobTasksUpdated
@when		JobTaskTop(reportBack)
@once		
@cutscene
{@kevin}	Huh, turns out turtles eat a lot of things.
{@kevin}	Let's bring our model back to the {map-name}Office{/map-name}.
$set jobs:turtle-stability-visual-model.saved = true

// report back
				
:: helpReportBack
@trigger    RequestPartnerHelp
@when 		HasFact(ReefEdge.Model.TurtleVisual)
@boostScore 1
@cutscene
{@player} 	What should we be doing now?
{@kevin}	That should be everything we need for now. Let's report back to Professor Cempaka.
$if global:nav.shipRoom == "office"
	{@kevin}	Just like the previous jobs, you can report your findings using the {h}Computer{/h} in front of you.
$endif

// CATCH-ALL GUIDE TEXT

:: catchScanAll
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanAll)
@boostScore -5
@cutscene
{@kevin}    Head to Site V and scan the species there.

:: catchBehavior
@trigger    RequestPartnerHelp
@when 		JobTaskActive(behavior)
@boostScore -5
@cutscene
{@kevin}    Use the Observation Tank to find what the turtles eat.

:: catchTurtleModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(turtleModel)
@boostScore -5
@cutscene
{@kevin}    Head to the Modeling lab and make a Visual Model.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@kevin}    Take your Visual Model to {nameof profCempaka}.

// ARGUMENTATION

::argue.chooseClaim
@trigger    TryArgumentation

@when   !ArgueIsComplete(turtleStabilityArgue)
@cutscene
$call ArgueLoad(turtleStabilityArgue)
{@profCempaka} So, why are the turtles so well-fed here?
$choice .argue.coralMultipleFood; There are multiple food sources for the turtles.
$choose branch


::argue.coralMultipleFood
$if ArgueSetClaim(turtleStabilityArgueClaim, jobs.coral-turtle-stability.argue.claimLabel)
			$call ArgueFactSlot(ReefEdge.Model.TurtleVisual)
$endif
$call ArgueDisplayClaim()
$if ArgueIsFactSubmitted(ReefEdge.Model.TurtleVisual)
	$goto .argue.done
$else
	{@profCempaka}	That would make sense that a buffet is a big draw.
					What species are being consumed by turtles?
					Do you have a model of those connections?
	$goto .argue.chooseFacts
$endif
`

:: argue.chooseFacts
$if ArgueAllFactsCorrect()
    $goto .argue.done
$else
    $choice #argueFact; Present facts from AQOS
		$answer ReefEdge.Model.TurtleVisual, .argue.turtleModel
        $answer *, .argue.unrelated
    $choice .argue.giveUp; Let me get back to you
$endif

:: argue.turtleModel
$call ArgueComplete()
{@profCempaka}	Thank you! Eventually we may need more information to complete this food web.
$call CompleteJob()

:: argue.giveUp
{@profCempaka} OK. Get back to me when you're ready.



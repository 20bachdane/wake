#basePath   job.coral-casting-shade

:: start
@trigger    JobStarted
@cutscene

{@profCoral}	Thank you, Ollie. I'm becoming extremely concerned about Site R.
{@player}		How can I help, {nameof @profCoral}?
			    Want me to get in there and remove all that muck from the water?
{@profCoral}	The Sargassum? Oh, no. I suggest we slow down, Ollie. 
{@player} Slow down?? But... Professor, isn't this urgent? 
{@profCoral} Ay. AÃºn no tienes aletas y ya quieres nadar.
{@player} "You don't have flippers yet, and already you want to swim." 
		   My mom has a saying like that, too. Hers was about wings and flying, though.
		   Fine. What should I do first? 
{@profCoral}	I need you find out if sargassum is really what's causing the coral to be stressed. Can it block light?
$if HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
	{@profCoral}	Start by heading to the {nameof Experimentation} on your ship. 
$else
	$if HasEntity(Sargassum)
		{@profCoral}	Start by heading back to Site R to get the population history.
	$else 
		{@profCoral}    Start by heading back to Site R to scan the Sargassum.
	$endif
$endif

:: helpScanSargassum
@trigger    RequestPartnerHelp
@when 		scene:name == "CoralStation", !HasEntity(Sargassum)
@boostScore 1
@cutscene
{@player} 	What should I be doing, {nameof @guide}?
{@guide} 	You will need to return to Site R and scan the Sargassum. 

:: enterAndScannedSargassum
@trigger    SceneStart
@when       scene:name = "RS-2R", HasEntity(Sargassum)
@cutscene
@once
{@player} Okay. Let's see.
		  I've already scanned the Sargassum... but how do I get its Population History?
{@guide} You will need to find and scan the Population Probe!

:: scannedSargassum
@trigger    JobTasksUpdated
@when 		HasEntity(Sargassum), !HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
@once
@cutscene
{@player} Hmmm. The Sargassum is here, but how do I get it's Population History? 
{@guide}  You will need to find the Population Probe, O. 

:: helpScanProbe
@trigger    RequestPartnerHelp
@when 		scene:name == "CoralStation", !HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
@boostScore 1
@cutscene
{@player} 	What now, {nameof @guide}?
{@guide} 	I suggest returning to Site R and scanning the Population Probe.
		    That should give you the historical population data you need. 

:: helpScanProbeAtSite
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-2R", HasEntity(Sargassum), !HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
@boostScore 1
@cutscene
{@player} 	What should I do now, {nameof @guide}?
{@guide} 	Find and scan the Population Probe!

:: probeScanned
@trigger    JobTasksUpdated
@when		HasFact(SargassumCoveredReef.PopulationHistory.Sargassum), !HasFact(SargassumCoveredReef.WaterChemHistory.Light)
@cutscene
{@guide} Sufficient work, O!
{@player} Thanks, {nameof @guide}.
{@guide} There should be another probe with the area's Light History. You will need to scan that one, too. 

:: gotPopHistory
@trigger    JobTasksUpdated
@when 		HasFact(SargassumCoveredReef.PopulationHistory.Sargassum), HasFact(SargassumCoveredReef.WaterChemHistory.Light)
@cutscene
@once
{@guide} Adequate work, O!
		 Time to head back to the Meredith and run your experiment.


:: helpGoToExperiment
@trigger    RequestPartnerHelp
@when 		scene:name != "ExperimentV2", !HasFact(Sargassum.Consume.Light), HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
@cutscene
{@player} 	What should I do now, {nameof @guide}?
{@guide}	Head to {nameof Experimentation} and learn more about Sargassum.

:: helpAtExperiment
@trigger    RequestPartnerHelp
@when 		scene:name == "ExperimentV2", !HasFact(Sargassum.Consume.Light), JobTaskCompleted(popProbe), JobTaskCompleted(chemHistory)
@cutscene
{@player} 	Can I have some help here, {nameof @guide}?
{@guide}	Certainly, O.
			You need to determine if the Sargassum is truly to blame for the low light at Site R. 
{@guide}	Try putting some Sargassum in a Measurement Tank and see if the light levels change.

:: startExperiment
@trigger    SceneStart
@when       scene:name == "ExperimentV2", !HasFact(Sargassum.Consume.Light), JobTaskCompleted(popProbe), JobTaskCompleted(chemHistory)
@once
@cutscene
$if HasUpgrade(MeasurementTank)
	{@player} Okay, let's see... This sounds like a job for our Measurement Tank. 
$else
	{@player} Hmm. {nameof @guide}, I need to measure how the Sargassum affects the environment.
	{@guide} Yes, O!
	{@player} Um... how do we do that, exactly?
	{@guide} Ah. I see the problem. None of your tanks have this capability. 
			  I suggest stopping by the shop. They might have the upgrade you need.
$endif

::measurementTankSelectWater
@trigger	ExperimentTankViewed
@when		tankType == "Measurement", JobTaskCompleted(popProbe), JobTaskCompleted(chemHistory)
@once 
@cutscene
{@guide} Start by figuring out the Sargassum reproduction rate. 
{@guide} You need to match the conditions of Site R, so try selecting the of the Sargassum Covered Reef.

::measurementTankSelectSpecies
@trigger	ExperimentScreenViewed
@when		screenId == "measurement.organisms", JobTaskCompleted(popProbe), JobTaskCompleted(chemHistory)
@once 
@cutscene
{@guide} Now add only the Sargassum. You don't want other species affecting your results. 

::measurementTankSelectFeatures
@trigger	ExperimentScreenViewed
@when		screenId == "measurement.features", JobTaskCompleted(popProbe), JobTaskCompleted(chemHistory), !JobTaskCompleted(sargGrowthRate)
@once 
@cutscene
{@guide} You need to measure the reproduction rate.
{@player} Okay. So I need to, um... 
{@guide} Turn on the tank stabilizer and auto feeder.
{@player} Oh, yeah. Thanks, {nameof @guide}. 

:: experimentEnd
@trigger    JobTasksUpdated
@when 		HasFact(Sargassum.Reproduce), !jobs:coral-casting-shade.gotMeasurement
@once
@cutscene
$set    	jobs:coral-casting-shade.gotMeasurement = true
{@player} Wow. Those Sargasum grow fast.
{@guide}  Yes. They seem to reproduce quickly in their ideal environment. 

:: experimentEndOtherLight
@trigger    JobTasksUpdated
@when 		HasFact(Sargassum.Consume.Light), !jobs:coral-casting-shade.gotMeasurement
@once
@cutscene
$set    	jobs:coral-casting-shade.gotMeasurement = true
{@guide}	You will need these numerical facts to run simulations in the Modeling Lab.
{@guide}	Set up a few more experiments to determine the other rates you'll need to build a simulation model. 
{@guide}	Use different combinations of environments that stress an organism, the tank stabilizer and auto feeder. 

:: experimentEndOtherCoralGrowStressed
@trigger    JobTasksUpdated
@when 		HasFact(StaghornCoral.Reproduce.Stressed), !jobs:coral-casting-shade.gotMeasurement
@once
@cutscene
$set    	jobs:coral-casting-shade.gotMeasurement = true
{@guide}	You will need these numerical facts to run simulations in the Modeling Lab.
{@guide}	Set up a few more experiments to determine the other rates you'll need to build a simulation model. 
{@guide}	You can use different combinations of environments that stress an organism, the tank stabilizer and auto feeder. 

:: experimentEndOtherCoralGrow
@trigger    JobTasksUpdated
@when 		HasFact(StaghornCoral.Reproduce), !jobs:coral-casting-shade.gotMeasurement
@once
@cutscene
$set    	jobs:coral-casting-shade.gotMeasurement = true
{@guide}	You will need these numerical facts to run simulations in the Modeling Lab.
{@guide}	Set up a few more experiments to determine the other rates we need to build a simulation model. 
{@guide}	You can use different combinations of environments that stress an organism, the tank stabilizer and auto feeder. 

:: helpNeedMeasurementsInTankRoom
@trigger    RequestPartnerHelp
@when 		scene:name == "ExperimentV2", jobs:coral-casting-shade.gotMeasurement, !VisualModelStarted, !JobTaskTop(sargModel)
@cutscene
$if !HasFact(Sargassum.Reproduce)
	{@guide}	Looks like you still need to try more experiments.
	{@guide}	We'll need more information to build a model.
	{@guide}	Try measuring the Sargassum with both the tank stabilizer and auto feeder activated.
$else
	$if !HasFact(Sargassum.Consume.Light)
		{@guide}	Looks like you still need to try more experiments.
		{@guide}	We'll need more information to build a model.
		{@guide}	Try measuring the Sargassum with the tank stabilizer turned off and auto-feeder on.
	$else
		$if !HasFact(StaghornCoral.Reproduce.Stressed)
			{@guide}	Looks like you still need to try more experiments.
			{@guide}	We'll need more information to build a model.
			{@guide}	Try measuring the Staghorn Coral with both the tank stabilizer and auto feeder on.
		$else
			$if !HasFact(StaghornCoral.Reproduce)
				{@guide}	Looks like you still need to try more experiments.
				{@guide}	We'll need more information to build a model.
				{@guide}	Try measuring the Staghorn Coral in a different Environment.
			$else
				$if !HasFact(StaghornCoral.Consume.Light)
					{@guide}	Looks like you still need to try more experiments.
					{@guide}	We'll need more information to build a model.
					{@guide}	Try measuring the Staghorn Coral with the tank stabilizer turned off and auto-feeder on.
				$endif
			$endif
		$endif
	$endif
$endif

:: helpNeedMeasurementsOutsideTankRoom
@trigger    RequestPartnerHelp
@when 		scene:name != "ExperimentV2", jobs:coral-casting-shade.gotMeasurement, !VisualModelStarted, !JobTaskTop(sargModel)
@cutscene
{@guide} You still need more information about how Sargassum and Staghorn Coral behave.
{@guide} I suggest returning to the Experiment Lab.

:: allExperimentsDone
@trigger    JobTasksUpdated
@when 		JobTaskTop(sargModel)
@cutscene
@once
{@player} Whew. Okay, {nameof @guide}, what now? 
{@guide}	Head to the Modeling Lab. It's time to build your model!
{@player}	Okay. Let's get this done fast. I bet {nameof @profCoral} is getting stressed out waiting for us. 
{@guide} Perhaps we should determine his Stress Ranges.
{@player} Ha! {nameof @guide}, you made a joke. Que adorable. 

:: helpAllExperimentsDone
@trigger    RequestPartnerHelp
@when       JobTaskTop(sargModel)
@cutscene
{@guide}	Head over to the Modeling Lab.
{@guide}	You need to build a descriptive model of how Sargassum affects Staghorn Coral.


:: InterventionModelingSetup
@trigger	VisualModelStarted
@once
@cutscene
{@player} Okay, {nameof @guide}. What now? 
{@guide} 	Add the facts you just gathered, and then press Simulation.

::ModelHelp1
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual", !HasFact(SargassumCoveredReef.Model.LightPrediction)
@cutscene
{@player} 	Can you remind me what to do here, {nameof @guide}? 
{@guide}	Make sure to import the new facts you just learned, and then press "Simulate"


:: InterventionGetSync
@trigger	SimulationModelStarted
@once
@cutscene
{@guide} 	Now you need to match up the historical data again.

::ModelHelp2
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "model", !HasFact(SargassumCoveredReef.Model.LightPrediction)
@cutscene
{@player} 	What should I do next?
{@guide}	Drag the sliders on the left to match the historical data, and then press "Sync" to continue.
{@guide}	If you can't get the historical data to match, you might need to spend more time in the {nameof Experimentation} first.


:: InterventionModelSyncedImmediate
@trigger	SimulationSyncSuccess
@who        guide
@once
@chatter
{@guide} 	You did it! Acceptable work, O! 
{@player} Whew. Finally!! I don't know how {nameof @profCoral} is so patient all the time.
		  Though I guess working with turtles might help... they're not exactly in a hurry.

::ModelHelp3
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "predict", !HasFact(SargassumCoveredReef.Model.LightPrediction)
@cutscene
{@player} 	What should I do next?
{@guide}	The graph now shows a prediction of how the light levels change over time. 
{@guide}	Hit the "Save Prediction" button to move on.


:: InterventionModelingGraphComplete
@trigger	SimulationPredictSuccess
@once
@cutscene
{@player} I knew it. Looks like the Sargassum did cause the low light at Site R.
{@guide} Yes. It is as we suspected.
	     Time to report back to {nameof @profCoral}!

:: helpAfterModel
@trigger    RequestPartnerHelp
@when 		HasFact(SargassumCoveredReef.Model.LightPrediction)
@cutscene
{@player} 	What should we be doing next?
{@guide}	You need to report back to the {m}research station{/m} with your findings!

// CATCH-ALL GUIDE TEXT

:: catchScanSarg
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanSarg)
@boostScore -5
@cutscene
{@player} What now, {nameof @guide}?
{@guide}    Go to Site R and scan the Sargassum.

:: catchPopProbe
@trigger    RequestPartnerHelp
@when 		JobTaskActive(popProbe)
@boostScore -5
@cutscene
{@player} What should I do next, {nameof @guide}?
{@guide}    Find the population probe at Site R and scan it.

:: catchChemHistory
@trigger    RequestPartnerHelp
@when 		JobTaskActive(chemHistory)
@boostScore -5
@cutscene
{@player} What should I do next? 
{@guide}    Find the water chemistry probe at Site R and scan it.

:: catchSargGrowthRate
@trigger    RequestPartnerHelp
@when 		JobTaskActive(sargGrowthRate)
@boostScore -5
@cutscene
{@player} Okay, {nameof @guide}. What should I do now? 
{@guide}    Put the {nameof Sargassum} in the Measurement Tank and find its reproduction rate.
			You may have to adjust the Auto Feeder and {nameof WaterStabilizer} settings in order to obtain the appropriate measurements. 

:: catchSargLight
@trigger    RequestPartnerHelp
@when 		JobTaskActive(sargLight)
@boostScore -5
@cutscene
{@player} What should I do here, {nameof @guide}?
{@guide}    Put the {nameof Sargassum} in the Measurement Tank and find how much light it consumes.
			You may have to adjust the Auto Feeder and {nameof WaterStabilizer} settings to obtain the measurements you need.

:: catchCoralGrowthRate
@trigger    RequestPartnerHelp
@when 		JobTaskActive(coralGrowthRate)
@boostScore -5
@cutscene
{@player} What now, {nameof @guide}?
{@guide}    Put the {nameof StaghornCoral} in the Measurement Tank in an environment that does not stress it.

:: catchCoralGrowthStressed
@trigger    RequestPartnerHelp
@when 		JobTaskActive(coralGrowthStressed)
@boostScore -5
@cutscene
{@player} What should I do now? 
{@guide}    Put the {nameof StaghornCoral} in the Measurement Tank in an environment that stresses it.

:: catchSargModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(sargModel)
@boostScore -5
@cutscene
{@player} What's our next move, {nameof @guide}?
{@guide}    Create a prediction model using the Modeling Lab based on the {nameof Sargassum}.

:: catchSargArgue
@trigger    RequestPartnerHelp
@when 		JobTaskActive(sargArgue)
@boostScore -5
@cutscene
{@player} So, where do I need to go now? 
{@guide}    Return to the station to talk to {nameof @profCoral}!

// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(castingShadeArgue)
@cutscene
$call ArgueLoad(castingShadeArgue)
{@profCoral} Ah. Wonderful. And back much faster than I expected!
Do you have evidence that Sargassum is hurting the Staghorn Coral?
	$choice .argue.yesEvidence; Yes, I've got the evidence.
	$choice .argue.noEvidence; No, not yet.
	$choice .argue.disagree; I don't think Sargassum is the problem.
$choose branch

:: argue.introRevisit
{@profCoral} So, do you have the model showing Sargassum is hurting the Staghorn Coral?
	$choice .argue.yesEvidence; Yes, I've got the evidence.
	$choice .argue.noEvidence; No, not yet.
	$choice .argue.disagree; I don't think Sargassum is the problem.
$choose branch

:: argue.noEvidence
{@profCoral} Hmmm. I need evidence before I can move forward, O.
			 Let me know when you have findings for me to review. 

:: argue.disagree
{@profCoral} Well... considering the Sargassum covering Site R, I find that difficult to believe.
{@profCoral} It's clear the Sargassum is doing <i>something</i> to the ecosystem. 
{@profCoral} I just need you to confirm it with data.
$goto .argue.introRevisit

:: argue.yesEvidence
$if ArgueSetClaim(casting-shadeClaim, jobs.coral-casting-shade.argue.claimEvidence)
		$call ArgueFactSlot(SargassumCoveredReef.Model.LightPrediction)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctModelSupplied
		$answer incorrect, .argue.wrongModelSupplied
$choice .argue.giveUp; Let me get back to you.

:: argue.correctModelSupplied
$call ArgueComplete()
{@profCoral} Ah. This confirms our suspicions.
		     Thank you, O.
{@player}   So... now can I go rip out all that Sargassum?
{@profCoral} I don't think so, Ollie. You don't have the appropriate training.
			 Also... your mother is an old friend. She would be unhappy with me if I sent you out to clean up highly toxic, extremely pungent algae. 
{@player}   My mom isn't in charge here, Professor. She trusted me to go out on my own. 
{@profCoral} Still. Why don't you let me mull on it?
			There might be a better solution... 
$call CompleteJob()

:: argue.wrongModelSupplied
{@profCoral} That's not what I need, O. 
		      See if you have a model that proves the Sargassum is hurting the Staghorn Coral.
$call ArgueRejectIncorrect()
$goto .argue.yesEvidence

:: argue.giveUp
{@profCoral} No rush, Ollie. If a job's worth doing, it's worth doing well. Come back here when you're done. 

:: end
#basePath   job.coral-casting-shade

:: start
@trigger    JobStarted
@cutscene

$branch common.ringPhone

{@profCempaka}	Welcome back {player-name}! It's time for us to figure out if we should remove that pesky Sargassum.
{@player} 		Alright, so what do you want me to do?
{@profCempaka}	I need you find out if sargassum is really what's causing the coral to be stressed. Can it block light?
{@player} 		Got it, I'll get started on it now.
$if HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
	{@kevin}		{player-name}, let's start by heading to the {nameof Experimentation}!
$else
	{@kevin}		{player-name}, let's start by heading back to Site R to get the population history!
$endif
{@player} 		Good thinking, Kevin!

:: helpScanProbe
@trigger    RequestPartnerHelp
@when 		scene:name == "CoralStation", !HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
@boostScore 1
@cutscene
{@player} 	What should we be doing now?
{@kevin} 	First, let's head back to Site R and scan the population Probe.

:: helpGoToExperiment
@trigger    RequestPartnerHelp
@when 		scene:name != "ExperimentV2", !HasFact(Sargassum.Consume.Light)
@cutscene
{@player} 	What should we be doing now?
{@kevin}	Let's head over to the {nameof Experimentation} and try to learn more about Sargassum.

:: helpAtExperiment
@trigger    RequestPartnerHelp
@when 		scene:name == "ExperimentV2", !HasFact(Sargassum.Consume.Light)
@cutscene
{@player} 	How should this go again?
{@kevin}	We want to determine if Sargassum is really to blame for the low light at Site R.
{@kevin}	Try putting some Sargassum in a measurement tank and see if the light levels change.

:: startExperiment
@trigger    SceneStart
@when       scene:name == "ExperimentV2", !HasFact(Sargassum.Consume.Light)
@once
@cutscene
$if HasUpgrade(MeasurementTank)
	{@player}   Any tips of what we should to this time?
	{@kevin}  	We want to know if Sargassum really does lower light, so I think a measurement tank is our best bet!
$else
	{@profCempaka} Hmmmm... You need to measure effects of Sargassum. Your tanks can't do that. 
	{@profCempaka} I don't have any spares. Maybe check with my colleagues at other stations.
$endif


:: experimentEnd
@trigger    JobTasksUpdated
@when 		HasFact(Sargassum.Consume.Light)
@once
@cutscene
{@player}	Seems like we were right, Kevin!
{@kevin}	Great! Now let's see how this affects the coral by making a model.

:: helpAfterExperiment
@trigger    RequestPartnerHelp
@when 		HasFact(Sargassum.Consume.Light), scene:name != "Modeling", !HasFact(Model.SargLightPrediction)
@cutscene
{@player} 	What should we be doing next?
{@kevin}	We should take this new knowledge about Sargassum and make a model to know for sure what's causing the low light. 


:: InterventionModelingSetup
@trigger	VisualModelStarted
@once
@cutscene
{@kevin} 	Make sure you add the rule we just learned, and let's get started!

::ModelHelp1
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "universal", !HasFact(Model.SargLightPrediction)
@cutscene
{@player} 	What should I do next?
{@kevin}	Make sure to import the new rule we just learned, and then press "Simulate"


:: InterventionGetSync
@trigger	ModelGraphStarted
@once
@cutscene
{@kevin} 	Now, let's match up the historical data again.

::ModelHelp2
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "model", !HasFact(Model.SargLightPrediction)
@cutscene
{@player} 	What should I do next?
{@kevin}	Drag the sliders on the left to match the historical data, and then press "Sync" to continue.
{@kevin}	If you can't get the historical data to match, you might need to spend more time in the {nameof Experimentation} first.


:: InterventionModelSyncedImmediate
@trigger	ModelSyncedImmediate
@who        kevin
@once
@chatter
{@kevin} 	Looks good!!

::ModelHelp3
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "predict", !HasFact(Model.SargLightPrediction)
@cutscene
{@player} 	What should I do next?
{@kevin}	The graph now shows a prediction of how the light levels change over time. 
{@kevin}	Hit the "Save Prediction" button to move on.


:: InterventionModelingGraphComplete
@trigger	ModelCompleted
@once
@cutscene
{@kevin} 	Nicely done! Looks like Sargassum is to blame for the low light at Site R. Let's report this back to Professor Cempaka.

:: helpAfterModel
@trigger    RequestPartnerHelp
@when 		HasFact(Model.SargLightPrediction)
@cutscene
{@player} 	What should we be doing next?
{@kevin}	Let's report back to the {map-name}Office{/map-name} with our findings!

// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(saveBarrenArgue)
@cutscene
$call ArgueLoad(saveBarrenArgue)
{@profCempaka} Should I get my people ready to start yanking out the Sargassum?
	$choice .argue.yesYank; Yes, we need to remove the Sargassum.
	$choice .argue.noDontYank; No, the Sargassum can stay.
$choose branch

:: argue.introRevisit
{@profCempaka} So do we need to pull out all the Sargassum?
	$choice .argue.yesYankIntro; Yes, we need to remove the Sargassum.
	$choice .argue.noDontYankIntro; No, the Sargassum can stay.
$choose branch

:: argue.noDontYankIntro
{@profCempaka} Really? Well, that makes for less work. What is your evidence?
$goto .argue.noDontYank

:: argue.noDontYank
$if ArgueSetClaim(casting-shadeClaim, jobs.coral-casting-shade.argue.claimNoRemoval)
		$call ArgueFactSlot(W_WhaleFall.Oxygen)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.dontYankCorrect
		$answer incorrect, .argue.dontYankIncorrect
$choice .argue.giveUpNo; Let me get back to you

:: argue.dontYankCorrect
{@profCempaka} This doesn't make any sense.
$call ArgueCancelClaim()
$goto .argue.intro

:: argue.dontYankIncorrect
{@profCempaka} I don't think that's important here.
$call ArgueRejectIncorrect()
$goto .argue.noDontYank

:: argue.giveUpNo
$call ArgueCancelClaim()
{@profCempaka} Yeah this whole claim seems dubious.

:: argue.yesYankIntro
{@profCempaka} I knew it! I'm going to need evidence to get people behind this decision.
$goto .argue.yesYank

:: argue.yesYank
$if ArgueSetClaim(casting-shadeClaim, jobs.coral-casting-shade.argue.claimcasting-shade)
		$call ArgueFactSlot(SargassumCoveredReef.Light)
		$call ArgueFactSlot(Sargassum.Consume.Light)
		$call ArgueFactSlot(StaghornCoral.Light.Stressed)
		$call ArgueFactSlot(Model.SargLightPrediction)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.yankCorrect
		$answer incorrect, .argue.yankIncorrect
$choice .argue.giveUp; Let me get back to you

:: argue.yankIncorrect
$if !ArgueIsFactSubmitted(SargassumCoveredReef.Light)
	{@profCempaka} What are the light conditions at Site R?
	$goto .argue.yesYank
$endif
$if !ArgueIsFactSubmitted(Sargassum.Consume.Light)
	{@profCempaka} I see where you're going, but this doesn't help me understand whether the Sargassum is changing the light.
	$goto .argue.yesYank
$endif
$if !ArgueIsFactSubmitted(StaghornCoral.Light.Stressed)
	{@profCempaka} What light levels can the Coral tolerate?
	$goto .argue.yesYank
$endif
$if !ArgueIsFactSubmitted(Model.SargLightPrediction)
	{@profCempaka} Do you have any proof that the Sargassum is harmful to the coral?  Maybe you have a model?
	$goto .argue.yesYank
$endif

:: argue.yankCorrect
$call ArgueComplete()
{@profCempaka} Perfect! I was joking about getting people to remove it. That stuff STINKS! Maybe there's another solution...
$call CompleteJob()

:: argue.giveUp
{@profCempaka} OK. Get back to me when you're ready.

:: end
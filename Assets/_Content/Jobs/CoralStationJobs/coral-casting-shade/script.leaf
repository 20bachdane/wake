#basePath   job.coral-casting-shade

:: start
@trigger    JobStarted
@cutscene

{@profCoral}	Welcome back {player-name}! It's time for us to figure out if we should remove that pesky Sargassum.
{@player} 		So, what do you need me to do?
{@profCoral}	I need you find out if sargassum is really what's causing the coral to be stressed. Can it block light?
{@player} 		Got it, I'll get started on it now.
$if HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
	{@guide}		{player-name}, let's start by heading to the {nameof Experimentation}!
$else
	$if HasEntity(Sargassum)
		{@guide}		{player-name}, let's start by heading back to Site R to get the population history!
	$else 
		{@guide}		{player-name}, let's start by heading back to Site R to scan the Sargassum!
	$endif
$endif

:: helpScanSargassum
@trigger    RequestPartnerHelp
@when 		scene:name == "CoralStation", !HasEntity(Sargassum)
@boostScore 1
@cutscene
{@player} 	What should we be doing now?
{@guide} 	First, let's head back to Site R and scan some Sargassum.

:: enterAndScannedSargassum
@trigger    SceneStart
@when       scene:name = "RS-2R", HasEntity(Sargassum), !HasUpgrade(ProbeHacker)
@cutscene
@once
{@player} OK, I've already got the Sargassum, but how do we get the population history?
{@profCoral} 	Look around for a Population Probe.  You'll need this to download the data.
$call GiveUpgrade(ProbeHacker)
{@player} 		Thanks!

:: scannedSargassum
@trigger    JobTasksUpdated
@when 		HasEntity(Sargassum), !HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
@once
@cutscene
{@player} OK, I can see the Sargassum, but how do we get the population history?
{@profCoral} 	Look around for a Population Probe.  You'll need this to download the data.
$call GiveUpgrade(ProbeHacker)
{@player} 		Thanks!

:: helpScanProbe
@trigger    RequestPartnerHelp
@when 		scene:name == "CoralStation", !HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
@boostScore 1
@cutscene
{@player} 	What should we be doing now?
{@guide} 	First, let's head back to Site R and scan the population Probe.

:: helpScanProbeAtSite
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-2R", HasEntity(Sargassum), !HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
@boostScore 1
@cutscene
{@player} 	What should we be doing now?
{@guide} 	Find the Population Probe and try to scan it.

:: probeScanned
@trigger    JobTasksUpdated
@when		HasFact(SargassumCoveredReef.PopulationHistory.Sargassum), !HasFact(SargassumCoveredReef.WaterChemHistory.Light)
@cutscene
{@guide} There should be another probe around here with the Light History. Let's scan that one, too.

:: gotPopHistory
@trigger    JobTasksUpdated
@when 		HasFact(SargassumCoveredReef.PopulationHistory.Sargassum), HasFact(SargassumCoveredReef.WaterChemHistory.Light)
@cutscene
@once
{@player} I guess we need to do some Experimentation now, right?
{@guide} Right.  Let's get back to the ship.


:: helpGoToExperiment
@trigger    RequestPartnerHelp
@when 		scene:name != "ExperimentV2", !HasFact(Sargassum.Consume.Light), HasFact(SargassumCoveredReef.PopulationHistory.Sargassum)
@cutscene
{@player} 	What should we be doing now?
{@guide}	Let's head over to the {nameof Experimentation} and try to learn more about Sargassum.

:: helpAtExperiment
@trigger    RequestPartnerHelp
@when 		scene:name == "ExperimentV2", !HasFact(Sargassum.Consume.Light), JobTaskCompleted(popProbe), JobTaskCompleted(chemHistory)
@cutscene
{@player} 	How should this go again?
{@guide}	We want to determine if Sargassum is really to blame for the low light at Site R.
{@guide}	Try putting some Sargassum in a measurement tank and see if the light levels change.

:: startExperiment
@trigger    SceneStart
@when       scene:name == "ExperimentV2", !HasFact(Sargassum.Consume.Light), JobTaskCompleted(popProbe), JobTaskCompleted(chemHistory)
@once
@cutscene
$if HasUpgrade(MeasurementTank)
	{@player}   Any tips of what we should to this time?
	{@guide}  	We want to know if Sargassum really does lower light, so I think a measurement tank is our best bet!
$else
	{@profCoral} Hmmmm... You need to measure effects of Sargassum. Your tanks can't do that. 
	//{@profCoral} I don't have any spares. Maybe check with my colleagues at other stations.
	// TODO: When the bayou is ready, restore to the above ^^
	{@profCoral} I happen to have a spare measurement tank.  Here you go!
	$call GiveUpgrade(MeasurementTank)
	$call GiveUpgrade(WaterStabilizer)
	{@profCoral} Why don't you focus on the Measurement Tank and I'll show you how it works.
$endif

::measurementTankSelectWater
@trigger	ExperimentTankViewed
@when		tankType == "Measurement", JobTaskCompleted(popProbe), JobTaskCompleted(chemHistory)
@once 
@cutscene
{@profCoral} Let's start by figuring out the Sargassum reproduction rate.
{@profCoral} We need to match the conditions of the site we're interested in.
{@profCoral} Let's select the water of the Sargassum Covered Reef.

::measurementTankSelectSpecies
@trigger	ExperimentScreenViewed
@when		screenId == "measurement.organisms", JobTaskCompleted(popProbe), JobTaskCompleted(chemHistory)
@once 
@cutscene
{@profCoral} Now add only the Sargassum. We don't want the species interacting with each other.

::measurementTankSelectFeatures
@trigger	ExperimentScreenViewed
@when		screenId == "measurement.features", JobTaskCompleted(popProbe), JobTaskCompleted(chemHistory)
@once 
@cutscene
{@profCoral} Since we want to measure the reproduction rate, turn on the tank stabilizer and auto feeder.

:: experimentEnd
@trigger    JobTasksUpdated
@when 		HasFact(Sargassum.Reproduce), !jobs:coral-casting-shade.gotMeasurement
@once
@cutscene
$set    	jobs:coral-casting-shade.gotMeasurement = true
{@guide}	Great! You measured how quickly Sargassum grow in an ideal environment. 

:: experimentEndOtherLight
@trigger    JobTasksUpdated
@when 		HasFact(Sargassum.Consume.Light), !jobs:coral-casting-shade.gotMeasurement
@once
@cutscene
$set    	jobs:coral-casting-shade.gotMeasurement = true
{@guide}	OK! Looks like you're really experimenting!
{@guide}	These numerical facts are what's required to run simulations in the Modeling Lab.
{@guide}	Set up a few more experiments to determine the other rates we need to build a simulation model. 
{@guide}	You can use different combinations of environments that stress an organism, the tank stabilizer and auto feeder. 

:: experimentEndOtherCoralGrowStressed
@trigger    JobTasksUpdated
@when 		HasFact(StaghornCoral.Reproduce.Stressed), !jobs:coral-casting-shade.gotMeasurement
@once
@cutscene
$set    	jobs:coral-casting-shade.gotMeasurement = true
{@guide}	OK! Looks like you're really experimenting!
{@guide}	These numerical facts are what's required to run simulations in the Modeling Lab.
{@guide}	Set up a few more experiments to determine the other rates we need to build a simulation model. 
{@guide}	You can use different combinations of environments that stress an organism, the tank stabilizer and auto feeder. 

:: experimentEndOtherCoralGrow
@trigger    JobTasksUpdated
@when 		HasFact(StaghornCoral.Reproduce), !jobs:coral-casting-shade.gotMeasurement
@once
@cutscene
$set    	jobs:coral-casting-shade.gotMeasurement = true
{@guide}	OK! Looks like you're really experimenting!
{@guide}	These numerical facts are what's required to run simulations in the Modeling Lab.
{@guide}	Set up a few more experiments to determine the other rates we need to build a simulation model. 
{@guide}	You can use different combinations of environments that stress an organism, the tank stabilizer and auto feeder. 

:: helpNeedMeasurementsInTankRoom
@trigger    RequestPartnerHelp
@when 		scene:name == "ExperimentV2", jobs:coral-casting-shade.gotMeasurement, !VisualModelStarted
@cutscene
$if !HasFact(Sargassum.Reproduce)
	{@guide}	Looks like you still need to try more experiments.
	{@guide}	We'll need more information to build a model.
	{@guide}	Try measuring the Sargassum with both the tank stabilizer and auto feeder activated.
$else
	$if !HasFact(Sargassum.Consume.Light)
		{@guide}	Looks like you still need to try more experiments.
		{@guide}	We'll need more information to build a model.
		{@guide}	Try measuring the Sargassum with the tank stabilizer turned off and auto-feeder on.
	$else
		$if !HasFact(StaghornCoral.Reproduce.Stressed)
			{@guide}	Looks like you still need to try more experiments.
			{@guide}	We'll need more information to build a model.
			{@guide}	Try measuring the Staghorn Coral with both the tank stabilizer and auto feeder on.
		$else
			$if !HasFact(StaghornCoral.Reproduce)
				{@guide}	Looks like you still need to try more experiments.
				{@guide}	We'll need more information to build a model.
				{@guide}	Try measuring the Staghorn Coral in a different Environment.
			$endif
		$endif
	$endif
$endif

:: helpNeedMeasurementsOutsideTankRoom
@trigger    RequestPartnerHelp
@when 		scene:name != "ExperimentV2", jobs:coral-casting-shade.gotMeasurement, !VisualModelStarted
@cutscene
{@guide} We still need more information about how Sargassum and Staghorn Coral behave.
{@guide} Go back to the Experiment Lab.

:: allExperimentsDone
@trigger    JobTasksUpdated
@when HasFact(Sargassum.Reproduce), HasFact(Sargassum.Consume.Light), HasFact(StaghornCoral.Reproduce.Stressed), HasFact(StaghornCoral.Reproduce)
@cutscene
@once
{@guide}	I think we're finally ready to build a model!

:: helpAllExperimentsDone
@trigger    RequestPartnerHelp
@when HasFact(Sargassum.Reproduce), HasFact(Sargassum.Consume.Light), HasFact(StaghornCoral.Reproduce.Stressed), HasFact(StaghornCoral.Reproduce)
@cutscene
{@guide}	Head over to the Modeling Lab.
{@guide}	We need to build a descriptive model of how Sargassum affects Staghorn Coral.


:: InterventionModelingSetup
@trigger	VisualModelStarted
@once
@cutscene
{@guide} 	Make sure you add the facts we just learned, and let's get started!

::ModelHelp1
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "visual", !HasFact(SargassumCoveredReef.Model.LightPrediction)
@cutscene
{@player} 	What should I do next?
{@guide}	Make sure to import the new facts we just learned, and then press "Simulate"


:: InterventionGetSync
@trigger	SimulationModelStarted
@once
@cutscene
{@guide} 	Now, let's match up the historical data again.

::ModelHelp2
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "model", !HasFact(SargassumCoveredReef.Model.LightPrediction)
@cutscene
{@player} 	What should I do next?
{@guide}	Drag the sliders on the left to match the historical data, and then press "Sync" to continue.
{@guide}	If you can't get the historical data to match, you might need to spend more time in the {nameof Experimentation} first.


:: InterventionModelSyncedImmediate
@trigger	SimulationSyncSuccess
@who        guide
@once
@chatter
{@guide} 	Looks good!!

::ModelHelp3
@trigger    RequestPartnerHelp
@when 		scene:name == "Modeling", modeling:phase == "predict", !HasFact(SargassumCoveredReef.Model.LightPrediction)
@cutscene
{@player} 	What should I do next?
{@guide}	The graph now shows a prediction of how the light levels change over time. 
{@guide}	Hit the "Save Prediction" button to move on.


:: InterventionModelingGraphComplete
@trigger	SimulationPredictSuccess
@once
@cutscene
{@guide} 	Nicely done! Looks like Sargassum is to blame for the low light at Site R. Let's report this back to {nameof @profCoral}.

:: helpAfterModel
@trigger    RequestPartnerHelp
@when 		HasFact(SargassumCoveredReef.Model.LightPrediction)
@cutscene
{@player} 	What should we be doing next?
{@guide}	Let's report back to the {m}research station{/m} with our findings!

// CATCH-ALL GUIDE TEXT

:: catchScanSarg
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanSarg)
@boostScore -5
@cutscene
{@guide}    Go to Site R and scan the Sargassum.

:: catchPopProbe
@trigger    RequestPartnerHelp
@when 		JobTaskActive(popProbe)
@boostScore -5
@cutscene
{@guide}    Find the population probe at Site R and scan it.

:: catchChemHistory
@trigger    RequestPartnerHelp
@when 		JobTaskActive(chemHistory)
@boostScore -5
@cutscene
{@guide}    Find the water chemistry probe at Site R and scan it.

:: catchSargGrowthRate
@trigger    RequestPartnerHelp
@when 		JobTaskActive(sargGrowthRate)
@boostScore -5
@cutscene
{@guide}    Put the {nameof Sargassum} in the Measurement Tank and find its reproduction rate.
			You may have to mess with the Auto Feeder and {nameof WaterStabilizer} settings to measure what you want.

:: catchSargLight
@trigger    RequestPartnerHelp
@when 		JobTaskActive(sargLight)
@boostScore -5
@cutscene
{@guide}    Put the {nameof Sargassum} in the Measurement Tank and find how much light it consumes.
			You may have to mess with the Auto Feeder and {nameof WaterStabilizer} settings to measure what you want.

:: catchCoralGrowthRate
@trigger    RequestPartnerHelp
@when 		JobTaskActive(coralGrowthRate)
@boostScore -5
@cutscene
{@guide}    Put the {nameof StaghornCoral} in the Measurement Tank in an environment that does not stress it.

:: catchCoralGrowthStressed
@trigger    RequestPartnerHelp
@when 		JobTaskActive(coralGrowthStressed)
@boostScore -5
@cutscene
{@guide}    Put the {nameof StaghornCoral} in the Measurement Tank in an environment that stresses it.

:: catchSargModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(sargModel)
@boostScore -5
@cutscene
{@guide}    Create a prediction model using the Modeling Lab based on the {nameof Sargassum}.

:: catchSargArgue
@trigger    RequestPartnerHelp
@when 		JobTaskActive(sargArgue)
@boostScore -5
@cutscene
{@guide}    Return to the station to talk to {nameof @profCoral}.

// ARGUMENTATION

:: argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(castingShadeArgue)
@cutscene
$call ArgueLoad(castingShadeArgue)
{@profCoral} Have you got evidence that Sargassum is hurting the Staghorn Coral?
	$choice .argue.yesEvidence; Yes, I've got the evidence.
	$choice .argue.noEvidence; No, I don't have it, yet.
	$choice .argue.disagree; I disagree that Sargassum is the problem.
$choose branch

:: argue.introRevisit
{@profCoral} So, do you have the model showing Sargassum is hurting the Staghorn Coral?
	$choice .argue.yesEvidence; Yes, I've got the evidence.
	$choice .argue.noEvidence; No, I don't have it, yet.
	$choice .argue.disagree; I disagree that Sargassum is the problem.
$choose branch

:: argue.noEvidence
{@profCoral} Let me know when you have something for me to review.

:: argue.disagree
{@profCoral} Have you been down to Site R?  It's pretty obvious.
{@profCoral} I just need you to confirm it numerically.
$goto .argue.introRevisit

:: argue.yesEvidence
$if ArgueSetClaim(casting-shadeClaim, jobs.coral-casting-shade.argue.claimEvidence)
		$call ArgueFactSlot(SargassumCoveredReef.Model.LightPrediction)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctModelSupplied
		$answer incorrect, .argue.wrongModelSupplied
$choice .argue.giveUp; Let me get back to you

:: argue.correctModelSupplied
$call ArgueComplete()
{@profCoral} Thank you! 
{@profCoral} We need to reduce the Sargassum population, but yanking it out would be STINKY.
{@profCoral} Maybe there's another solution...
$call CompleteJob()

:: argue.wrongModelSupplied
{@profCoral} If I'm going to convince people to pull the Sargassum, I need a model.
{@profCoral} It should show that Sargassum is hurting the Staghorn Coral.
$call ArgueRejectIncorrect()
$goto .argue.yesEvidence

:: argue.giveUp
{@profCoral} OK. Get back to me when you're ready.

:: end
# basePath job.arctic-salmon-monitoring

// INTRO
:: start
@trigger    JobStarted
@cutscene
{@profSci} Thank you, Ollie! No one ever offers to help with the salmon counts. 
{@player}  But... I don't get it. 
		   It looks like you already counted the current salmon populations.
{@profSci}  Sure, once. That means it's time to count again.
{@player}   Â¿En serio? You count them twice, every time? 
{@profSci}	Yep. My work requires detailed, long-term monitoring of the salmon. It's fascinating! 
			I'll take care of it, if you're too busy--I'm used to handling things myself.	
{@player}	Nah, I've got this.
			We do counts like this all the time back at my mom's station. I'm basically an expert.
{@profSci}  Oh, that's perfect! Let me know what you find! 

:: countsComplete
@trigger	JobTaskCompleted
@when		JobTaskTop(reportBack)
@once
@cutscene
{@player} I can't believe {@profArctic} does this by herself every time.
		  She must really care about the salmon! 
	  	What should we do next, {nameof @guide}? 
{@guide}  You need to verify that your counts match the researchers' records!

// CATCH-ALL GUIDE TEXT

:: catchCountSalmon
@trigger	RequestPartnerHelp
@when		JobTaskTop(countSalmon)
@boostScore -5
@cutscene
{@player} What's next, {nameof @guide}?
{@guide}  You need to count the salmon populations!
	      Turn on your Population Count Mode when you're close to the salmon in the Frosted Sea.

:: catchReportBack
@trigger	RequestPartnerHelp
@when		JobTaskTop(reportBack)
@boostScore -5
@cutscene
{@player} What should we do now, {nameof @guide}?
{@guide}  It's time to report back to {nameof @profArctic}!

// ARGUMENTATION

:: argue.groundwork.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(argueCounts)
@cutscene
$branch .argue.mainQuestion

:: argue.mainQuestion
{@profArctic} Beautiful out there, isn't it?
			 Did you finish counting the salmon? What did you find?
$call ArgueLoad(argueCounts)
$if ArgueSetClaim(argueCountsClaim, jobs.arctic-salmon-monitoring.argue.claimLabel)
		$call ArgueFactSlot(Z_OpenOcean.Population.ChinookSalmon)
$endif
$call ArgueDisplayClaim()
$branch .argue.presentFacts

:: argue.presentFacts
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctFacts
		$answer incorrect, .argue.incorrectFacts
$choice .argue.giveUp; Let me get back to you

:: argue.correctFacts
$call ArgueComplete()
{@profArctic}  Oh, this is great! Looks like the counts are accurate.
			   I like to keep a close eye on our salmon populations here. 
{@player} I totally get it. My mom is the same way with the Kelp and Otters back home.
		  Do you need any more help?
{@profArctic}   Well... yes. Always.
				But outsiders usually leave this place as fast as possible.
				I mean, it is remote and extreme. And super cold. 
{@player}		That's true. But I think I kind of love it.
{@profArctic}   Well, if you're gonna be helping out around here, I'll need to send you some preliminary data.
				Here you go. Look for it in your AQOS!
$call GiveFact(ChinookSalmon.Eats.Diatoms)
$call UpgradeFact(ChinookSalmon.Eats.Diatoms)
$call GiveFact(ChinookSalmon.Reproduce)
$call UpgradeFact(ChinookSalmon.Reproduce)
$call GiveFact(ChinookSalmon.Reproduce)
$call GiveFact(Fishers.Eats.ChinookSalmon)
$call UpgradeFact(Fishers.Eats.ChinookSalmon)
$call CompleteJob()

:: argue.incorrectFacts
{@profArctic}	Um. This doesn't look like a salmon population count. Am I missing something? 
$call ArgueClearFacts()
$call ArgueUnload()
$branch .argue.mainQuestion

:: argue.giveUp
{@profCoral}	No problem, Ollie. Just let me know when you're ready. 
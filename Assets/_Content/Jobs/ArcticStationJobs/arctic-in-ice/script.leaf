# basePath job.arctic-in-Ice

// INTRO
:: start
@trigger    JobStarted
@cutscene
$set jobs:arctic-in-ice.triedScan = false

{@profArctic} It's been the weirdest thing.
              I've noticed cod out there, just sort of hanging around the ice shelf.
{@player}     So?
{@profArctic} There are never cod by the ice shelf!
               I know every inch of this place. Something must've changed.
              I need you to figure out what the cod are up to out there. 
{@player}   Okay. Any idea where I should start?
$if JobTaskTop(scanAlgae)
    {@profArctic} I'd suggest heading out to the ice shelf and seeing what you can find.   
                  Maybe something's luring the cod in. 
$elseif JobTaskTop(countAlgae)
    {@profArctic}  Hmm... you'll probably need to collect a population sample of {nameof ArcticCod} at the {m}Frosted Sea{/m}.
$else
    {@profArctic} I'd suggest checking your AQOS for all the {{h}species near the ice shelf{/h}.
    {@profArctic} You've already collected a lot of data. Maybe you'll find a clue there.  
$endif
{@player}Got it. Thanks, {nameof @profArctic}.

// SCANNING ICE ALGAE

:: tryScanAlgaeNewY
@trigger    ScannedNewObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4Y"
@cutscene
{@guide}  You will need a microscope in order to fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeY
@trigger    ScannedObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4Y"
@cutscene
{@guide}    You will need a microscope in order to fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeNewMicroscopeY
@trigger    ScannedNewObject
@when       scanId == "tools.microscope", scene:name == "RS-4Y"
@cutscene
{@guide}   Use your microscope to scan this organism. 
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeMicroscopeY
@trigger    ScannedObject
@when       scanId == "tools.microscope",  scene:name == "RS-4Y"
@cutscene
{@guide}    Use your microscope to scan this organism. 
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeNewX
@trigger    ScannedNewObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4X"
@cutscene
{@guide}    You will need a microscope in order to fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeX
@trigger    ScannedObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4X"
@cutscene
{@guide}    You will need a microscope in order to fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeNewMicroscopeX
@trigger    ScannedNewObject
@when       scanId == "tools.microscope", scene:name == "RS-4X"
@cutscene
{@guide}    Use your microscope to scan this organism. 
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeMicroscopeX
@trigger    ScannedObject
@when       scanId == "tools.microscope",  scene:name == "RS-4X"
@cutscene
{@guide}    Use your microscope to scan this organism. 
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeNewZ
@trigger    ScannedNewObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4Z"
@cutscene
{@guide}    You will need a microscope in order to fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeZ
@trigger    ScannedObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4Z"
@cutscene
{@guide}    You will need a microscope in order to fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeNewMicroscopeZ
@trigger    ScannedNewObject
@when       scanId == "tools.microscope", scene:name == "RS-4Z"
@cutscene
{@guide}    Use your microscope to scan this organism. 
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeMicroscopeZ
@trigger    ScannedObject
@when       scanId == "tools.microscope",  scene:name == "RS-4Z"
@cutscene
{@guide}    Use your microscope to scan this organism. 
$set jobs:arctic-in-ice.triedScan = true

// JOB PROGRESSION

:: scannedAlgae
@trigger    JobTasksUpdated
@when       JobTaskTop(countAlgae)
@once
@cutscene
{@player} I think we've got something here, {nameof @guide}!
{@guide} Yes. Ice algae... a new species! 
         I would suggest counting them before you proceed with experimentation.

:: countedAlgae
@trigger    JobTasksUpdated
@when       JobTaskTop(observeEat)
@once
@cutscene
{@player} Wow. There's a ton of {nameof IceAlgae} out here, {nameof @guide}.
          Maybe the algae drew the cod in toward the ice shelf!
{@guide}  Ah! So cod are known to eat {nameof IceAlgae}?
{@player} I... have no idea. But that's what the Observation Tank is for.

:: observedEatRules
@trigger    JobTasksUpdated
@when       JobTaskTop(reportback)
@once
@cutscene
{@player} I think this explains what the cod are doing out there.
{@guide}  Yes. Time to report back to {nameof @profArtic}!

:: helpScanWithoutMicroscope
@trigger    RequestPartnerHelp
@when       JobTaskTop(scanAlgae), !HasUpgrade(Microscope), jobs:arctic-in-ice.triedScan
@cutscene
{@player}  What now, {nameof @guide}?
{@guide}    You will need to obtain a microscope before you can make any progress here. 

:: helpScanWithMicroscope
@trigger    RequestPartnerHelp
@when       JobTaskTop(scanAlgae), HasUpgrade(Microscope), jobs:arctic-in-ice.triedScan
@cutscene
{@player} What should I do next, {nameof @guide}?
{@guide}  Now that you have a microscope, you should take another look at that organism you couldn't scan.

// CATCH-ALL GUIDE TEXT

:: catchScanAlgae
@trigger	RequestPartnerHelp
@when		JobTaskTop(scanAlgae)
@boostScore -5
@cutscene
{@player}   What should I be doing, {nameof @guide}?
{@guide}    We must see if you can find what is attracting the {nameof ArcticCod} to the ice shelf

:: catchCountAlgae
@trigger	RequestPartnerHelp
@when		JobTaskTop(countAlgae)
@boostScore -5
@cutscene
{@player}  What should we do now, {nameof @guide}?
{@guide}	 You still need to count the Ice Algae. Make sure to use your microscope!

:: catchObserveEat
@trigger	RequestPartnerHelp
@when		JobTaskTop(observeEat)
@boostScore -5
@cutscene
{@player} Okay, {nameof @guide}. What's our next step?
{@guide}  Head to your Observation Tank. You'll need to obsesrve how the Arctic Cod and Ice Algae interact.

:: catchReportBack
@trigger	RequestPartnerHelp
@when		JobTaskTop(reportBack)
@boostScore -5
@cutscene
{@player} Where should we go now, {nameof @guide}?
{@guide}  It's time to report back and tell {nameof profArctic} what you discovered!

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when       !ArgueIsComplete(inIceArguePop)
@cutscene
$if ArgueIsComplete(inIceArgueEat)
    $branch .argue.alreadyDiscussed
$else
    $call ArgueLoad(inIceArgueEat)
    $if ArgueSetClaim(Claim, jobs.arctic-in-ice.argue.claimLabelEat)
        $call ArgueFactSlot(ArcticCod.Eats.IceAlgae)
    $endif
    $call ArgueDisplayClaim()
    {@profArctic}  I'm dying to know! Did you figure out why those cod are hanging out near the ice shelf? 
    $branch .argue.chooseFactsEat
$endif

// Eat branch

:: argue.chooseFactsEat
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.correctEat
    $answer *, .argue.unrelatedEat
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.unrelatedEat
{@profArctic}   I'm not seeing how that relates.
$call ArgueRejectIncorrect()
$branch .argue.chooseFactsEat

:: argue.notSure
{@profArctic}   Okay, Ollie. Let me know when you're ready. 

:: argue.correctEat
{@profArctic}   Interesting.
$call ArgueComplete()
$call ArgueCancelClaim()
$branch .argue.startPop

// Population Branch

:: argue.alreadyDiscussed
{@profArctic}  Last time, you said the cod might've been drawn in by the Ice Algae.
$branch .argue.startPop

:: argue.startPop
$call ArgueLoad(inIceArguePop)
$if ArgueSetClaim(Claim2, jobs.arctic-in-ice.argue.claimLabelPop)
    $call ArgueFactSlot(Z_OpenOcean.Population.IceAlgae)
$endif
$branch .argue.popQuery

:: argue.popQuery
{@profArctic}   Is there a lot of ice algae in the shelf? How much did you count?
$branch .argue.chooseFactsPop

:: argue.chooseFactsPop
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.correctPop
    $answer *, .argue.unrelatedPop
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.unrelatedPop
{@profArctic}   Um... sorry, Ollie, I'm not seeing how that's relevant. 
$call ArgueRejectIncorrect()
$branch .argue.popQuery

:: argue.correctPop
$call ArgueComplete()
{@profArctic}  Nice work, Ollie!
               That's definitely enough algae to draw them in.
               Hmmm. I wonder if the Salmon interact with the Cod, too...
               This could really help with that salmon summering model I've been stuck on!
{@player}   Ooh, sounds intriguing... anything I can help with?
{@profArctic} Seriously, Ollie, I think your help is my good luck charm.
              Check the job board soon. I'll make sure it's updated! 
$call CompleteJob()

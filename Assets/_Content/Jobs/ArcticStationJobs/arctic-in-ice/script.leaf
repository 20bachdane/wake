# basePath job.arctic-in-Ice

// INTRO
:: start
@trigger    JobStarted
@cutscene
$set jobs:arctic-in-ice.triedScan = false

$if JobTaskTop(scanAlgae)
    {@guide}    Time to discover the inner motivations of {nameof ArcticCod}.
$elseif JobTaskTop(countAlgae)
    {@guide}    Let's collect a population sample of {nameof ArcticCod} at the {m}Frosted Sea{/m}.
$else
    {@player}   {nameof @guide} pull all our data {h}critters near the ice shelf{/h}.
    {@guide}    Certainly O! Already have a theory?    
    {@player}   I think it could be one of the species we've already scanned near the shelf...
$endif

// SCANNING ICE ALGAE

:: tryScanAlgaeNewY
@trigger    ScannedNewObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4Y"
@cutscene
{@guide}    We may need to get a microscope before we can fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeY
@trigger    ScannedObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4Y"
@cutscene
{@guide}    We may need to get a microscope before we can fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeNewMicroscopeY
@trigger    ScannedNewObject
@when       scanId == "tools.microscope", scene:name == "RS-4Y"
@cutscene
{@guide}    We should be able to use our microscope to scan this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeMicroscopeY
@trigger    ScannedObject
@when       scanId == "tools.microscope",  scene:name == "RS-4Y"
@cutscene
{@guide}    We should be able to use our microscope to scan this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeNewX
@trigger    ScannedNewObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4X"
@cutscene
{@guide}    We may need to get a microscope before we can fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeX
@trigger    ScannedObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4X"
@cutscene
{@guide}    We may need to get a microscope before we can fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeNewMicroscopeX
@trigger    ScannedNewObject
@when       scanId == "tools.microscope", scene:name == "RS-4X"
@cutscene
{@guide}    We should be able to use our microscope to scan this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeMicroscopeX
@trigger    ScannedObject
@when       scanId == "tools.microscope",  scene:name == "RS-4X"
@cutscene
{@guide}    We should be able to use our microscope to scan this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeNewZ
@trigger    ScannedNewObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4Z"
@cutscene
{@guide}    We may need to get a microscope before we can fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeZ
@trigger    ScannedObject
@when       scanId == "tools.microscope.disabled", scene:name == "RS-4Z"
@cutscene
{@guide}    We may need to get a microscope before we can fully investigate this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeNewMicroscopeZ
@trigger    ScannedNewObject
@when       scanId == "tools.microscope", scene:name == "RS-4Z"
@cutscene
{@guide}    We should be able to use our microscope to scan this organism.
$set jobs:arctic-in-ice.triedScan = true

:: tryScanAlgaeMicroscopeZ
@trigger    ScannedObject
@when       scanId == "tools.microscope",  scene:name == "RS-4Z"
@cutscene
{@guide}    We should be able to use our microscope to scan this organism.
$set jobs:arctic-in-ice.triedScan = true

// JOB PROGRESSION

:: scannedAlgae
@trigger    JobTasksUpdated
@when       JobTaskTop(countAlgae)
@once
@cutscene
{@player}   {nameof IceAlgae}! That could be the answer we were looking for...
{@guide}    Let us conduct some experiments to investigate further.

:: countedAlgae
@trigger    JobTasksUpdated
@when       JobTaskTop(observeEat)
@once
@cutscene
{@guide}    Let's place some Cod in the Observation Tank with this Ice Algae and see if there is any connection.

:: observedEatRules
@trigger    JobTasksUpdated
@when       JobTaskTop(reportback)
@once
@cutscene
{@guide}    The researchers will be glad to learn what we found. Well, maybe.

:: helpScanWithoutMicroscope
@trigger    RequestPartnerHelp
@when       JobTaskTop(scanAlgae), !HasUpgrade(Microscope), jobs:arctic-in-ice.triedScan
@cutscene
{@guide}    We'll need to pick up a microscope before we can make any headway on learning about the Cod.


:: helpScanWithMicroscope
@trigger    RequestPartnerHelp
@when       JobTaskTop(scanAlgae), HasUpgrade(Microscope), jobs:arctic-in-ice.triedScan
@cutscene
{@guide}    Now that you've got the microscope, let's take another look at that organism you couldn't scan.

// CATCH-ALL GUIDE TEXT

:: catchScanAlgae
@trigger	RequestPartnerHelp
@when		JobTaskTop(scanAlgae)
@boostScore -5
@cutscene
{@guide}     Let's find the Ice Algae in the Frosted Sea.

:: catchCountAlgae
@trigger	RequestPartnerHelp
@when		JobTaskTop(countAlgae)
@boostScore -5
@cutscene
{@guide}	 Don't forget to count the Ice Algae too. Make sure you're using your microscope.

:: catchObserveEat
@trigger	RequestPartnerHelp
@when		JobTaskTop(observeEat)
@boostScore -5
@cutscene
{@guide}	 Head to the Observation Tank and stick some Arctic Cod and Ice Algae in there.

:: catchReportBack
@trigger	RequestPartnerHelp
@when		JobTaskTop(reportBack)
@boostScore -5
@cutscene
{@guide}	 Nothing more for us to learn about the Cod, it's time to show the researchers what we found.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when       !ArgueIsComplete(inIceArguePop)
@cutscene
$if ArgueIsComplete(inIceArgueEat)
    $branch .argue.alreadyDiscussed
$else
    $call ArgueLoad(inIceArgueEat)
    $if ArgueSetClaim(Claim, jobs.arctic-in-ice.argue.claimLabelEat)
        $call ArgueFactSlot(ArcticCod.Eats.IceAlgae)
    $endif
    $call ArgueDisplayClaim()
    {@profArctic}   Did you figure out what the cod are doing near that ice shelf?
    $branch .argue.chooseFactsEat
$endif

// Eat branch

:: argue.chooseFactsEat
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.correctEat
    $answer *, .argue.unrelatedEat
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.unrelatedEat
{@profArctic}   I'm not seeing how that relates.
$call ArgueRejectIncorrect()
$branch .argue.chooseFactsEat

:: argue.notSure
{@profArctic}   Okay. Get back to me when you're ready.

:: argue.correctEat
{@profArctic}   Interesting.
$call ArgueComplete()
$call ArgueCancelClaim()
$branch .argue.startPop

// Population Branch

:: argue.alreadyDiscussed
{@profArctic}   Last time we spoke, you told me the cod were hanging out at the ice shelf because they eat the Ice Algae there.
$branch .argue.startPop

:: argue.startPop
$call ArgueLoad(inIceArguePop)
$if ArgueSetClaim(Claim2, jobs.arctic-in-ice.argue.claimLabelPop)
    $call ArgueFactSlot(Z_OpenOcean.Population.IceAlgae)
$endif
$branch .argue.popQuery

:: argue.popQuery
{@profArctic}   Is there a lot of ice algae in the shelf? How much did you count?
$branch .argue.chooseFactsPop

:: argue.chooseFactsPop
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.correctPop
    $answer *, .argue.unrelatedPop
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.unrelatedPop
{@profArctic}   I'm not seeing how that relates.
$call ArgueRejectIncorrect()
$branch .argue.popQuery

:: argue.correctPop
$call ArgueComplete()
{@profArctic}   Oh! That's certainly enough to draw them in. I wonder if the Salmon interact with them too...
$call CompleteJob()

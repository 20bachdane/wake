# basePath job.arctic-salmon-competition

// INTRO
:: start
@trigger    JobStarted
@cutscene

{@profArctic}  Awesome! I've been super stuck on this model.
               First, here's some data my team has already gathered about Salmon.
$call GiveEntity(ChinookSalmon, Silent)
$call GiveFact(ChinookSalmon.Eats.IceAlgae)
$call GiveFact(ChinookSalmon.Eats.Clione)
$call GiveFact(ChinookSalmon.Eats.Diatoms)
$call GiveFact(ChinookSalmon.Reproduce)
$call GiveFact(ChinookSalmon.Reproduce.Stressed)
{@player} So where are you stuck?
{@profArctic}  I'm not happy with how the model is looking. 
          I wonder if the Arctic Cod are the missing piece. 
          Can you figure out what the Cod eat and add them to our model? 
{@player}  I'd love to!
{@profArctic} .... 
{@profArctic} Are you being snarky with me, Ollie?  
{@player}  What? Of course not, I just love figuring out stuff like this--
{@profArctic}  Okay, okay. I'm just not used to people geeking out about this work as much as I do.
$set jobs:salmon-competition.sync-failed = false

:: allSet
@trigger    JobTaskCompleted
@when       taskId == "observeCod"
@once
{@guide} Adequate work, O! You've obtained the data you needed here.
         Time to head to the Modeling Lab!

:: modelsComplete
@trigger    JobTaskCompleted
@when       taskId == "modelFish"
@once
{@player} Yes!! This model is looking a lot better.
          Can't wait to show {nameof @profArctic}!


// MODEL SUGGESTIONS

:: triggerSyncFailure
@trigger    SimulationSyncError
@when !jobs:salmon-competition.sync-failed
@once
$set jobs:salmon-competition.sync-failed = true

:: helpModelSync.Visual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(modelFish), scene:name == "Modeling", modeling:phase == "visual"
@cutscene
$branch .modelSuggestions

:: helpModelSync.Sync
@trigger    RequestPartnerHelp
@when 		JobTaskActive(modelFish), scene:name == "Modeling", modeling:phase == "sync"
@cutscene
$branch .modelSuggestions

:: modelSuggestions
$if HasFact(ArcticCod.Eats.Diatoms), HasFact(ArcticCod.Eats.IceAlgae), HasFact(ChinookSalmon.Reproduce), HasFact(ChinookSalmon.Reproduce.Stressed), HasFact(ChinookSalmon.Eats.IceAlgae), HasFact(ChinookSalmon.Eats.Diatoms), IsFactFullyUpgraded(ChinookSalmon.Eats.Diatoms)
    $if HasFact(Z_OpenOcean.SalmonCompetition.Model.Visual)
        {@guide}    You're done with this portion! Head to the {h}Describe{/h} tab next.
    $else
        {@guide}    Once you import your facts and save the Visual model, we should be good to make our Describe model!
    $endif
$else
    $if !jobs:salmon-competition.sync-failed
        {@guide}    Time to try out your model in the {h}Describe{/h} tab.
    $else
        {@guide}    Seems like we don't have enough information to complete our model accurately.
                    Look for {h}question marks{/h} in the Visual model interface, those point to where we may need more data.
        $if !HasFact(ArcticCod.Eats.Diatoms)
            $branch .suggestArcticCodEat
        $elseif !HasFact(ArcticCod.Eats.IceAlgae)
            $branch .suggestArcticCodEat
        $elseif !HasFact(ChinookSalmon.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(ChinookSalmon.Reproduce.Stressed)
            $branch .suggestReproduce
        $elseif !HasFact(ChinookSalmon.Eats.IceAlgae)
            $branch .suggestChinookSalmonEat
        $elseif !HasFact(ChinookSalmon.Eats.Diatoms)
            $branch .suggestChinookSalmonEat
        $elseif !IsFactFullyUpgraded(ChinookSalmon.Eats.Diatoms)
            $branch .suggestMeasure
        $endif
    $endif
$endif

:: suggestReproduce
{@guide}    Did you get all the reproduction rates?

:: suggestMeasure
{@guide}    Using the {h}Measurement Tank{/h} to find the rates of unmeasured behaviors may help us here.

:: suggestArcticCodEat
{@guide}    Maybe look into what {nameof ArcticCod} eats?

:: suggestChinookSalmonEat
{@guide}    Maybe look into what {nameof ChinookSalmon} eats?


// CATCH-ALL GUIDE TEXT

:: catchObserveCod
@trigger	RequestPartnerHelp
@when		JobTaskTop(observeCod)
@boostScore -5
@cutscene
{@player}  What now, {nameof @guide}?
{@guide}   You will need to observe the {nameof ArcticCod} to find out what they eat!
            We shall need comprehensive scan-data on any organism they might eat.

:: catchModelFish
@trigger	RequestPartnerHelp
@when		JobTaskTop(modelFish)
@boostScore -5
@cutscene
{@player}  Okay, V. What's next? 
$if scene:name != "ModelingFoyer", scene:name != "Modeling"
    {@guide}    I would suggest heading to the {m}Modeling Lab{/m}.
$endif
{@guide}    We need to construct a {h}Visual Model{/h} and a {h}Sync Model{/h}!

:: catchReportBack
@trigger	RequestPartnerHelp
@when		JobTaskTop(reportBack)
@boostScore -5
@cutscene
{@player} What should I be doing now, {nameof @guide}?
{@guide}  Head back to the station to report what you found!

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when       !ArgueIsComplete(competitionArgue2)
@cutscene
$if ArgueIsComplete(competitionArgue1)
    $branch .argue.improve
$else
    $call ArgueLoad(competitionArgue1)
    {@profArctic}  Okay, Ollie, hope you've got an answer for me, because this model is driving me up the wall.
    $branch .argue.chooseClaim
$endif

:: argue.mainQuestion
{@profArctic}   Did anything you discover improve our model?
$branch .argue.chooseClaim

:: argue.chooseClaim
$choice .argue.improve; Adding {nameof ArcticCod} improves the model about {nameof ChinookSalmon}
$choice .argue.notImprove; Adding {nameof ArcticCod} does not improve the model about {nameof ChinookSalmon}
$choice .argue.notReady; Let me get back to you
$choose branch

:: argue.notReady
{@profArctic}   No worries, Ollie. Let me know when you're ready.

// not improve branch

:: argue.notImprove
$if ArgueSetClaim(Claim, jobs.arctic-salmon-competition.argue.claimLabelShowModel)
    $call ArgueFactSlot(Z_OpenOcean.SalmonCompetition.Model.Sync)
$endif
$call ArgueDisplayClaim()
{@profArctic}  Hmm, interesting. Can you show me your newest model?
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.correctModelNotImprove
    $answer *, .argue.unrelatedNotImprove
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.correctModelNotImprove
{@profArctic}   This is actually much more in line with our measurements of {nameof ChinookSalmon} than our previous model.
                I think you may need to revisit your claim.
$call ArgueClearFacts()
$call ArgueCancelClaim()
$call ArgueHideClaim()
$branch .argue.mainQuestion

:: argue.unrelatedNotImprove
{@profArctic}  Sorry, Ollie, but this isn't exactly helpful. 
$call ArgueClearFacts()
$call ArgueCancelClaim()
$call ArgueHideClaim()
$branch .argue.mainQuestion

// improve branch

:: argue.improve
$if ArgueIsComplete(competitionArgue1)
    {@profArctic}   You already explained to me why adding {nameof ArcticCod} makes a difference in the ecosystem.
    $branch .argue.modelQuery
$else
    $call ArgueLoad(competitionArgue1)
    $if ArgueSetClaim(Claim, jobs.arctic-salmon-competition.argue.claimLabelImprove)
        $call ArgueFactSlot(ArcticCod.Eats.IceAlgae)
        $call ArgueFactSlot(ArcticCod.Eats.Diatoms)
        $call ArgueFactSlot(ChinookSalmon.Eats.IceAlgae)
        $call ArgueFactSlot(ChinookSalmon.Eats.Diatoms)
    $endif
    $call ArgueDisplayClaim()
    $branch .argue.improveQuery
$endif

:: argue.improveQuery
{@profArctic}   Why does adding cod matter? Do they share resources?
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.correctEats
    $answer *, .argue.unrelatedEats
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.unrelatedEats
{@profArctic}   That doesn't look right, Ollie.
                I need to see whether there is overlap between {nameof ArcticCod}'s and {nameof ChinookSalmon}'s food sources.
$call ArgueRejectIncorrect()
$branch .argue.improveQuery

:: argue.correctEats
{@profArctic}   Ah. So there is definitely overlap there.
$call ArgueComplete()
$call ArgueCancelClaim()
$goto .argue.modelQuery

:: argue.modelQuery
{@profArctic}   Can you show me the impact on the model?
$call ArgueLoad(competitionArgue2)
$if ArgueSetClaim(Claim2, jobs.arctic-salmon-competition.argue.claimLabelShowModel)
    $call ArgueFactSlot(Z_OpenOcean.SalmonCompetition.Model.Sync)
$endif
$call ArgueDisplayClaim()
$branch .argue.chooseFactsModel

:: argue.chooseFactsModel
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.correctModel
    $answer *, .argue.unrelatedModel
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.correctModel
$call ArgueComplete()
{@profArctic}  Oh, that is definitely looking better!
               We'll need to keep working. But this data is the breakthrough we needed.
               Thanks, Ollie! Don't know what I would do without you. 
$call CompleteJob()

:: argue.unrelatedModel
{@profArctic}   That's not it, Ollie. I need to see an updated Numerical Model about {nameof ChinookSalmon} and {nameof ArcticCod}.
$call ArgueRejectIncorrect()
{@profArctic}   Did your information about the {nameof ArcticCod} improve our model?
$branch .argue.chooseFactsModel

// Shared

:: argue.notSure
$call ArgueCancelClaim()
$call ArgueHideClaim()
{@profArctic}   No worries, Ollie. Let me know when you're ready.  
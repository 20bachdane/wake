# basePath job.arctic-salmon-competition

// INTRO
:: start
@trigger    JobStarted
@cutscene

{@profArctic}  Awesome! I've been super stuck on this model.
               First, here's some data my team has already gathered about Salmon.
$call GiveEntity(ChinookSalmon, Silent)
$call GiveFact(ChinookSalmon.Eats.IceAlgae)
$call GiveFact(ChinookSalmon.Eats.Clione)
$call GiveFact(ChinookSalmon.Reproduce)
$call GiveFact(ChinookSalmon.Reproduce.Stressed)
{@player} So where are you stuck?
{@profArctic}  I'm not happy with how the model is looking. 
          I wonder if the Arctic Cod are the missing piece. 
          Can you figure out what the Cod eat and add them to our model? 
{@player}  I'd love to!
{@profArctic} Um... that wasn't sarcasm, was it?
{@player}  What? Claro que no, of course not, I just love figuring out stuff like this--
{@profArctic}  Okay, okay. I'm just not used to people geeking out about this work as much as I do.

:: allSet
@trigger    JobTaskCompleted
@when       taskId == "observeCod"
@once
{@guide} Adequate work, O! You've obtained the data you needed here.
         Time to head to the Modeling Lab!

:: modelsComplete
@trigger    JobTaskCompleted
@when       taskId == "modelFish"
@once
{@player} Yes!! This model is looking a lot better.
          Can't wait to show {nameof @profArctic}!

// CATCH-ALL GUIDE TEXT

:: catchObserveCod
@trigger	RequestPartnerHelp
@when		JobTaskTop(observeCod)
@boostScore -5
@cutscene
{@player}  What now, {nameof @guide}?
{@guide}   You will need to observe the {nameof ArcticCod} to find out what they eat!
            We shall need comprehensive scan-data on any organism they might eat.

:: catchModelFish
@trigger	RequestPartnerHelp
@when		JobTaskTop(modelFish), scene:name != "Modeling"
@boostScore -5
@cutscene

{@player}  Okay, V. What's next? 
$if scene:name != "ModelingFoyer"
{@guide}    I would suggest heading to the {m}Modeling Lab{/m}.
$endif
{@guide}    We need to construct a {h}Visual Model{/h} and a {h}Sync Model{/h}!

:: catchReportBack
@trigger	RequestPartnerHelp
@when		JobTaskTop(reportBack)
@boostScore -5
@cutscene
{@player} What should I be doing now, {nameof @guide}?
{@guide}  Head back to the station to report what you found!

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when       !ArgueIsComplete(competitionArgue2)
@cutscene
$if ArgueIsComplete(competitionArgue1)
    $branch .argue.noImpact
$else
    $call ArgueLoad(competitionArgue1)
    {@profArctic}  Okay, Ollie, hope you've got an answer for me, because this model is driving me up the wall.
                   Did you discover an ecosystem imbalance that could've affected our model?
    $branch .argue.chooseClaim
$endif

:: argue.chooseClaim
$choice .argue.noImpact; The Cod and Salmon are balanced
$choice .argue.imbalance; The Cod and Salmon are unbalanced
$choose branch

// Cod branch

:: argue.imbalance
$if ArgueSetClaim(Claim, jobs.arctic-salmon-competition.argue.claimLabelImbalance)
    $call ArgueFactSlot(ArcticCod.Eats.IceAlgae)
$endif
$call ArgueDisplayClaim()
{@profArctic}  Hmm, interesting. What makes you think that? 
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.unrelatedCod
    $answer *, .argue.unrelatedCod
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.unrelatedCod
{@profArctic}  Sorry, Ollie, but this isn't exactly helpful.  
$call ArgueClearFacts()

// Neither branch

:: argue.noImpact
$if ArgueIsComplete(competitionArgue1)
    {@profArctic}   You already showed me the historic populations of the Artic Cods' prey.
    $branch .argue.modelQuery
$else
    $call ArgueLoad(competitionArgue1)
    $if ArgueSetClaim(Claim, jobs.arctic-salmon-competition.argue.claimLabelNoImpact)
        $call ArgueFactSlot(Z_OpenOcean.PopulationHistory.Diatoms)
        $call ArgueFactSlot(Z_OpenOcean.PopulationHistory.IceAlgae)
    $endif
    $call ArgueDisplayClaim()
    {@profArctic}   Oh, that's fascinating! Are Salmons' food sources not affected by the Cod growth?
    $branch .argue.noImpactQuery
$endif

:: argue.noImpactQuery
{@profArctic}   Can you show me the historic populations of Cods' prey?
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.correctPopulations
    $answer *, .argue.unrelatedPopulations
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.unrelatedPopulations
{@profArctic}  That doesn't look right, Ollie. I need to see the historic populations of the Cods' food sources.
$call ArgueRejectIncorrect()
$branch .argue.noImpactQuery

:: argue.correctPopulations
$call ArgueComplete()
$call ArgueCancelClaim()
$goto .argue.modelQuery

:: argue.modelQuery
{@profArctic}  Did your information about the Cod improve our model?
$call ArgueLoad(competitionArgue2)
$if ArgueSetClaim(Claim2, jobs.arctic-salmon-competition.argue.claimLabelImproved)
    $call ArgueFactSlot(Z_OpenOcean.SalmonCompetition.Model.Sync)
$endif
$call ArgueDisplayClaim()
$branch .argue.chooseFactsModel

:: argue.chooseFactsModel
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.correctModel
    $answer *, .argue.unrelatedModel
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.correctModel
$call ArgueComplete()
{@profArctic}  Oh, that is definitely looking better!
               We'll need to keep working. But this data is the breakthrough we needed.
               Thanks, Ollie! Don't know what I would do without you. 
$call CompleteJob()

:: argue.unrelatedModel
{@profArctic}   That's not it, Ollie. I need to see an updated Numerical model about Salmon and Cod.
$call ArgueRejectIncorrect()
{@profArctic}   Did your information about the Cod improve our model?
$branch .argue.chooseFactsModel

// Shared

:: argue.notSure
{@profArctic}   No worries, Ollie. Let me know when you're ready.  
# basePath job.arctic-picky-eaters

// INTRO
:: start
@trigger    JobStarted
@cutscene

{@profArctic} I'm excited to see you taking another job, Ollie!
{@profArctic}  I've been trying to feed the Cod equal amounts of Algae and Diatoms...
               But it seems like they're mostly going for the Diatoms.
$if !HasEntity(ArcticCod)
{@profArctic}   I'll send you the data we have collected so far.
$elseif !HasFact(ArcticCod.Eats.Diatoms)
{@profArctic}   I'll send you the data we have collected so far.
$endif

$call GiveEntity(ArcticCod, Silent)
$call GiveEntity(Diatoms, Silent)
$call GiveFact(ArcticCod.Eats.Diatoms)

{@profArctic}   Our mechanic has been annoyed at all the Algae clogging up people's engines.
{@player}   Weird. Why do you think the Cod aren't eating the algae?
{@profArctic} That's what I need you to solve.
{@player}   Okay. Muy f√°cil. I'll just head back to the AquaLab and use the Measurement Tank.
{@profArctic} Great. Let me know what you find!


:: measureAlgaeOnly
@trigger    JobTaskCompleted
@when       taskId == "obtainRateAlgae", !JobTaskCompleted(obtainRateDiatoms)
@once
@cutscene
{@guide} One down, one to go!

:: measureDiatomsOnly
@trigger    JobTaskCompleted
@when       taskId == "obtainRateDiatoms", !JobTaskCompleted(obtainRateAlgae)
@once
@cutscene
{@guide}   One down, one to go!

:: measureBoth
@trigger    JobTasksUpdated
@when       JobTaskCompleted(obtainRateAlgae), JobTaskCompleted(obtainRateDiatoms)
@once
@cutscene
{@guide}  Adequate work, Ollie! You've gathered all the data you need.
{@player} Yeah... but what does it mean?
{@guide}  Processing.. processing...
          My data is inconclusive, O. I suggest reporting back to {nameof @profArctic}. 

// CATCH-ALL GUIDE TEXT

:: catchObtainRateAlgae
@trigger	RequestPartnerHelp
@when		JobTaskTop(obtainRateAlgae)
@boostScore -5
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}     Place the Cod in the Measurement Tank with something it eats!

:: catchObtainRateDiatoms
@trigger	RequestPartnerHelp
@when		JobTaskTop(obtainRateDiatoms)
@boostScore -5
@cutscene
{@player} Okay, {nameof @guide}. What now? 
{@guide}	 Place the Cod in the Measurement Tank with something it eats! 

:: catchReportBack
@trigger	RequestPartnerHelp
@when		JobTaskTop(reportBack)
@boostScore -5
@cutscene
{@guide}	 Compare the rates you just obtained. Then report your findings to {nameof @profArctic}!


// ARGUMENTATION
::argue.intro
@trigger    TryArgumentation
@when       !ArgueIsComplete(pickyArgue) 
@cutscene
$call ArgueLoad(pickyArgue)
{@profArctic}  How'd it go out there, Ollie?
{@player} So... I got the rates we needed. But I'm not totally sure what they mean. 
{@profArctic} Well, feeding rates can tell us a lot about how much energy a species needs.
$branch .argue.firstQuery

:: argue.firstQuery
{@profArctic}   If a species eats larger amounts of one species, it usually means that species is low on nutrition.
{@player} Oh... like how I need to eat about a million of Mom's kelp rolls in order to feel full.
          Um... not that I'd recommend that.
{@profArctic} Exactly. So according to your data, which species is more nutritious for the Cod? 
$branch .argue.chooseClaim

:: argue.chooseClaim
$if ArgueCancelClaim()
$endif
$choice .argue.setDiatom; Diatoms
$choice .argue.setAlgae; Ice Algae
$choice .argue.notSure; Not sure yet
$choose branch

// DIATOM branch
:: argue.setDiatom
$if ArgueSetClaim(Claim, jobs.arctic-picky-eaters.argue.claimLabelDiatoms)
    $call ArgueFactSlot(ArcticCod.Eats.IceAlgae)
    $call ArgueFactSlot(ArcticCod.Eats.Diatoms)
$endif
$call ArgueDisplayClaim()
$branch .argue.diatomQuery

:: argue.diatomQuery
{@profArctic}  Okay, let's verify that. How do the rates compare?
$branch .argue.chooseFactsDiatoms

:: argue.chooseFactsDiatoms
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.revise
    $answer *, .argue.unrelatedDiatoms
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.revise
$if IsFactFullyUpgraded(ArcticCod.Eats.IceAlgae), IsFactFullyUpgraded(ArcticCod.Eats.Diatoms)
    {@profArctic}  Oh... actually, Ollie, these rates show the opposite.
                   High nutrition means lower rates, because the Cod won't need to eat as much of it.
                   Low nutrition means higher rates, because the Cod need to eat a lot to fill up.  
                    Want to take another guess?
    $call ArgueHideClaim()
    $call ArgueClearFacts()
    $branch .argue.firstQuery
$else
    {@profArctic}   Looks like you're missing the rates for at least one of these facts.
                    You'll need to head back to your Measurement Tank and find the rates we need. 
    $call ArgueHideClaim()
    $call ArgueClearFacts()
$endif


:: argue.unrelatedDiatoms
{@profArctic}   Um... did you mean to show me this, Ollie? We need to look at the Cod's eating rates. 
$call ArgueRejectIncorrect()
$branch .argue.diatomQuery

// ALGAE branch
:: argue.setAlgae
$if ArgueSetClaim(Claim, jobs.arctic-picky-eaters.argue.claimLabelAlgae)
    $call ArgueFactSlot(ArcticCod.Eats.IceAlgae)
    $call ArgueFactSlot(ArcticCod.Eats.Diatoms)
$endif
$call ArgueDisplayClaim()
$branch .argue.algaeQuery

:: argue.algaeQuery
{@profArctic}  Okay, let's double check. How do the rates compare?
$branch .argue.chooseFactsAlgae

:: argue.chooseFactsAlgae
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.complete
    $answer *, .argue.unrelatedAlgae
$choice .argue.notSure; Let me get back to you.
$choose branch

:: argue.unrelatedAlgae
{@profArctic}   I'm not following how this relates to Cod eating rates.
$call ArgueRejectIncorrect()
$branch .argue.algaeQuery

// COMMON branch
:: argue.notSure
{@profArctic}   That's okay, there's no rush here. Let me know when you're ready.

:: argue.complete
$if IsFactFullyUpgraded(ArcticCod.Eats.IceAlgae), IsFactFullyUpgraded(ArcticCod.Eats.Diatoms)
    $call ArgueComplete()
    {@profArctic}  Amazing job, Ollie! Looks like the Cod aren't eating much Ice Algae because small amounts provide a lot of nutrition.
    {@player} Wow. The Ice Algae must be, like, an Arctic Cod protein shake.
    {@profArctic} I wonder if this has anything to do with what happened to that missing whale...
                  Anyway, thanks for your help, Ollie. I owe you one. 
    $call CompleteJob()
$else
    {@profArctic}   Looks like you're missing the rates for at least one of these facts.
                    You'll need to head back to your Measurement Tank and find the rates we need. 
    $call ArgueHideClaim()
    $call ArgueClearFacts()
$endif
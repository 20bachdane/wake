:: basePath job.arctic-isolated-instnace

// INTRO
:: start
@trigger    JobStarted
@cutscene

{@kevin}    We need to figure out why Sea Sponges aren't found in the Open Ocean.
			Usually organisms are missing if they are too stressed to stick around, or something eats them.
			Let's start by seeing if either of those are true in this case.
$if !HasEntity(GlassSponge)
	{@kevin}	But first, make sure to scan the Sea Sponge at Site X so we know what we're dealing with.
$endif

// PREDATOR THEORY

:: scansComplete
@trigger	JobTaskCompleted
@when		JobTaskTop(experimentPredatorZ)
@once
@cutscene
{@kevin}	Okay, let's use the Observation Tank to see which organisms are predators here at Site Z.
			We should also check whether any of them eat Sea Sponges.
$set jobs:arctic-isolated-instance.predatorDetour = false

	// DETOUR

:: experimentCompleteZNeedPredator
@trigger	JobTaskCompleted
@when		JobTaskTop(findPredator)
@once
@cutscene
{@kevin}	Cool! Apparently salmon is a popular meal in the arctic.
			But none of them eat Sea Sponges, huh? That's weird.
			I know I've seen half-eaten sea sponges lying around. Something must be eating them.
			Let's try scanning for predators at nearby sites. 
$set jobs:arctic-isolated-instance.predatorDetour = true


:: predatorFound
@trigger	BestiaryEntryAdded
@when		entryId == "PterasterObscurus", JobTaskTop(experimentPredatorAll)
@once
@cutscene
{@kevin}	This could be it! Let's head back to the Observation Tank and check if it likes the taste of Sea Sponges.

	// NO DETOUR

:: experimentCompleteZ
@trigger	JobTaskCompleted
@when		JobTaskTop(ExperimentPredatorAll), !jobs:arctic-isolated-instance.predatorDetour
@once
@cutscene
{@kevin}	None of them eat Sea Sponges, huh? That's weird.
			I know I've seen half-eaten sea sponges lying around. Something must be eating them.
			Next let's try dropping in possible predators from nearby sites, like Site X or Z.

:: experimentCompleteAll
@trigger	BestiaryFactAdded
@when		HasFact(PterasterObscurus.Eats.GlassSponge), JobTaskTop(findPredator)
@once
@cutscene
{@kevin}	Okay! We've finally found something that eats Sea Sponges.
$if JobTaskCompleted(determineStress) // could also check if !JobTaskTop(discussFindings)
	{@kevin}	So that's one branch. What was the other possibility? That Site Z stressed the sponges, right?
				Let's see if testing that gives us a better perspective.
$else
	{@kevin}	So now we've got our two theories. Should we see what {nameof profWhalen} thinks about them?
$endif

// STRESS THEORY

:: stressDetermined
@trigger	BestiaryFactAdded
@when		HasFact(GlassSponge.Light.Stressed), HasFact(GlassSponge.Temperature.Stressed), HasFact(GlassSponge.PH.Stressed), JobTaskTop(determineStress)
@once
@cutscene
{@kevin}	Good work. Be sure to compare those stress results with the conditions at Site Z to see if they are relevant.
$if JobTaskCompleted(experimentCompleteAll)
	{@kevin}	So that's  one piece. What was the other piece? Something could be eating the sponges, right? Let's look into that next.
$else
	{@kevin}	So now we've got our two theories. Should we see what {nameof profWhalen} thinks about them?
$endif


// ARGUMENTATION

//ARGUMENT 1: Groundwork

:: argue.groundwork.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(argueIsolatedInstanceGroundwork)
@cutscene
{@profWhalen}	What are your main theories?
$branch .argue.groundwork.main-question

:: argue.groundwork.main-question
{@profWhalen}	Why don't we see Sea Sponges in the open ocean?
$choice .argue.groundwork.lightClaim; The Sponges are stressed by the light levels.
$choice .argue.groundwork.predatorClaim; There is a predator.
$choice .argue.groundwork.foodClaim; The food source is too low there.
$choice .argue.giveUp; Let me get back to you.
$choose branch

	// STRESS

:: argue.groundwork.lightClaim
$if ArgueIsComplete(argueIsolatedInstanceGroundworkStress)
	{@profWhalen}	I believe we've already covered this. The light levels seem fine. Something else must be going on.
	$branch .argue.groundwork.main-question
$else
	{@profWhalen}	Oh! That would make sense. Do you have evidence?
	$call ArgueLoad(argueIsolatedInstanceGroundworkStress)
	$call ArgueSetClaim(IsolatedInstanceGroundworkStressClaim, jobs.arctic-isolated-instance.argue.claimLabelStress) 
		$call ArgueFactSlot()// TODO: Stressed rules and environmental data
	$call ArgueDisplayClaim()
	$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.groundwork.lightComplete 
		$answer *, .argue.groundwork.unrelated
	$choice .argue.giveUpArgument; Let me get back to you.
	$choose branch
$endif

:: argue.groundwork.lightComplete
$call ArgueComplete()
{@profWhalen}	These light levels seem fine. It seems like something else is going on.
$if ArgueIsComplete(argueIsolatedInstanceGroundworkPredator)
	$branch .argue.groundwork.bothComplete
$else
	$branch .argue.groundwork.main-question
$endif

	// PREDATOR

:: argue.groundwork.predatorClaim
$if ArgueIsComplete(argueIsolatedInstanceGroundworkPredator)
	{@profWhalen}	Haven't we already established this? There are none of these in the Open Ocean.
	$branch .argue.groundwork.main-question
$else
	{@profWhalen}	Have you observed this?
	$call ArgueLoad(argueIsolatedInstanceGroundworkPredator)
	$call ArgueSetClaim(IsolatedInstanceGroundworkPredatorClaim, jobs.arctic-isolated-instance.argue.claimLabelPredator) 
		$call ArgueFactSlot(PterasterObscurus.Eats.SeaSponge)
	$call ArgueDisplayClaim()
	$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.groundwork.predatorComplete 
		$answer *, .argue.groundwork.unrelated
	$choice .argue.giveUpArgument; Let me get back to you.
	$choose branch
$endif

:: argue.groundwork.predatorComplete
$call ArgueComplete()
{@profWhalen}	But there are none of those in the Open Ocean. So they can't be eating the Sea Sponges in Site Z.
$if ArgueIsComplete(argueIsolatedInstanceGroundworkStress)
	$branch .argue.groundwork.bothComplete
$else
	$branch .argue.groundwork.main-question
$endif

	// FOOD

:: argue.groundwork.foodClaim
{@profWhalen}	There is Detritus everywhere. That can't be right.
$branch argue.groundwork.main-question

	// BOTH
	
:: argue.groundwork.unrelated
$call ArgueRejectIncorrect()
{@profWhalen}    Hmmmm, this doesn't really show what you think it does.
$branch .argue.groundwork.main-question

:: argue.groundwork.bothComplete
$call ArgueLoad(argueIsolatedInstanceGroundwork)
$call ArgueComplete()
{@profWhalen}	I can see you've done your research, but neither theory fully solves the issue.
				What do you think?
$branch argue.final.main-question


// ARGUMENT 2: Final (missing) piece


:: argue.final.intro
@trigger    TryArgumentation
@when   ArgueIsComplete(argueIsolatedInstanceGroundwork), !ArgueIsComplete(argueIsolatedInstanceFinal) 
@cutscene
$branch .argue.final.main-question

:: argue.final.main-question
{@profWhalen}	Have you worked out the missing piece explaining why Sea Sponges are not found in the Open Ocean?
$call ArgueLoad(argueIsolatedInstanceFinal)
$call ArgueSetClaim(IsolatedInstanceFinalClaim, jobs.arctic-isolated-instance.argue.claimLabelFinal) 
	$call ArgueFactSlot(PterasterObscurus.Eats.SeaSponge)
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
	$answer correct, .argue.final.complete
	$answer *, .argue.final.unrelated
$choice .argue.giveUpArgument; Let me get back to you.
$choose branch

:: argue.final.unrelated
$call ArgueRejectIncorrect()
{@profWhalen}	Hmmmm. I don't see how that is relevant.
				But you know...
				I wonder if the fact that Site Y is between Site X and Site Z means anything... 
$branch .argue.final.main-question

:: argue.giveUp
{@profWhalen}    No worries, I'm sure you'll figure it out!

:: argue.giveUpArgument
{@profWhalen}    No worries, I'm sure you'll figure it out!
$call ArgueUnload()
$call ArgueCancelClaim()

// END
:: argue.final.complete
$call ArgueComplete()
{@profWhalen}	Aha! The Pteraster eat the Sea Sponges in Site X before they can make it to Site Z.
				Nice thinking!
$call CompleteJob()
:: basePath job.arctic-isolated-instnace

// INTRO
:: start
@trigger    JobStarted
@cutscene

{@guide}    We need to figure out why Glass Sponges aren't found at Site Z.
			Usually organisms are missing if they are too stressed to stick around, or something eats all of them.
			Let's start by seeing if either of those are true in this case.
$if !HasEntity(GlassSponge)
	{@guide}	But first, make sure to scan the Glass Sponge at Site X so we know what we're dealing with.
$endif

:: scanSpongeComplete
@trigger	JobTaskCompleted
@when		JobTaskTop(scanAll)
@once
@cutscene
{@guide}	All right, you've got the Sponge. Now we'll need to scan any new species out in the Open Ocean, at Site Z.

// PREDATOR THEORY


:: scansComplete
@trigger	JobTaskCompleted
@when		JobTaskTop(experimentPredatorZ)
@once
@cutscene
{@guide}	Okay, let's use the Observation Tank to see if any of the predators here at Site Z eat Glass Sponges.
$set jobs:arctic-isolated-instance.stressTriggered = false

:: experimentCompleteZ
@trigger	ExperimentFinished
@when		tankType == "Observation", jobs:arctic-isolated-instance.checkedCrab, jobs:arctic-isolated-instance.checkedSeal, jobs:arctic-isolated-instance.checkedShark
@once
@cutscene
{@guide}	None of the obvious predators eat Glass Sponges, huh?
			That's weird. I know I've seen half-eaten Glass Sponges lying around. Something must be eating them.
$if !JobTaskCompleted(determineStress)
	{@guide}	So that's one branch. What was the other possibility? That Site Z stressed the sponges, right?
				Let's see if testing that gives us a better perspective.
$else
	{@guide}	Let's check in with Professor Whalen.
$endif
// if player has not already tested for Pteraster eating Sponges
//$if !HasFact(PterasterObscurus.Eats.GlassSponge)

//$else
	// player has already tested for Pteraster eating Sponges
	//{@guide}	Must be the {nameof PterasterObscurus} then.
	//$branch .predatorComplete
//$endif

	// if player still needs to find the Pteraster
	//$if !JobTaskCompleted(findPredator)
		//{@guide}	Let's try scanning for predators at nearby sites.
					//The most likely next site would be the Ice Crevice floor, maybe we should check there.
	//$else
		// player has already found Pteraster, just needs to find eat rule
		//{@guide}	Next let's try dropping in possible predators from nearby sites, like Site X or Y.
	//$endif


:: predatorFound
@trigger	BestiaryEntryAdded
@when		entryId == "PterasterObscurus", JobTaskTop(experimentPredatorAll)
@once
@cutscene
{@guide}	This could be it! Let's head back to the Observation Tank and check if it likes the taste of Glass Sponges.

:: experimentCompleteAll
@trigger	BestiaryFactAdded
@when		factId == "PterasterObscurus.Eats.GlassSponge", JobTaskCompleted(experimentPredatorAll)
@once
@cutscene
{@guide}	Okay! We've finally found something that eats Glass Sponges.
$if HasFact(Y_IceCrevice.Population.PterasterObscurus)
	{@guide}	And we've already counted the population of Cushion Stars at Site Y.
	$branch .predatorComplete
$else
	{@guide}	Let's get a count of the population so we have evidence there are Cushion Stars at Site Y.
$endif

:: populationComplete
@trigger	JobTaskCompleted
@when		taskId == "countPopulations", scene:name == "RS-4Y"
@once
@cutscene
{@guide}	All right! I think that is everything we need to make the case that these {pluralnameof PterasterObscurus} are the reason we don't see {pluralnameof GlassSponge} in Site Z.
			{h}Site Y{/h} lies between {h}Site X{/h} and {h}Site Z{/h}, so when the {pluralnameof GlassSponge} try to move through, they all get gobbled up by the {pluralnameof PterasterObscurus}!
$branch .predatorComplete


:: predatorComplete
$if !JobTaskCompleted(determineStress)
	{@guide}	So that's one branch. What was the other possibility? That Site Z stressed the sponges, right?
				Let's see if testing that gives us a better perspective.
$else
	{@guide}	Let's go show {nameof profWhalen} what we've found.
$endif

// STRESS THEORY

:: stressDeterminedLightFinal
@trigger	BestiaryFactAdded
@when		factId == "GlassSponge.Light.Stressed", JobTaskTop(discussFindings), !jobs:arctic-isolated-instance.stressTriggered
@once
@cutscene
$branch .stressDeterminedFinal

:: stressDeterminedTempFinal
@trigger	BestiaryFactAdded
@when		factId == "GlassSponge.Temperature.Stressed", JobTaskTop(discussFindings), !jobs:arctic-isolated-instance.stressTriggered
@once
@cutscene
$branch .stressDeterminedFinal

:: stressDeterminedPHFinal
@trigger	BestiaryFactAdded
@when		factId == "GlassSponge.PH.Stressed", JobTaskTop(discussFindings), !jobs:arctic-isolated-instance.stressTriggered
@once
@cutscene
$branch .stressDeterminedFinal

:: stressDeterminedFinal
{@guide}	Be sure to compare those stress results with the conditions at Site Z to see if they are relevant.
			So now we've got our two theories. Should we see what {nameof profWhalen} thinks about them?
$set jobs:arctic-isolated-instance.stressTriggered = true
			
:: stressDeterminedLightFirst
@trigger	BestiaryFactAdded
@when		factId == "GlassSponge.Light.Stressed", !JobTaskTop(discussFindings), JobTaskCompleted(determineStress), !jobs:arctic-isolated-instance.stressTriggered
@once
@cutscene
$branch .stressDeterminedFirst

:: stressDeterminedTempFirst
@trigger	BestiaryFactAdded
@when		factId == "GlassSponge.Temperature.Stressed", !JobTaskTop(discussFindings), JobTaskCompleted(determineStress), !jobs:arctic-isolated-instance.stressTriggered
@once
@cutscene
$branch .stressDeterminedFirst

:: stressDeterminedPHFirst
@trigger	BestiaryFactAdded
@when		factId == "GlassSponge.PH.Stressed", !JobTaskTop(discussFindings), JobTaskCompleted(determineStress), !jobs:arctic-isolated-instance.stressTriggered
@once
@cutscene
$branch .stressDeterminedFirst

:: stressDeterminedFirst
{@guide}	Be sure to compare those stress results with the conditions at Site Z to see if they are relevant.
//$if JobTaskCompleted(scanProbe)
	{@guide}	So that's one piece. What was the other piece? Something could be eating the sponges, right? Let's look into that next.
//$else
	//{@guide}	At some point we'll need to scan Site Y's water chemistry probe.
//$endif
$set jobs:arctic-isolated-instance.stressTriggered = true

:: stressScannedProbeFinal
@trigger	BestiaryFactAdded
@when		factId == "Z_OpenOcean.Light", JobTaskTop(discussFindings)
@once
@cutscene
{@guide}	So now we've got our two theories. Should we see what {nameof profWhalen} thinks about them?
$set jobs:arctic-isolated-instance.stressTriggered = true

:: stressScannedProbeFirst
@trigger	BestiaryFactAdded
@when		factId == "Z_OpenOcean.Light", !JobTaskTop(discussFindings)
@once
@cutscene
{@guide}	Nice, we can compare this against the Glass Sponge stress levels.
{@guide}	So that's one piece. What was the other piece? Something could be eating the sponges, right? Let's look into that next.
$set jobs:arctic-isolated-instance.stressTriggered = true


// Put Glass Sponge in tank with predators


:: checkPredators
@trigger	ExperimentStarted
@when		tankType == "Observation"
@cutscene
$if ExperimentHasCritter("GlassSponge"), ExperimentHasCritter("SnowCrab")
	$set jobs:arctic-isolated-instance.checkedCrab = true
$endif
$if ExperimentHasCritter("GlassSponge"), ExperimentHasCritter("RibbonSeal")
	$set jobs:arctic-isolated-instance.checkedSeal = true
$endif
$if ExperimentHasCritter("GlassSponge"), ExperimentHasCritter("SalmonShark")
	$set jobs:arctic-isolated-instance.checkedShark = true
$endif

// CATCH-ALL GUIDE TEXT

:: catchScanSponge
@trigger	RequestPartnerHelp
@when		JobTaskTop(scanSponge)
@boostScore -5
@cutscene
{@guide}	Go to Site X and scan a {nameof GlassSponge}.

:: catchScanAll
@trigger	RequestPartnerHelp
@when		JobTaskTop(scanAll)
@boostScore -5
@cutscene
{@guide}	Go to Site Z and scan all the new species.

:: catchCheckCrab
@trigger	RequestPartnerHelp
@when		JobTaskTop(checkCrab), !jobs:arctic-isolated-instance.checkedCrab
@boostScore -5
@cutscene
{@guide}	Check if any predators from Site Z eat Glass Sponges by placing them together in the Observation Tank.

:: catchCheckSeal
@trigger	RequestPartnerHelp
@when		JobTaskTop(checkSeal), !jobs:arctic-isolated-instance.checkedSeal
@boostScore -5
@cutscene
{@guide}	Check if any predators from Site Z eat Glass Sponges by placing them together in the Observation Tank.

:: catchCheckShark
@trigger	RequestPartnerHelp
@when		JobTaskTop(checkShark), !jobs:arctic-isolated-instance.checkedShark
@boostScore -5
@cutscene
{@guide}	Check if any predators from Site Z eat Glass Sponges by placing them together in the Observation Tank.

:: catchChecksBeforeTaskUpdate
@trigger	RequestPartnerHelp
@when		!JobTaskCompleted(findPredator)
@boostScore -6
@cutscene
{@guide}	We can probably wrap up this experiment...

:: catchDiscussFindings
@trigger	RequestPartnerHelp
@when		JobTaskTop(discussFindings)
@boostScore -5
@cutscene
{@guide}	Talk to Professor Whalen in the Office.

:: catchFindPredator
@trigger	RequestPartnerHelp
@when		JobTaskTop(findPredator)
@boostScore -5
@cutscene
{@guide}	Scan Sites X and Y for potential predators of Glass Sponges.

:: catchExperimentPredatorAll
@trigger	RequestPartnerHelp
@when		JobTaskTop(experimentPredatorAll)
@boostScore -5
@cutscene
{@guide}	Use the Observation tank to see if the {nameof PterasterObscurus} eats Glass Sponges.

:: catchCountPopulations
@trigger	RequestPartnerHelp
@when		JobTaskTop(countPopulations)
@boostScore -5
@cutscene
{@guide}	Head back to Site Y and count how many {pluralnameof PterasterObscurus} there are.

:: catchDetermineStress
@trigger	RequestPartnerHelp
@when		JobTaskTop(determineStress)
@boostScore -5
@cutscene
{@guide}	Find the Glass Sponge's stress levels using the Stress Tank.

:: catchReportFinal
@trigger	RequestPartnerHelp
@when		JobTaskTop(reportFinal)
@boostScore -5
@cutscene
{@guide}	Talk to Professor Whalen again in the Office.


// ARGUMENTATION

//ARGUMENT 1: Groundwork

:: argue.groundwork.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(argueIsolatedInstanceGroundwork)
@cutscene
{@profWhalen}	How is it coming along?
$branch .argue.groundwork.main-question

:: argue.groundwork.main-question
{@profWhalen}	What can you tell me about these theories for why we don't see Glass Sponges in the Open Ocean?
$choice .argue.groundwork.lightClaim; The Sponges are stressed by the light levels.
$choice .argue.groundwork.predatorClaim; There is a predator eating the Sponges.
$choice .argue.giveUp; Let me get back to you.
$choose branch

	// STRESS

:: argue.groundwork.lightClaim
$if ArgueIsComplete(argueIsolatedInstanceGroundworkStress)
	{@profWhalen}	I believe we've already covered this. The light levels seem fine. Something else must be going on.
	$branch .argue.groundwork.main-question
$else
	{@profWhalen}	This seems like it could make sense. Do you have evidence about the current light levels?
	$call ArgueLoad(argueIsolatedInstanceGroundworkStress)
	$if ArgueSetClaim(IsolatedInstanceGroundworkStressClaim, jobs.arctic-isolated-instance.argue.claimLabelStress) 
		$call ArgueFactSlot(GlassSponge.Light.Stressed)
		$call ArgueFactSlot(Z_OpenOcean.Light)
	$endif
	$call ArgueDisplayClaim()
	$branch .argue.groundwork.chooseLightFacts
$endif

:: argue.groundwork.chooseLightFacts
$choice #argueFactSet; Present facts from AQOS
	$answer correct, .argue.groundwork.lightComplete
	$answer *, .argue.groundwork.unrelated
$choice .argue.giveUpArgument; Let me get back to you.
$choose branch

:: argue.groundwork.lightComplete
$call ArgueComplete()
{@profWhalen}	These light levels seem fine. It seems like something else is going on.
$if ArgueIsComplete(argueIsolatedInstanceGroundworkPredator)
	$branch .argue.groundwork.bothComplete
$else
	$branch .argue.groundwork.main-question
$endif

:: argue.groundwork.unrelated
$call ArgueRejectIncorrect()
{@profWhalen}	Hmm, that doesn't seem to explain everything. Got anything else?
$branch .argue.groundwork.chooseLightFacts

	// PREDATOR

:: argue.groundwork.predatorClaim
$if ArgueIsComplete(argueIsolatedInstanceGroundworkPredator)
	{@profWhalen}	Haven't we already established this? There are no predators that eat Glass Sponges in Site Z.
	$branch .argue.groundwork.main-question
$else
	{@profWhalen}	Have you observed this?
	$call ArgueLoad(argueIsolatedInstanceGroundworkPredator)

	$if JobTaskTop(discussFindings)
		$choice .argue.groundwork.predatorComplete; Actually, none of the Site Z predators ate the sponges.
		$choice .argue.giveUpArgument; Let me get back to you.
	$else
		$choice .argue.giveUpArgument; Still working on it!
	$endif
		$choose branch
$endif

:: argue.groundwork.predatorComplete
$call ArgueComplete()
{@profWhalen}	Really? Well, that is good to know. There must be something else going on.
$if ArgueIsComplete(argueIsolatedInstanceGroundworkStress)
	$branch .argue.groundwork.bothComplete
$else
	$branch .argue.groundwork.main-question
$endif

	// BOTH

:: argue.groundwork.bothComplete
$call ArgueLoad(argueIsolatedInstanceGroundwork)
$call ArgueComplete()
{@profWhalen}	I can see you've done your research, but neither theory fully solves the issue.
				You know, sometimes we have to delve a little deeper to understand an issue -- where we need to read between the lines, if you will.
				It is possible there are predators {h}between{/h} the sites which eat all the sponges before they can complete their journey.
				That may be a good place to investigate next.

// ARGUMENT 2: Final (missing) piece


:: argue.final.intro
@trigger    TryArgumentation
@when   ArgueIsComplete(argueIsolatedInstanceGroundwork), !ArgueIsComplete(argueIsolatedInstanceFinal) 
@cutscene
$branch .argue.final.main-question

:: argue.final.main-question
{@profWhalen}	Have you found any predators between {h}Site X{/h} and {h}Site Z{/h} which may be the reason why Glass Sponges are not found in the Open Ocean?
$call ArgueLoad(argueIsolatedInstanceFinal)
$if ArgueSetClaim(IsolatedInstanceFinalClaim, jobs.arctic-isolated-instance.argue.claimLabelFinal)
	$call ArgueFactSlot(PterasterObscurus.Eats.GlassSponge)
	$call ArgueFactSlot(Y_IceCrevice.Population.PterasterObscurus)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
	$answer correct, .argue.final.complete
	$answer *, .argue.final.unrelated
$choice .argue.giveUpArgument; Let me get back to you.
$choose branch

:: argue.final.unrelated
$call ArgueClearFacts()
$call ArgueHideClaim()
{@profWhalen}	Hmmmm. I don't see how that is relevant.
				We're looking for a predator of the Glass Sponges and a population count of the predator to prove they live in the area.
$branch .argue.final.main-question

:: argue.giveUp
{@profWhalen}    No worries, I'm sure you'll figure it out!

:: argue.giveUpArgument
{@profWhalen}    No worries, I'm sure you'll figure it out!
$call ArgueUnload()
$call ArgueCancelClaim()

// END
:: argue.final.complete
$call ArgueComplete()
{@profWhalen}	Aha! The Cushion Stars eat the Glass Sponges in Site Y before they can make it to Site Z.
				Nice thinking!
$call CompleteJob()
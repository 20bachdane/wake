# basePath job.arctic-isolated-instnace

// INTRO
:: start
@trigger    JobStarted
@cutscene

{@player} Okay, I'm ready to figure out what's going on with those mysterious Glass Sponges!
		  They seemed so happy at Site X, but there are none here at Site Z.
{@profArctic} Yeah, that's definitely odd. 
		   Apart from the light conditions, Site X and Site Z are similar... and sponges don't react poorly to light.
{@player}   What do you think is happening to them? 
{@profArctic}	Usually organisms are missing if they're too stressed to stick around, or if something eats all of them.
			You'll need to figure out if either of these are true for the sponges.	
$if !HasEntity(GlassSponge)
	{@guide}	But first, make sure to scan the Glass Sponge at Site X.
$endif
{@player} Got it. Thanks!  

:: scanSpongeComplete
@trigger	JobTaskCompleted
@when		JobTaskTop(scanAll)
@once
@cutscene
{@guide}  Adequate work, O! You've scanned the Glass Sponge.
		  Now you'll need to scan any new species out in the Frosted Sea, here at Site Z. 

// PREDATOR THEORY


:: scansComplete
@trigger	JobTaskCompleted
@when		taskId == "scanAll"
@once
@cutscene
{@player} Okay, I think that's all the species!
		  Now I need to find out if any of the predators from Site Z eat the Glass Sponges.
		  Time to head back to the Meredith.

:: experimentCompleteZ
@trigger	ExperimentFinished
@when		tankType == "Observation", jobs:arctic-isolated-instance.checkedCrab, jobs:arctic-isolated-instance.checkedSeal, jobs:arctic-isolated-instance.checkedShark
@once
@cutscene
{@player} Huh. No lo entiendo.
	      None of these predators seem to eat Glass Sponges... but I feel like I've seen some half-eaten Glass Sponges lying around.
{@guide} Yes. It is, as humans might say, perplexing.
{@player} Something else must be eating them.
$if !JobTaskCompleted(determineStress)
	{@guide} According to my data, {nameof profArctic} had one other theory.
	{@player} Oh yeah... we still need to figure out if Site Z is stressing the sponges!
			  Maybe the Stress Tank will help us solve this. 
$else
	{@player} What should I do now, {nameof @guide}?	
	{@guide} I'd recommend checking in with {nameof @profArctic}. Maybe she'll have a new idea. 
$endif


:: predatorFound
@trigger	BestiaryEntryAdded
@when		entryId == "PterasterObscurus", JobTaskTop(experimentPredatorAll)
@once
@cutscene
{@player} Yes! We found a new predator!
		  Kinda cute, aren't they?
		  Now we just need to find out if Cushion Stars like snacking on Glass Sponges.

:: experimentCompleteAll
@trigger	BestiaryFactAdded
@when		factId == "PterasterObscurus.Eats.GlassSponge", JobTaskCompleted(experimentPredatorAll)
@once
@cutscene
{@player} Finally! We've found a species that eats Glass Sponges!
$if HasFact(Y_IceCrevice.Population.PterasterObscurus)
	{@guide}	And you've already counted the population of Cushion Stars at Site Y.
	$branch .predatorComplete
$else
	{@guide} Yes, this looks quite promising, O!
	{@player} But... we still don't have proof the Cushion Stars live at Site Y.
	{@guide} Affirmative. You will need to return to Site Y and count the Cushion Star population.
	{@player} Got it. Thanks, {nameof @guide}.
$endif

:: populationComplete
@trigger	JobTaskCompleted
@when		taskId == "countPopulations", scene:name == "RS-4Y"
@once
@cutscene
{@player} Okay, {nameof @guide}. I think we've solved it!
		  The {pluralnameof GlassSponge} at Site X would need to pass through Site Y in order to reach Site Z.
		  But when the sponges get to Site Y, the {pluralnameof PterasterObscurus} eat them all.
		  That would explain why they're missing from Site Z!
$branch .predatorComplete

:: predatorComplete
$if !JobTaskCompleted(determineStress)
	{@guide} According to my data, {nameof profArctic} had one other theory.
	{@player} Oh yeah... we still need to figure out if Site Z is stressing the sponges!
			  Maybe the Stress Tank will help us solve this. 
$else
	{@guide}	Sounds like it's time to show {nameof profArctic} what you've found!
$endif

// STRESS THEORY

:: stressDeterminedFinal
@trigger	JobTaskCompleted
@when		taskId == "determineStress", JobTaskTop(discussFindings)
@once
@cutscene
{@player} Okay. We've got the stress ranges for the Glass Sponges!
		I'll just need to compare them with the conditions at Site Z, to see if they're relevant.
		What now, {nameof @guide}?
{@guide} You have investigated both of {nameof profArctic}'s theories.
		 I think you're ready to report back!

:: stressDeterminedFirst
@trigger	JobTaskCompleted
@when		taskId == "determineStress", !JobTaskTop(discussFindings)
@once
@cutscene
{@guide}  Adequate work, O! You'll just need to compare those results with the conditions at Site Z to see if they are relevant.
		 According to my data, {nameof profArctic} had another theory about why the Glass Sponges are missing.
{@player}  Oh yeah... something might be eating them!
		  Let's look into that next. 

// Put Glass Sponge in tank with predators

:: checkPredators
@trigger	ExperimentStarted
@when		tankType == "Observation"
@cutscene
$if ExperimentHasCritter("GlassSponge"), ExperimentHasCritter("SnowCrab")
	$set jobs:arctic-isolated-instance.checkedCrab = true
$endif
$if ExperimentHasCritter("GlassSponge"), ExperimentHasCritter("RibbonSeal")
	$set jobs:arctic-isolated-instance.checkedSeal = true
$endif
$if ExperimentHasCritter("GlassSponge"), ExperimentHasCritter("SalmonShark")
	$set jobs:arctic-isolated-instance.checkedShark = true
$endif

// CATCH-ALL GUIDE TEXT

:: catchScanSponge
@trigger	RequestPartnerHelp
@when		JobTaskTop(scanSponge)
@boostScore -5
@cutscene
{@player} What now, {nameof @guide}?
{@guide}	Go to Site X and scan a {nameof GlassSponge}.

:: catchScanAll
@trigger	RequestPartnerHelp
@when		JobTaskTop(scanAll)
@boostScore -5
@cutscene
{@player} What should we do next?
{@guide}	Go to Site Z and scan any new species.

:: catchCheckCrab
@trigger	RequestPartnerHelp
@when		JobTaskTop(checkPredator), !jobs:arctic-isolated-instance.checkedCrab
@boostScore -5
@cutscene
{@player} What now, {nameof guide}?
{@guide}  You need to find out if any predators from Site Z eat Glass Sponges.
		  I would suggest placing them together in your {h}Observation Tank{/h}. 

:: catchCheckSeal
@trigger	RequestPartnerHelp
@when		JobTaskTop(checkPredator), !jobs:arctic-isolated-instance.checkedSeal
@boostScore -5
@cutscene
{@guide}	Use your Observation Tank to find out if any predators from {h}Site Z{/h} eat Glass Sponges.
			I believe you have more species to observe. 

:: catchCheckShark
@trigger	RequestPartnerHelp
@when		JobTaskTop(checkPredator), !jobs:arctic-isolated-instance.checkedShark
@boostScore -5
@cutscene
{@guide}	Use your Observation Tank to find out if any predators from {h}Site Z{/h} eat Glass Sponges.
			I believe you have more species to observe. 

:: catchChecksBeforeTaskUpdate
@trigger	RequestPartnerHelp
@when		!JobTaskCompleted(findPredator)
@boostScore -6
@cutscene
{@guide}	It appears you've gathered all the information you need, O! Time to end the experiment.

:: catchDiscussFindings
@trigger	RequestPartnerHelp
@when		JobTaskTop(discussFindings)
@boostScore -5
@cutscene
{@player} What should we do now, {nameof @guide}?
{@guide}  Return to the research station and report your findings to {nameof @profArctic}!

:: catchFindPredator
@trigger	RequestPartnerHelp
@when		JobTaskTop(findPredator)
@boostScore -5
@cutscene
{@guide}	Scan Sites X and Y for potential predators of Glass Sponges.

:: catchExperimentPredatorAll
@trigger	RequestPartnerHelp
@when		JobTaskTop(experimentPredatorAll)
@boostScore -5
@cutscene
{@guide}	Use the Observation tank to see if the {nameof PterasterObscurus} eats Glass Sponges.

:: catchCountPopulations
@trigger	RequestPartnerHelp
@when		JobTaskTop(countPopulations)
@boostScore -5
@cutscene
{@guide}	Head back to Site Y and count how many {pluralnameof PterasterObscurus} there are.

:: catchDetermineStress
@trigger	RequestPartnerHelp
@when		JobTaskTop(determineStress)
@boostScore -5
@cutscene
{@guide}	Find the Glass Sponge's stress levels using the Stress Tank.

:: catchReportFinal
@trigger	RequestPartnerHelp
@when		JobTaskTop(reportFinal)
@boostScore -5
@cutscene
{@player}   What should I do next, {nameof @guide}?
{@guide}	Return to the station and talk to {nameof @profArctic}!


// ARGUMENTATION

//ARGUMENT 1: Groundwork

:: argue.groundwork.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(argueIsolatedInstanceGroundwork)
@cutscene
{@profArctic}  How'd it go out there, Ollie? 
$branch .argue.groundwork.main-question

:: argue.groundwork.main-question
{@profArctic}	Did you figure out which theory might explain why there are no {pluralnameof GlassSponge} in the {m}Frosted Sea{/m}?
$choice .argue.groundwork.lightClaim; The Sponges are stressed by the light levels.
$choice .argue.groundwork.predatorClaim; There's a predator eating the Sponges.
$choice .argue.giveUp; Let me get back to you.
$choose branch

	// STRESS

:: argue.groundwork.lightClaim
$if ArgueIsComplete(argueIsolatedInstanceGroundworkStress)
	{@profArctic}   Oh... I thought we'd already covered this, Ollie. 	
			        The light levels seem fine. Something else must be going on.
	$branch .argue.groundwork.main-question
$else
	{@profArctic}	Hmm. That could be it. Do you have evidence about the current light levels at Site Z?
	$call ArgueLoad(argueIsolatedInstanceGroundworkStress)
	$if ArgueSetClaim(IsolatedInstanceGroundworkStressClaim, jobs.arctic-isolated-instance.argue.claimLabelStress)
		$call ArgueFactSlot(GlassSponge.Light.Stressed)
		$call ArgueFactSlot(Z_OpenOcean.Light)
	$endif
	$call ArgueDisplayClaim()
	$branch .argue.groundwork.chooseLightFacts
$endif

:: argue.groundwork.chooseLightFacts
$choice #argueFactSet; Present facts from AQOS
	$answer correct, .argue.groundwork.lightComplete
	$answer *, .argue.groundwork.unrelated
$choice .argue.giveUpArgument; Let me get back to you.
$choose branch

:: argue.groundwork.lightComplete
$call ArgueComplete()
{@profArctic}	Actually, these light levels seem fine. It seems like something else is going on.
$if ArgueIsComplete(argueIsolatedInstanceGroundworkPredator)
	$branch .argue.groundwork.bothComplete
$else
	$branch .argue.groundwork.main-question
$endif

:: argue.groundwork.unrelated
$call ArgueRejectIncorrect()
{@profArctic} I don't think that's the answer we need, Ollie. Got anything else?
$branch .argue.groundwork.chooseLightFacts

	// PREDATOR

:: argue.groundwork.predatorClaim
$if ArgueIsComplete(argueIsolatedInstanceGroundworkPredator)
	{@profArctic}  I thought we already talked about this, Ollie. There are no predators that eat Glass Sponges in Site Z.
	$branch .argue.groundwork.main-question
$else
	{@profArctic}	Hmmm. Have you observed this?
	$call ArgueLoad(argueIsolatedInstanceGroundworkPredator)

	$if JobTaskTop(discussFindings)
		$choice .argue.groundwork.predatorComplete; Actually, none of the Site Z predators ate the sponges.
		$choice .argue.giveUpArgument; Let me get back to you.
	$else
		$choice .argue.giveUpArgument; Still working on it!
	$endif
		$choose branch
$endif

:: argue.groundwork.predatorComplete
$call ArgueComplete()
{@profArctic}  Oh, that's interesting! Then there must be something else going on.	
$if ArgueIsComplete(argueIsolatedInstanceGroundworkStress)
	$branch .argue.groundwork.bothComplete
$else
	$branch .argue.groundwork.main-question
$endif

	// BOTH

:: argue.groundwork.bothComplete
$call ArgueLoad(argueIsolatedInstanceGroundwork)
$call ArgueComplete()
{@profArctic}	Hmmm. I can see you've done your research, but we still don't have an answer.

$if HasFact(PterasterObscurus.Eats.GlassSponge), HasFact(Y_IceCrevice.Population.PterasterObscurus)
	$goto .argue.final.intro
$endif

{@player}	  Ugh. I don't get it. ¡Esto es imposible! How do you stay so patient?
{@profArctic}  Trust me, it takes practice.
				Let's dig a little deeper. We know there are plenty of Glass Sponges at Site X, and none of them at Site Z.
			   Could something be happening to them on the way?
{@player} 	You mean... at Site Y? 
{@profArctic} Exactly. A predator at Site Y may be eating all the Glass Sponges before they can go any farther.
				That may be a good place to check out next.

// ARGUMENT 2: Final (missing) piece


:: argue.final.intro
@trigger    TryArgumentation
@when   ArgueIsComplete(argueIsolatedInstanceGroundwork), !ArgueIsComplete(argueIsolatedInstanceFinal)
@cutscene
$branch .argue.final.main-question

:: argue.final.main-question
{@profArctic}	Have you found any predators between {h}Site X{/h} and {h}Site Z{/h} that could be stopping the Glass Sponges from reaching the Frosted Sea? 
$call ArgueLoad(argueIsolatedInstanceFinal)
$if ArgueSetClaim(IsolatedInstanceFinalClaim, jobs.arctic-isolated-instance.argue.claimLabelFinal)
	$call ArgueFactSlot(PterasterObscurus.Eats.GlassSponge)
	$call ArgueFactSlot(Y_IceCrevice.Population.PterasterObscurus)
$endif
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
	$answer correct, .argue.final.complete
	$answer *, .argue.final.unrelated
$choice .argue.giveUpArgument; Let me get back to you.
$choose branch

:: argue.final.unrelated
$call ArgueClearFacts()
$call ArgueHideClaim()
{@profArctic}	Um... did you mean to show me this?
				We need a predator of Glass Sponges, and a population count of the predator to prove they live at Site Y.
$branch .argue.final.main-question

:: argue.giveUp
{@profArctic}    Okay, Ollie. No worries. I'm sure you'll figure it out!

:: argue.giveUpArgument
{@profArctic}    No worries, Ollie. Just let me know when you're ready!
$call ArgueUnload()
$call ArgueCancelClaim()

// END
:: argue.final.complete
$call ArgueComplete()
{@profArctic} Aha! So the Cushion Stars eat all the Glass Sponges at Site Y, before they can make it here to Site Z.
			  This was a tricky one. I'm impressed by your persistance. 
{@player}	  Ha. My mom would call it stubbornness. 
{@profArctic}  Well, whatever you want to call it, I think your sister had it, too. 
			   Amazing work out there, Ollie. Whenever you want another job, just let me know.  

$call CompleteJob()

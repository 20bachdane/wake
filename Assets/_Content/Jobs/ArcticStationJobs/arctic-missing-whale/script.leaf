#basePath   job.arctic-missing-whale

:: start
@trigger    JobStarted
@cutscene

$branch common.ringPhone

$set jobs:arctic-missing-whale.foundWhale = 0
{@profWhalen}	Some of our researchers down south have been tracking a certain pod of whales for some time now.
                Recently however, one of our trackers went out, and we haven't been able to find them since.
                The tracker was attached to one of the matriarchs of the pod we call "Linda".
                Would you be able to go check her last known location and see if you can find her?  
{@player}   Can do!
{@profWhalen}  A mother whale is called a Cow, so sending you off to find her makes you a cowboy!
{@player}   When then, I reckon we ought to saddle-up and mosey on over.
{@guide}    Oh, brother...

:: helpFindWhale
@trigger    RequestPartnerHelp
@when 		scene:name != "RS-4W", !JobTaskTop(reportBack)
@cutscene
{@player} 	What should I be doing again?
$if !HasEntity(Detritus), jobs:arctic-whalefall.num-attempts > 0, !HasUpgrade(Engine)
    {@guide}	You'll need to look into Linda's remains. But first, you'll need an engine.
$else
    {@guide}	We need to see if we can locate the Linda.
                Why don't you check your AQOS to see her last known location?
$endif

:: enterScene
@trigger    SceneStart
@when       scene:name == "RS-4W", JobStartedOrComplete(arctic-missing-whale)
@once
@cutscene
{@guide}    Look's like we're picking up a faint signal. The tracker is definitely here.
            Either Linda's here somewhere, or her tracker fell off.
			
:: LookAround
@trigger    RequestPartnerHelp
@when       scene:name == "RS-4W"
@cutscene
{@player}   What should I be doing?
$if !HasEntity(WhaleTracker)
{@guide}    Let's start by seeing if we can find that tracker.
$elseif !HasEntity(Detritus), jobs:arctic-whalefall.num-attempts > 0, !HasUpgrade(Engine)
{@guide}    Well, you can't do much more here until you get an engine.
            I bet the shop has one in stock.
$elseif !HasEntity(Detritus)	
{@guide}    Have you found any evidence of Linda herself?
$elseif	HasEntity(Detritus), !HasFact(W_WhaleFall.Population.Detritus)
{@guide}	Detritus, huh? How much did you scan? A whale amount? 
$endif

:: gotDetritus
@trigger    JobTasksUpdated
@once
@when 		HasEntity(WhaleTracker), HasEntity(Detritus), !HasFact(W_WhaleFall.Population.Detritus) 
@cutscene
{@guide}	Detritus, huh? How much did you scan? A whale amount? 

:: gotScans
@trigger    JobTasksUpdated
@once
@when 		HasEntity(WhaleTracker), HasEntity(Detritus), HasFact(W_WhaleFall.Population.Detritus) 
@cutscene
$set jobs:arctic-missing-whale.foundWhale = 1
{@guide} Looks like we were able to find her...
         Let's head back and let Professor Whalen know.

:: helpBackToShip
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportBack)
@cutscene
{@player} 	Where should I be going again?
{@guide}	We located the whale, so let's report back to Professor Whalen.

// CATCH-ALL GUIDE TEXT

:: catchFindTracker
@trigger	RequestPartnerHelp
@when		JobTaskTop(findTracker)
@boostScore -5
@cutscene
{@guide}    Look around Site W. There's a missing tracker somewhere.	

:: catchFindWhale
@trigger	RequestPartnerHelp
@when		JobTaskTop(findWhale)
@boostScore -5
@cutscene
{@guide}	Search Site W for signs of the whale named Linda.

:: catchFoundDetritus
@trigger	RequestPartnerHelp
@when		JobTaskTop(foundDetritus)
@boostScore -5
@cutscene
{@guide}	Count how much detritus is on the whale remains.

:: catchReportBack
@trigger	RequestPartnerHelp
@when		JobTaskTop(reportBack)
@boostScore -5
@cutscene
{@guide}	Talk to Professor Whalen in the Office.

// ARGUMENTATION
::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(findLinda)
@cutscene
$call ArgueLoad(findLinda) 
$if ArgueSetClaim(Claim, jobs.arctic-missing-whale.argue.claimLabel) 
    $call ArgueFactSlot(W_WhaleFall.Population.Detritus) 
    $call ArgueFactSlot(W_WhaleFall.Population.WhaleTracker) 
$endif
{@profWhalen}   Have you found Linda?
$choice .argue.showClaim; Yes
$choice .argue.cantFind; No
$choose branch

:: argue.showClaim
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer W_WhaleFall.Population.Detritus, .argue.detritus 
    $answer W_WhaleFall.Population.WhaleTracker, .argue.whaleTracker 
    $answer *, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

::argue.detritus
$if ArgueIsFactSubmitted(W_WhaleFall.Population.WhaleTracker)
    $goto .argue.complete
$else
{@profWhalen}   That's a LOT of detritus. It might be a whale, but did you happen to find our tracker?
                That would confirm that it's her...
$endif
$goto .argue.showClaim

::argue.whaleTracker
$if ArgueIsFactSubmitted(W_WhaleFall.Population.Detritus)
    $goto .argue.complete
$else
{@profWhalen}   Oh no. Maybe it just fell off? 
                You didn't happen to see anything that resembled a dead whale, did you?
$endif
$goto .argue.showClaim

:: argue.unrelated
$call ArgueRejectIncorrect()
{@profWhalen} Ok, that's interesting, but it's not answering my question.
$goto .argue.showClaim

:: argue.giveUp
{@profWhalen} OK. Get back to me when you're ready.

:: argue.cantFind
{@profWhalen}   She's got to be out there somewhere. I hope something hasn't happened to her...
                Don't come back until you've found some evidence of her. 

// END
:: argue.complete
$call ArgueComplete()
{@profWhalen}   Oh. With both pieces of evidence... Well, that's unfortunate.
                I'm sure she will be missed by her pod. I wonder who will take over as leader...
                Anyhow, thanks for letting us know.

$call CompleteJob()

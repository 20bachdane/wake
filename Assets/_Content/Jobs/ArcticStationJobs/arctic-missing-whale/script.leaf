#basePath   job.arctic-missing-whale

:: start
@trigger    JobStarted
@cutscene

{@arcticSci}    Oh, thank you, Ollie. I've been worried sick about poor Linda.
{@player}       Linda?
{@arcticSci}    Our missing whale. One of the matriarchs of her pod. 
                My team has been tracking the pod for some time now. 
                Every year, they migrate through here before returning south.
                This year, however, one was missing. 
                We checked Linda's tracking device, but it seems to have stopped transmitting.
{@player}       Aw, no te preocupes, Professor. I'm sure you'll see Linda again.
                I mean, how hard can it be to find a whale? They're not exactly small.
{@player}       I'll get out there and start searching. 
{@arcticSci}    Thank you, Ollie. Do let me know what you find. 

$call UnlockSite(RS-4W)

$if JobTaskTop(reportBack), !jobs:arctic-missing-whale.triggeredSwitch
    {@guide}   Hmmm. It seems you've already completed all of your job tasks!
    {@player}  Oh yeah... I guess you're right.
    {@guide}   You seem hesitant to report your findings.
    {@player}   I just... I wish it was better news. 
                Guess it's time to tell {nameof @arcticSci} what we discovered. 
    $set jobs:arctic-missing-whale.triggeredSwitch = true
$endif

:: switchToJob
@trigger    JobSwitched
@once
@cutscene
$if JobTaskTop(reportBack), !jobs:arctic-missing-whale.triggeredSwitch
   {@player} What now, {namoef @guide}?
   {@guide} Hmmm. It appears you've finished all of your tasks, Ollie!
            All that's left is to report back to {nameof @arcticSci}.
    $set jobs:arctic-missing-whale.triggeredSwitch = true
$endif

:: helpFindWhale
@trigger    RequestPartnerHelp
@when 		scene:name != "RS-4W", !JobTaskTop(reportBack)
@cutscene
{@player} 	What should we do next, {nameof @guide}?
$if !HasEntity(Detritus), jobs:arctic-whalefall.num-attempts > 0, !HasUpgrade(Engine)
    {@guide}	You will need to investigate Linda's remains.
                But first, you'll need a stronger engine.
                Otherwise that undersea current will keep sweeping you past the skeleton.
     {@player}  Hmm. A stronger engine? I think I saw something in the shop like that. 
$else
    {@guide}	You need to track down Linda, the missing whale.
                Check your AQOS to see her last known location. 
$endif

:: enterScene
@trigger    SceneStart
@when       scene:name == "RS-4W", JobStartedOrComplete(arctic-missing-whale)
@once
@cutscene
{@player}   Okay. Let's do this. Can you scan for Linda's tracker, {nameof @guide}?
{@guide}    Processing,... processing...
            Yes! It appears we're picking up a faint signal.
{@player}   Oh, that's amazing! Linda must be nearby!
            I told Professor Whalen we'd find her. He'll be so happy.  
			
:: LookAround
@trigger    RequestPartnerHelp
@when       scene:name == "RS-4W"
@cutscene
{@player}   What should I be doing, {nameof @guide}?
$if !HasEntity(WhaleTracker)
{@guide}    Start by seeing if you can find Linda's tracker. 
$elseif !HasEntity(Detritus), jobs:arctic-whalefall.num-attempts > 0, !HasUpgrade(Engine)
{@guide}    You will need a stronger engine to investigate further. 
            According to my data, the shop should have one in stock!
$elseif !HasEntity(Detritus)	
{@guide}    See if you can find any evidence of Linda herself. 
$elseif	HasEntity(Detritus), !HasFact(W_WhaleFall.Population.Detritus)
{@guide}	You will need to scan more of the detritus, O. 
$endif

:: gotDetritus
@trigger    JobTasksUpdated
@once
@when 		HasEntity(WhaleTracker), HasEntity(Detritus), !HasFact(W_WhaleFall.Population.Detritus) 
@cutscene
{@player}   Okay, {nameof @guide}. What now?
{@guide}	You'll need to scan more of the detritus in order to complete your task. 

:: gotScans
@trigger    JobTasksUpdated
@when 		JobTaskTop(reportBack)
@once
@cutscene
{@player}   Looks like we've got all we need.
{@guide}    Yes! A windfall of data. 
{@player}   And some bad news for {nameof @arcticSci}.
            I guess we better go tell him. At least now he'll know where she is. 

:: helpBackToShip
@trigger    RequestPartnerHelp
@when 		JobTaskTop(reportBack)
@cutscene
{@player} 	Can you remind me where to go, {nameof @guide}?
{@guide}	My sensors indicate that you are stalling, O.
{@player}   What? Of course I'm not stalling!
{@guide}    Ah. I must have misinterpreted the data. 
            You need to report back to {nameof @profArctic} and tell him that Linda has been found. 

// CATCH-ALL GUIDE TEXT

:: catchFindTracker
@trigger	RequestPartnerHelp
@when		JobTaskTop(findTracker)
@boostScore -5
@cutscene
{@player}   Where should we start, {nameof @guide}?
{@guide}    You need to search Site W for Linda's tracking device. 

:: catchFindWhale
@trigger	RequestPartnerHelp
@when		JobTaskTop(findWhale)
@boostScore -5
@cutscene
{@player}   Okay, {namoef @guide}. We've got the tracker. What now?
{@guide}    You need to search the area for any proof that Linda is here.
{@player}   I'm sure she's close. I can feel it!
            Let's keep searching. 

:: catchFoundDetritus
@trigger	RequestPartnerHelp
@when		JobTaskTop(foundDetritus)
@boostScore -5
@cutscene
{@player} Wow. Poor Linda.
          I guess it really is her. 
          What should we do now, {nameof @guide}?
{@guide}  You need to count all of the detritus.
          A whale-sized amount will prove to {nameof @arcticSci} that Linda is here.

:: catchReportBack
@trigger	RequestPartnerHelp
@when		JobTaskTop(reportBack)
@boostScore -5
@cutscene
{@guide}	Return to the station to talk to {nameof @arcticSci}.

// ARGUMENTATION
::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(findLinda)
@cutscene
$call ArgueLoad(findLinda) 
$if ArgueSetClaim(Claim, jobs.arctic-missing-whale.argue.claimLabel) 
    $call ArgueFactSlot(W_WhaleFall.Population.Detritus) 
    $call ArgueFactSlot(W_WhaleFall.Population.WhaleTracker) 
$endif
{@profArctic}   Have you found Linda?
$choice .argue.showClaim; Yes... but I'm sorry. It's not good news.
$choice .argue.cantFind; No, sorry. No sign of her yet. 
$choose branch

:: argue.showClaim
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer W_WhaleFall.Population.Detritus, .argue.detritus 
    $answer W_WhaleFall.Population.WhaleTracker, .argue.whaleTracker 
    $answer *, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

::argue.detritus
$if ArgueIsFactSubmitted(W_WhaleFall.Population.WhaleTracker)
    $goto .argue.complete
$else
{@profArctic}  Oh dear. That's certainly enough detritus to be a whale's remains.
               It might be Linda... but there are many Bowhead Whales that pass through here. 
               Did you find anything to confirm that it's her? 
$endif
$goto .argue.showClaim

::argue.whaleTracker
$if ArgueIsFactSubmitted(W_WhaleFall.Population.Detritus)
    $goto .argue.complete
$else
{@profArctic}   Oh dear... Linda's tracker. This explains why we lost the signal.
                But that means she could be anywhere.
                Unless you found more evidence of her whereabouts...? 
$endif
$goto .argue.showClaim

:: argue.unrelated
$call ArgueRejectIncorrect()
{@profArctic} That is undoubtedly fascinating, Ollie. But I'm not sure it's helpful here. 
$goto .argue.showClaim

:: argue.giveUp
{@profArctic} Okay, Ollie. Please let me know if you find anything. 

:: argue.cantFind
{@profArctic}   Alas. I had a feeling this would happen.
                We may never track her down. I hope nothing bad has happened to her...

// END
:: argue.complete
$call ArgueComplete()
{@profArctic}   Oh. Well, then. 
                Well. That's unfortunate.
{@player}       I'm so sorry, Professor. I know you've been studyihng Linda for a long time. 
{@profArctic}   Oh, don't be sorry, Ollie. I'm grateful to you. Now we know where she is.
                Though I do wonder how she died.
                If you ever want to help out again, perhaps we could get to the bottom of this together.
{@player}       Of course. 
{@profArctic}   Thank you, Ollie. You're incredibly like your sister, you know.
                Come back anytime.

$call CompleteJob()

:: basePath job.arctic-cause-of-death

// INTRO

:: start
@trigger    JobStarted
@cutscene
{@guide}    We should check out both of {nameof @profArctic}'s theories, one by one, to see which is most plausible.
            Whether it was the water conditions or a lack of food, we'll need some more information.
$if JobTaskCompleted(getPopulationData)
    {@profArctic}   We know for a fact that these whales eat both diatoms and ice algae.
    $call GiveFact(BowheadWhale.Eats.Diatoms)
    $call GiveFact(BowheadWhale.Eats.IceAlgae)
$endif
$if JobTaskCompleted(getEnvironmentData)
    {@profArctic}    These should be the water conditions that stress the whales. You can compare this to the water conditions at {h}site W{/h}.
    $call GiveFact(BowheadWhale.Light.Stressed)
    $call GiveFact(BowheadWhale.PH.Stressed)
    $call GiveFact(BowheadWhale.Temperature.Stressed)
$endif

::helpLost
@trigger    RequestPartnerHelp
@when   scene:name != "RS-4W", JobTaskTop(getEnvironmentData)
@cutscene
{@player}   Hmmm, what are we doing again? 
{@guide}    We should check out both of {nameof @profArctic}'s theories, one by one, to see which is most plausible.
            Whether it was the water conditions or a lack of food, we'll need some more information.
            Why don't you check your {h}AQOS{/h} to see where we should go next.

::helpScanProbE
@trigger    RequestPartnerHelp
@when   scene:name == "RS-4W", JobTaskTop(getEnvironmentData)
@cutscene
{@guide} If the water conditions proved deadly for Linda, we'd better scan the {h}water chemistry probe{/h} for more information.

::helpScanProbP
@trigger    RequestPartnerHelp
@when   scene:name == "RS-4W", JobTaskTop(getPopulationData)
@cutscene
{@guide}    If Linda died of starvation, we'd better see if there was a decline in a food population that is just bouncing back.
            I'm not sure what whales eat, so we might just have to count everything.

::helpReport
@trigger    RequestPartnerHelp
@when   JobTaskTop(reportBack)
@cutscene
{@player}   Hmmm, what should I do now? 
{@guide}    Let's report back to {nameof @profArctic}.

::giveWhaleEat
@trigger    JobTasksUpdated
@when   JobTaskCompleted(getHistPopulationData)
@once
@cutscene
{@profArctic}    Sorry I caught you late, but we know for a fact that these whales eat both diatoms and ice algae.
$call GiveFact(BowheadWhale.Eats.Diatoms)
$call GiveFact(BowheadWhale.Eats.IceAlgae)

::giveWhaleStress
@trigger    JobTasksUpdated
@when   JobTaskCompleted(getEnvironmentData)
@once
@cutscene
{@profArctic}    We already know the water conditions that stress the whales. You can compare this to the water conditions here.
$call GiveFact(BowheadWhale.Light.Stressed)
$call GiveFact(BowheadWhale.PH.Stressed)
$call GiveFact(BowheadWhale.Temperature.Stressed)

// CATCH-ALL GUIDE TEXT

:: catchGetEnvironmentData
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getEnvironmentData)
@boostScore -5
@cutscene
{@guide}    Collect water chemistry data from a probe at Site W.

:: catchGetPopulationData
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getPopulationData)
@boostScore -5
@cutscene
{@guide}    Collect population history data from a probe at Site W, then count the current populations of organisms at the site.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Talk to {nameof @profArctic} in the Office.

// ARGUMENTATION
::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(PopulationHistory)
@cutscene
$if ArgueIsComplete(foodCauseDeath)
    {@profArctic} Okay, so we've determined that some change in Linda's food supply seems to have lead to her death.
    What can we determine about the populations for Diatoms and Ice Algae?
    $goto .argue.populationHistory
$endif
{@profArctic} Which hypothesis seems most likely?
    $if !ArgueIsComplete(foodCauseDeath)
        $choice .argue.foodClaim; There was a problem with her food supply
    $endif
    $if !ArgueIsComplete(lightCauseDeath)
        $choice .argue.stressClaim; Something in the environment harmed her
    $endif
    $choice .argue.giveUp; Let me check my notes and get back to you.
$choose branch

:: argue.foodClaim
{@profArctic}  What do these whales eat? 
$call ArgueLoad(foodCauseDeath)
$if ArgueSetClaim(Claim, jobs.arctic-cause-of-death.argue.claimLabel1) 
	$call ArgueFactSlot(BowheadWhale.Eats.IceAlgae) 
	$call ArgueFactSlot(BowheadWhale.Eats.Diatoms) 
$endif
$goto .argue.showClaim

:: argue.stressClaim
{@profArctic}   Really? How does the environment compare to the stressed ranges I gave you?
$call ArgueLoad(lightCauseDeath)
$if ArgueSetClaim(Claim, jobs.arctic-cause-of-death.argue.claimLabel2) 
	$call ArgueFactSlot(BowheadWhale.Temperature.Stressed) 
	$call ArgueFactSlot(W_WhaleFall.Temperature) 
$endif
$goto .argue.showClaim2

::argue.showClaim
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.howKnow 
    $answer *, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

::argue.showClaim2
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.transition
    $answer *, .argue.unrelated2
$choice .argue.giveUp; Let me get back to you.
$choose branch

::argue.showClaim3
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.complete
    $answer *, .argue.unrelated3
$choice .argue.giveUp; Let me get back to you.
$choose branch

::argue.howKnow
$call ArgueCancelClaim()
$call ArgueComplete()
{@profArctic}   What do you know about the populations for Diatoms and Ice Algae?
$goto argue.populationHistory

::argue.populationHistory
$call ArgueLoad(PopulationHistory)
$if ArgueSetClaim(Claim, jobs.arctic-cause-of-death.argue.claimLabel1) 
    $call ArgueFactSlot(W_WhaleFall.PopulationHistory.IceAlgae) 
    $call ArgueFactSlot(W_WhaleFall.PopulationHistory.Diatoms) 
    $call ArgueFactSlot(W_WhaleFall.Population.IceAlgae) 
    $call ArgueFactSlot(W_WhaleFall.Population.Diatoms) 
$endif
$goto .argue.showClaim3

::argue.transition
$call ArgueCancelClaim()
$call ArgueComplete()
$call ArgueLoad(foodCauseDeath)
{@profArctic}   These seem compatible. It must have been the food supply.
$goto .argue.foodClaim

:: argue.unrelated
$call ArgueRejectIncorrect()
{@profArctic}   Ok, that's interesting, but it's not answering my question.
                What facts might relate to Linda's {h}food supply{/h}?
$goto .argue.showClaim

:: argue.unrelated2
$call ArgueRejectIncorrect()
{@profArctic}   Ok, that's interesting, but it's not answering my question.
                What facts might relate to {h}stressors{/h} Linda's environment?
$goto .argue.showClaim2

:: argue.unrelated3
$call ArgueRejectIncorrect()
{@profArctic}   Ok, that's interesting, but it's not answering my question.
                What can you tell me about the populations of the creatures in Linda's diet?
$goto .argue.showClaim3

:: argue.giveUp
{@profArctic} OK. Get back to me when you're ready.
// $call ArgueCancelClaim()
$call ArgueClearFacts()

// END
:: argue.complete
$call ArgueComplete()
{@profArctic}   Ugh, whales sometimes get lured in by ice algae, but it becomes less available as summer comes. 
                I bet she got stuck when the ice came in and couldn't get back to her pod.
                I think this seems like a reasonable argument to explain Linda's death.
                Thanks for all your hard work {nameof @player}!

$call CompleteJob()
:: basePath job.turtle-danger2

// INTRO

:: start
@trigger    JobStarted
@cutscene

{@profHarper}   We want to figure out how the turtles are responding to the reef that has grown all around the oil rig.
                Specifically, we want you to collect the historic population data and develop a model using what you know about the food web.
{@player}       I'm happy to help, but why build a model if we can easily get the historic population date? Can we just look at the trend?
{@profHarper}   We need a model so we can understand why the populations are changing the way they are.
                If you can build a model that outputs populations that match the historic data,
                then we can start to assume that our model is describing how the ecosystem works. 
{@player}       Got it. So the model is tested against the world?
{@profHarper}   Exactly!  

// CATCH-ALL GUIDE TEXT

:: catchHistoricalData
@trigger    RequestPartnerHelp
@when 		JobTaskActive(historicalData)
@boostScore -5
@cutscene
{@kevin}    Gather historical population data from a probe at Site O.

:: catchSyncModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(interventionDecision)
@boostScore -5
@cutscene
{@kevin}    Do some experimenting to obtain rules about Site O organisms. Then, head to the Modeling Lab and make a Sync Model.
            The model should match the population history you collected.

:: catchVisualize
@trigger    RequestPartnerHelp
@when       scene:name == "Modeling",modeling:phase == "visual"   
@cutscene
@boostScore 100
{@player}   Got any ideas what to do next, Kevin?
$if HasEntity(AngelFish),HasEntity(Cyanobacteria),HasEntity(ElkhornCoral),HasEntity(SeaPearl),HasEntity(LoggerheadTurtle),HasEntity(RedGrouper)
    //Player has all required critters
    $if HasFact(AngelFish.Reproduce.Stressed),HasFact(Cyanobacteria.Reproduce),HasFact(ElkhornCoral.Reproduce),HasFact(SeaPearl.Reproduce.Stressed),HasFact(LoggerheadTurtle.Reproduce),HasFact(RedGrouper.Reproduce)
        //Has all reproduce facts

        $if HasFact(AngelFish.Eats.SeaPearl.Stressed),HasFact(LoggerheadTurtle.Eats.Cyanobacteria),HasFact(LoggerheadTurtle.Eats.AngelFish),HasFact(RedGrouper.Eats.Cyanobacteria),HasFact(RedGrouper.Eats.AngelFish)
            //Has all eat facts
            {@kevin}    That should be all the rules we need, make sure you have all the rates and let's go!
        $else
            {@kevin}    Seems like we still are missing some consumption rules. Maybe take another look at the Observation Tank?
        $endif
    $else
        //Missing at least 1 reproduction fact
        {@kevin}    It seems like we're missing some of the reproduction rates, how about you take a trip over to the Measurement Tank?
    $endif
$else
    //Player is missing at least 1 critter
    {@kevin}    Looks like we're still missing some critters.
    $if !HasEntity(AngelFish)
        {@kevin}    Have you tried scanning the Angelfish yet?
    $else
        $if !HasEntity(Cyanobacteria)
            {@kevin}    Have you tried scanning some Cyanobacteria yet?
        $else
            $if !HasEntity(ElkhornCoral)
                {@kevin}    Have you tried scanning some Elkhorn Coral yet?
            $else
                $if !HasEntity(SeaPearl)
                    {@kevin}    Have you tried scanning any Sea Pearls yet?
                $else
                    $if !HasEntity(LoggerheadTurtle)
                        {@kevin}    Have you tried scanning some Loggerhead Turtles yet?
                    $else
                        $if !HasEntity(RedGrouper)
                            {@kevin}    Have you tried scanning some Red Grouper yet?
                        $endif
                    $endif
                $endif
            $endif
        $endif
    $endif
$endif

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@kevin}    Report back to {nameof profHarper}.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(turtleDanger)
@cutscene
$call ArgueLoad(turtleDanger)
{@profHarper} How are turtle populations responding?
$choice .argue.turtlesSafe2; It seems the turtle populations are stable
$choice .argue.giveUp; Let me get back to you
$choose branch

:: argue.turtlesSafe2
$if ArgueSetClaim(Claim, jobs.bayou-turtle-danger2.argue.claimLabel) 
	$call ArgueFactSlot(O_OilRig.turtleDanger.Model.Describe)
$endif
{@profHarper} Were you able to obtain a numerical model that describes the populations?
$goto .argue.showClaim

:: argue.showClaim
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.complete 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelated
$call ArgueRejectIncorrect()
{@profHarper} Ok, that's interesting, but it's not answering my question.
$goto .argue.showClaim

:: argue.giveUp
{@profHarper} OK. Get back to me when you're ready.
$call ArgueCancelClaim()

// END

:: argue.complete
$call ArgueComplete()
{@profHarper}   The turtles do seem to be maintaining their populations. 
                We will need a higher accuracy rating in the future, if we want to predict from this though.
$call CompleteJob()
# basePath job.turtle-danger2

// INTRO
:: start
@trigger    JobStarted
@cutscene

{@profBayou}  I'm still investigating the impact of the oil rig reef on the Loggerhead Turtles.
              I need you to collect the historic population data for Site O... 
              And then make a model using the historic data and your knowledge of the food web.
{@player}     Oh... okay, sure.
{@profBayou}  You sound uncertain, Ollie. Something bothering you? 
{@player}     Well... why do we need to model what's been happening at Site O? 
              You've been collecting data this whole time. It's all there. 
{@bayouSci}    These new scientists sure are green, huh, Professor?
{@bayouSci}   It's not just about WHAT'S happening at the ecosystem, kid. You need to work out WHY it's happening.
              If your model and the real world match, that means your model is doin' what it's supposed to.
             Then we can use it to make decisions about what to do next.
{@profBayou}  We? I thought you had more important things to worry about, Silias.
{@bayouSci}   Oh... ah... I do, of course.
              Just couldn't stand to leave the kid hangin'. She looked so clueless.
{@player}     Um. Thanks, Silias. I guess. 
$set jobs:bayou-turtle-danger.sync-failed = false


// MODELING SUGGESTIONS

:: triggerSyncFailure
@trigger    SimulationSyncError
@when       !jobs:bayou-turtle-danger.sync-failed
@once
$set jobs:bayou-turtle-danger.sync-failed = true

:: helpModelSync.Visual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(syncModel), scene:name == "Modeling", modeling:phase == "visual"
@cutscene
$branch .modelSuggestions

:: helpModelSync.Sync
@trigger    RequestPartnerHelp
@when 		JobTaskActive(syncModel), scene:name == "Modeling", modeling:phase == "sync"
@cutscene
$branch .modelSuggestions

:: modelSuggestions
$if HasFact(LoggerheadTurtle.Reproduce), HasFact(LoggerheadTurtle.Eats.Cyanobacteria), HasFact(LoggerheadTurtle.Eats.AngelFish), HasFact(RedGrouper.Reproduce), HasFact(RedGrouper.Eats.AngelFish), IsFactFullyUpgraded(LoggerheadTurtle.Eats.AngelFish), HasFact(RedGrouper.Eats.Cyanobacteria), IsFactFullyUpgraded(RedGrouper.Eats.Cyanobacteria), HasFact(AngelFish.Reproduce.Stressed), HasFact(AngelFish.Eats.SeaPearl.Stressed), IsFactFullyUpgraded(AngelFish.Eats.SeaPearl.Stressed), HasFact(Cyanobacteria.Reproduce), HasFact(SeaPearl.Reproduce.Stressed), HasFact(ElkhornCoral.Reproduce.Stressed)
    $if HasFact(O_OilRig.turtleDangerJellies.Model.Visual)
        {@guide}    You're done with this portion! Head to the {h}Describe{/h} tab next.
    $else
        {@guide}    Once you import your facts and save the Visual model, we should be good to make our Describe model!
    $endif
$else
    $if !jobs:hide-n-seek.sync-failed
        {@guide}    Time to try out your model in the {h}Describe{/h} tab.
    $else
        {@guide}    Seems like we don't have enough information to complete our model accurately.
                    Look for {h}question marks{/h} in the  Visual model interface, those point to where we may need more data.
        $if !HasFact(LoggerheadTurtle.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(LoggerheadTurtle.Eats.Cyanobacteria)
            $branch .suggestTurtleEat
        $elseif !HasFact(LoggerheadTurtle.Eats.AngelFish)
            $branch .suggestTurtleEat
        $elseif !HasFact(RedGrouper.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(RedGrouper.Eats.AngelFish)
            $branch .suggestGrouperEat
        $elseif !IsFactFullyUpgraded(RedGrouper.Eats.AngelFish)
            $branch .suggestGrouperEat
        $elseif !HasFact(RedGrouper.Eats.Cyanobacteria)
            $branch .suggestGrouperEat
        $elseif !IsFactFullyUpgraded(RedGrouper.Eats.Cyanobacteria)
            $branch .suggestGrouperEat
        $elseif !HasFact(AngelFish.Reproduce.Stressed)
            $branch .suggestReproduce
        $elseif !HasFact(AngelFish.Eats.SeaPearl.Stressed)
            $branch .suggestAngelEat
        $elseif !IsFactFullyUpgraded(AngelFish.Eats.SeaPearl.Stressed)
            $branch .suggestAngelEat
        $elseif !HasFact(Cyanobacteria.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(SeaPearl.Reproduce.Stressed)
            $branch .suggestReproduce
        $elseif !HasFact(ElkhornCoral.Reproduce.Stressed)
            $branch .suggestReproduce
        $endif
    $endif
$endif

:: suggestReproduce
{@guide}    Did you get all the reproduction rates?

:: suggestMeasure
{@guide}    Using the {h}Measurement Tank{/h} to find the rates of unmeasured behaviors may help us here.

:: suggestTurtleEat
{@guide}    Maybe look into what {nameof LoggerheadTurtle} eats?

:: suggestGrouperEat
{@guide}    Maybe look into what {nameof RedGrouper} eats?

:: suggestAngelEat
{@guide}    Maybe look into what {nameof AngelFish} eats?



// CATCH-ALL GUIDE TEXT
:: catchHistoricalData
@trigger    RequestPartnerHelp
@when 		JobTaskActive(historicalData)
@boostScore -5
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}  Check your {item}AQOS{/item} to find your first task!

:: helpProbe
@trigger    RequestPartnerHelp
@when 		JobTaskActive(historicalData), scene:name == "RS-3O"
@boostScore -5
@cutscene
{@player}  Okay... I'm stuck. Can you help me out, {nameof @guide}?
{@guide}   Certainly, O.
           You can collect the historic population data from Site O's {item}probe{/item}.

:: backToShip
@trigger    RequestPartnerHelp
@when 		JobTaskCompleted(measureStress), !IsPlayerOnShip()
@cutscene
{@player}   What now, {nameof @guide}?
{@guide}    You need to return to the AquaLab to conduct your experiments!

:: catchStressRanges
@trigger    RequestPartnerHelp
@when 		JobTaskActive(measureStress), IsPlayerOnShip(), scene:name != "ExperimentV2"
@cutscene
{@player} What should we do next, {nameof @guide}?
{@guide}  You'll need to get to the {m}Experiment Lab{m/} and investigate the {item}Stress ranges{/item} for these organisms!

:: catchSyncModel
@trigger    RequestPartnerHelp
@when 		JobTaskActive(syncModel)
@boostScore -5
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide} You need to use your Experiment Lab to obtain rules about the {h}Site O{/h} organisms. 
         Then head to the {m}Modeling Lab{/m} and make a {item}Descriptive Model{/item}.
         Remember, the Descriptive Model should match the historic data you collected. 
         To find out what rules you're missing, check your {item}Visual Model{/item}. 

:: catchVisualize
@trigger    RequestPartnerHelp
@when       scene:name == "Modeling", modeling:phase == "visual", JobTaskTop(syncModel) 
@cutscene
@boostScore 100
{@player}   I'm sort of stuck.
            Can you help me out, {nameof @guide}?
{@guide}    Certainly, O. 
$if HasEntity(AngelFish),HasEntity(Cyanobacteria),HasEntity(ElkhornCoral),HasEntity(SeaPearl),HasEntity(LoggerheadTurtle),HasEntity(RedGrouper)
    //Player has all required critters

    $if HasFact(AngelFish.Reproduce.Stressed),HasFact(Cyanobacteria.Reproduce),HasFact(ElkhornCoral.Reproduce.Stressed),HasFact(SeaPearl.Reproduce.Stressed),HasFact(LoggerheadTurtle.Reproduce),HasFact(RedGrouper.Reproduce)
        //Has all reproduce facts

        $if HasFact(AngelFish.Eats.SeaPearl.Stressed),HasFact(LoggerheadTurtle.Eats.Cyanobacteria),HasFact(LoggerheadTurtle.Eats.AngelFish),HasFact(RedGrouper.Eats.Cyanobacteria),HasFact(RedGrouper.Eats.AngelFish)
            //Has all eat facts
            {@guide}    You have obtained all the rules you need. Check to make sure you have all the rates from the Measurement Tank before moving on.
        $else
            {@guide}    You are still missing some consumption rules. Perhaps you should take another look at the Observation Tank. 
        $endif
    $else
        //Missing at least 1 reproduction fact
        {@guide}    You are still missing at least 1 reproduction rate. I would suggest consulting your Measurement Tank.
        {@guide}    You might want to also make sure you have gotten both the stressed and unstressed rates.
    $endif
$else
    //Player is missing at least 1 critter
    {@guide}    You seem to be missing some of the organisms from Site O. 
    $if !HasEntity(AngelFish)
        {@guide}    Have scanned any Angelfish yet?
    $else
        $if !HasEntity(Cyanobacteria)
            {@guide}    Have you scanned the Cyanobacteria?
        $else
            $if !HasEntity(ElkhornCoral)
                {@guide}    Have scanned the Elkhorn Coral?
            $else
                $if !HasEntity(SeaPearl)
                    {@guide}    Have scanned any Sea Pearls yet?
                $else
                    $if !HasEntity(LoggerheadTurtle)
                        {@guide}    Have you scanned the Loggerhead Turtles yet?
                    $else
                        $if !HasEntity(RedGrouper)
                            {@guide}    Have you scanned the Red Grouper?
                        $endif
                    $endif
                $endif
            $endif
        $endif
    $endif
$endif

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@player}  What should I do now, {nameof @guide}?
{@guide}    Report back to {nameof profBayou}!

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(turtleDanger)
@cutscene
$call ArgueLoad(turtleDanger)
{@profBayou} Okay, Ollie. I'm ready to hear your findings.
             How have the turtle populations responded to the reef?
$choice .argue.turtlesSafe2; The turtle populations are stable!
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.turtlesSafe2
$if ArgueSetClaim(Claim, jobs.bayou-turtle-danger2.argue.claimLabel) 
	$call ArgueFactSlot(O_OilRig.turtleDanger.Model.Describe)
$endif
{@profBayou} Interesting. Did you obtain a numerical model that describes the populations?
$goto .argue.showClaim

:: argue.showClaim
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.complete 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelated
$call ArgueRejectIncorrect()
{@profBayou} That's not relevant, Ms. Ramirez. 
$goto .argue.showClaim

:: argue.giveUp
{@profBayou} Hmmm. Well, don't take too long. A lot is riding on this. 
$call ArgueCancelClaim()

// END

:: argue.complete
$call ArgueComplete()
{@profBayou}   The turtles do seem to be maintaining their populations.
{@bayouSci}    Huh. I gotta say, that's not what I expected.
{@player}      So... this is a good thing, right? The reef isn't hurting anyone?
{@profBayou}   I still don't have enough data to make that conclusion.
{@bayouSci}    Oh, come ON...
{@profBayou}   We'll need a higher accuracy rating if we want to make predictions based on this model.
               Let me know when you have time for another job, Ollie. We'll keep working.
               Nice work out there.  
$call CompleteJob()
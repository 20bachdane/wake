:: basePath job.boom-cause

// INTRO

:: start
@trigger    JobStarted
@cutscene
$if HasEntity(Methane),HasEntity(Methanogen)
    {@guide} I think we already have everything we need. You might want to look over AQOS again before we make any claims to {nameof profBayou}.
$else
    {@guide} Let's just go down to {h}Site N{/h} and start scanning stuff, I guess.
$endif

:: atSiteN
@trigger SceneStart
@when    scene:name == "RS-3N", JobTaskActive(methaneScan)
@once
@cutscene
{@guide} There must be something here that would indicate how this disaster happened. When you think you've found it, go talk to {nameof profBayou}.

:: methaneScanned
@trigger JobTaskCompleted
@when    JobTaskActive(reportBack)
@once
@cutscene
{@guide}    Looks like there was some different types of methane down here.
{@guide}    Let's not stay here longer than we need to, that stuff is explosive!

// CATCH-ALL GUIDE TEXT
:: catchGoToSiteN
@trigger    RequestPartnerHelp
@when 		scene:name != "RS-3N", JobTaskActive(methaneScan)
@boostScore -5
@cutscene
{@guide}    Dive at {h}Site N{/h} and scan anything you think might have caused the wreckage.
            We can get there by diving deep down into {h}Site O{/h}
            Hope you aren't scared of the dark!

:: catchAtSiteNScan
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-3N", JobTaskActive(methaneScan)
@boostScore -5
@cutscene
{@guide}    Scan anything you think might have ruined the communications equipment.

:: catchAtSiteNTag
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-3N", JobTaskActive(methaneTag)
@boostScore -5
@cutscene
{@guide}    Tag the types of methane you found to get their population information.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		
@boostScore -10
@cutscene
{@guide}    You're ready to talk it through with {nameof profBayou}, though you might want to review your AQOS first.


// ARGUMENTATION
::  argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(bayouBoomArgue)
@cutscene
$goto .argue.firstQuestion

::  argue.firstQuestion
{@profBayou} What caused the communication tower to collapse?
$if !ArgueIsComplete(bayouBoomArgueFishCriminals)
    $choice .argue.methaneHere; There's methane here.
    $choice .argue.fishersFault; Fishers blew it up.
    $choice .argue.giveUp; Let me get back to you.
    $choose branch
$else
    $choice .argue.methaneHere; There's methane here.
    $choice .argue.giveUp; Let me get back to you.
    $choose branch
$endif

:: argue.methaneHere
$call ArgueLoad(bayouBoomArgueMethane)
{@profBayou} Really? What methane did you find at {h}Site N{/h}?
$goto .argue.chooseFacts

:: argue.chooseFacts
$if ArgueSetClaim(Claim, jobs.bayou-boom-cause.argue.claimLabel1) 
    $call ArgueFactSlot(N_ThermalVent.Population.Methane) 
$endif
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer N_ThermalVent.Population.Methane, .argue.done
    $answer N_ThermalVent.Population.Methanogen, .argue.done
    $answer *, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.fishersFault
$call ArgueLoad(bayouBoomArgueFishCriminals)
$if ArgueSetClaim(Claim, jobs.bayou-boom-cause.argue.claimLabel2) 
    $call ArgueFactSlot(SeaOtter.Eats.Urchin) 
$endif
$call ArgueDisplayClaim()
{@profBayou} What evidence do you have of foul play?
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.unrelatedFishers
    $answer *, .argue.unrelatedFishers
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelatedFishers
{@profBayou} I don't think this actually indicates human involvement.
$call ArgueRejectIncorrect()
$call ArgueComplete()
$goto .argue.firstQuestion

:: argue.unrelated
{@profBayou}   That doesn't look like a type of Methane to me...
$call ArgueRejectIncorrect()
$goto .argue.chooseFacts

:: argue.giveUp
{@profBayou} OK. Get back to me when you're ready.
$call ArgueCancelClaim()
$call ArgueUnload()

// END
:: argue.done
$call ArgueLoad(bayouBoomArgue)
$call ArgueComplete()
{@profBayou}   Oh, I hear Methane is very explosive. It must have heated enough to ignite and explode. Good work!
$call CompleteJob()
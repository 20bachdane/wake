# basePath job.boom-cause

// INTRO

:: start
@trigger    JobStarted
@cutscene
{@bayouSci} Okay, kid, let's get to it.
            Last time I was down at Site N, there was an explosion. 
            It took out our comms tower--I was lucky to escape. 
            The professor here thinks it was my fault.
{@profBayou} That's not accurate, Silias. I merely said that you've been known to drive recklessly...
             And you're the only person who was down there. 
{@bayouSci}  I'm tellin' you, Professor, it wasn't me. 
{@player}   But then... what caused the explosion? What's down there? 
{@bayouSci} That's what we need you to work out, kid. 
$if HasEntity(Methane),HasEntity(Methanogen)
    {@bayouSci}  If I'm recallin' rightly, you already gathered data from Site N.  
                 Take a look at your AQOS and see if you can figure out what happened. 
$else
    {@bayouSci} What are you waitin' for? Head down to {h}Site N{/h} and start scanning some stuff.
                Oh, and try not to crash, okay? I'd hate to have to tell your mother we got you blown up.  
    {@player} Yeah. Me too.  
$endif

:: atSiteN
@trigger SceneStart
@when    scene:name == "RS-3N", JobTaskActive(methaneScan)
@once
@cutscene
{@player} Wow. Dark down here, isn't it? 
{@guide}  My sensors indicate you are experiencing stress.
{@player} Let's just stay focused, V. We need to find something that could've triggered an explosion...
          Without blowing ourselves up in the process. 
{@guide} Don't worry, O. According to my analysis, our chances of experiencing a similar explosion are only 45.2%!
{@player} {nameof @guide}, that is EXTREMELY unhelpful.

:: methaneTag
@trigger JobTaskCompleted
@when    JobTaskActive(methaneTag)
@once
@cutscene
{@player} Hmmmm... I wonder how much {nameof Methane} is down here...

:: methaneScanned
@trigger JobTaskCompleted
@when    JobTaskActive(reportBack)
@once
@cutscene
{@player} Wow. I think we've solved it, V.
{@player} Methane is explosive, right?
{@guide} Very much so, O. Our chances of encountering an explosion have increased to 70.2%.
{@player} Aaaand that's our cue to get out of here. 

// CATCH-ALL GUIDE TEXT
:: catchGoToSiteN
@trigger    RequestPartnerHelp
@when 		scene:name != "RS-3N", JobTaskActive(methaneScan)
@boostScore -5
@cutscene
{@player} What should I do now, {nameof @guide}?
{@guide}    Dive at {h}Site N{/h} and scan anything you think might have caused the explosion.
            We can get there by diving deep down into {h}Site O{/h}

:: catchAtSiteNScan
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-3N", JobTaskActive(methaneScan)
@boostScore -5
@cutscene
{@player} What's our next move, {nameof @guide}?
{@guide}    Scan anything you think might have ruined the communications equipment.

:: catchAtSiteNTag
@trigger    RequestPartnerHelp
@when 		scene:name == "RS-3N", JobTaskActive(methaneTag)
@boostScore -5
@cutscene
{@player}  What should I do now?
{@guide}   Tag the types of methane you found to obtain the population information.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		
@boostScore -10
@cutscene
{@player}  What now, {nameof @guide}?
{@guide}   You've obtained the data you need to report back to {nameof @bayouSci}!
            You may want to review your AQOS first.


// ARGUMENTATION
::  argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(bayouBoomArgue)
$goto .argue.firstQuestion

::  argue.firstQuestion
@cutscene
{@bayouSci} Alright, kid. Lay it on me.
           What caused the comms tower to explode? 
$if !ArgueIsComplete(bayouBoomArgueFishCriminals)
    $choice .argue.methaneHere; There's methane at Site N.
    $choice .argue.fishersFault; Fishers blew it up.
    $choice .argue.giveUp; Let me get back to you.
    $choose branch
$else
    $choice .argue.methaneHere; There's methane at Site N.
    $choice .argue.giveUp; Let me get back to you.
    $choose branch
$endif

:: argue.methaneHere
$call ArgueLoad(bayouBoomArgueMethane)
{@bayouSci} Methane?? You sure about that, kid? 
            What types of methane did you find?
$goto .argue.chooseFacts

:: argue.chooseFacts
$if ArgueSetClaim(Claim, jobs.bayou-boom-cause.argue.claimLabel1) 
    $call ArgueFactSlot(N_ThermalVent.Population.Methane) 
$endif
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer N_ThermalVent.Population.Methane, .argue.done
    $answer N_ThermalVent.Population.Methanogen, .argue.done
    $answer *, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.fishersFault
$call ArgueLoad(bayouBoomArgueFishCriminals)
$if ArgueSetClaim(Claim, jobs.bayou-boom-cause.argue.claimLabel2) 
    $call ArgueFactSlot(SeaOtter.Eats.Urchin) 
$endif
$call ArgueDisplayClaim()
{@bayouSci} Whoa, back up. You messin' with me, kid?
            What evidence do you have of foul play?
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.unrelatedFishers
    $answer *, .argue.unrelatedFishers
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelatedFishers
{@bayouSci} Um. Kid, this doesn't add up. 
            Maybe give it another try. 
$call ArgueRejectIncorrect()
$call ArgueComplete()
$goto .argue.firstQuestion

:: argue.unrelated
{@bayouSci}  That's not a type of methane. Try again, kid. 
$call ArgueRejectIncorrect()
$goto .argue.chooseFacts

:: argue.giveUp
{@bayouSci} No problem, kid. Let me know when you've worked it out. 
$call ArgueCancelClaim()
$call ArgueUnload()

// END
:: argue.done
$call ArgueLoad(bayouBoomArgue)
$call ArgueComplete()
{@bayouSci} Ha! Told ya, Professor. I didn't even go near that comms tower.
            The methane must've heated enough to ignite and cause an explosion. 
{@profBayou} That adds up. I'm sorry for doubting you, Silias.
{@bayouSci} Aw, no harm done, Professor.
            The real question is, whose idea was it to put in a comms tower without checking for highly explosive methane vents??
            We all better be real careful down there.
            Thanks for figurin' it out, kid. 
{@player}   De nada. I was happy to help. 
$call CompleteJob()
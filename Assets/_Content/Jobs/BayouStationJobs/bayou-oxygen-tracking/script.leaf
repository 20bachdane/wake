# basePath job.bayou-oxygen-tracking

// INTRO

:: start
@trigger    JobStarted
@cutscene
{@profBayou}    The oxygen levels in the {nameof RS-3P} are decreasing, but our current models cannot account for the drop.
                We need you to make a model that lays out which organisms are producing oxygen and which organisms are consuming oxygen.

:: allScanned
@trigger    JobTaskCompleted
@when       taskId == "scanAll"
@once
@cutscene
{@guide}    That should be everything we can find here. Next let's take these to the {nameof MeasurementTank} and see how each of these affects oxygen levels.

:: effectsMeasured
@trigger    JobTaskCompleted
@when       taskId == "measureCritters"
@once
@cutscene
{@guide}    Well, that's a lot of numbers. Feeding that into the modeling tool should help you humans make sense of this.

:: modelCompleted
@trigger    JobTasksUpdated
@when       JobTaskTop(reportBack)
@once
@cutscene
{@guide}    Flow of oxygen modeled! Let's head back to the station.


// CATCH-ALL GUIDE TEXT

:: catchScanAll
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanAll)
@boostScore -5
@cutscene
{@guide}    Scan everything you can in the {nameof RS-3P}.

:: catchMeasureCritters
@trigger    RequestPartnerHelp
@when 		JobTaskActive(measureCritters)
@boostScore -5
@cutscene
{@guide}    Put organisms from the {nameof RS-3P} into the measurement tank and turn off the stabilizer to see how they impact their surroundings.

:: catchMakeVisual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(makeVisual)
@boostScore -5
@cutscene
{@guide}    Head to the Modeling Lab and make a visual model of the {nameof RS-3P}.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Report back to {nameof @profBayou} to discuss your findings about oxygen.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(oxygenTrackingArgueFinal)
@cutscene
$if ArgueIsComplete(oxygenTrackingArgueModel)
    {@profBayou}    You've already shown me the model.
$elseif ArgueIsComplete(oxygenTrackingFinal)
    {@profBayou}    You've already shown me that {nameof WhiteShrimp} and {nameof DecomposingBaceria} consume oxygen.
$else
    $call ArgueLoad(oxygenTrackingArgueModel)
    $if ArgueSetClaim(ClaimModel, jobs.bayou-oxygen-tracking.argue.claimLabelModel)
        $call ArgueFactSlot(P_DeadZone.Model.OxygenTracking.Visual)
    $endif
    {@profBayou}    Have you modeled the flow of oxygen through the {nameof RS-3P}?
    $branch .argue.showClaimModel
$endif

// Model

:: argue.showClaimModel
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.completeModel
    $answer incorrect, .argue.unrelatedModel
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelatedModel
$call ArgueRejectIncorrect()
{@profBayou}    That's not helpful, Ms. Ramirez. 
$branch .argue.showClaimModel

:: argue.completeModel
$call ArgueCancelClaim()
$call ArgueComplete()
$branch .argue.beginFinal


// Final

$call ArgueLoad(oxygenTrackingArgueFinal) 
$if ArgueSetClaim(ClaimFinal, jobs.bayou-oxygen-tracking.argue.claimLabelFinal)
    $call ArgueFactSlot(WhiteShrimp.Consumes.Oxygen) 
    $call ArgueFactSlot(DecomposingBaceria.Consumes.Oxygen) 
$endif
$branch .argue.showClaimFinal

:: argue.showClaimFinal
{@profBayou}    Based on your model, which organisms consume oxygen in the {nameof RS-3P}?
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.completeFinal
    $answer incorrect, .argue.unrelatedFinal
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelatedFinal
$call ArgueRejectIncorrect()
{@profBayou}    That's not helpful, Ms. Ramirez. 
$branch .argue.showClaimFinal

:: argue.completeFinal
$call ArgueCancelClaim()
{@profBayou}    I see. And does either of those stand out as the culprit?
                In other words...
$branch .argue.discussionStart

// Discussion

:: argue.discussionStart
{@profBayou}    Do either {nameof WhiteShrimp} or {nameof DecomposingBacteria} consume a larger share of the oxygen?
$choice .argue.shrimpConsumeMore; The {nameof WhiteShrimp} consume more.
$choice .argue.decompConsumeMore; The {nameof DecomposingBaceria} consume more.
$choice .argue.aboutSame; They consume about the same in total.
$choice .argue.giveUpDiscuss; Let me get back to you.
$choose branch

:: argue.shrimpConsumeMore
{@profBayou}    I suppose if you look at them individually, any one shrimp consumes more oxygen than any one bacterium.
                But the {nameof DecomposingBacteria} far outnumber the shrimp, so overall, the {nameof DecomposingBacteria} consume more oxygen in this case.
$branch .argue.completeDiscussion

:: argue.decompConsumeMore
$branch .argue.completeDiscussion

:: argue.aboutSame
{@profBayou}    I don't see much evidence for this. Consider revising your claim.
$branch .argue.discussionStart

:: argue.giveUpDiscuss
{@profBayou}    Okay, then. But don't take too long. A lot of people are waiting on our decision. 

// Shared

:: argue.giveUp
{@profBayou}    Okay, then. But don't take too long. A lot of people are waiting on our decision. 
$call ArgueClearFacts()
$call ArgueCancelClaim()

// End
:: argue.completeDiscussion
$call ArgueComplete()
{@profBayou}    So the {nameof DecomposingBacteria} are claiming most of the oxygen, and {nameof WhiteShrimp} are suffering.
                But I am still wondering why there are so many {nameof DecomposingBacteria} all of the sudden...
                Regardless, thank you for your help Ms. Ramirez.
$call CompleteJob()

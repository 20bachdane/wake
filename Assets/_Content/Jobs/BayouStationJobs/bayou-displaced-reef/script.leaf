# basePath job.bayou-displaced-reef

:: start
@trigger    JobStarted
@cutscene

$branch common.ringPhone

{@profBayou}   Have you explored the {h}Bayou Station{/h} yet? There appears to be a new reef growing in the middle of {h}Site O{/h}. 
                Would you be able to go pop over and help us report back on what exactly is growing over there?
{@player}   You can count on me!

:: giveROVTagger
@trigger    SceneStart
@when       scene:name == "BayouStation"
@once
@cutscene
$if !HasUpgrade(ROVTagger)
	$branch common.ringPhone
	{@profBayou} When you took this job I had the tech install a population counter tool on your sub.
	$call GiveUpgrade(ROVTagger)
	{@profBayou} You should see the {nameof ROVTagger} at the top of your view.  
	{@profBayou} If you switch it on and move close to a scanned species, the {nameof ROVTagger} will {h}count{/h} it.
	{@profBayou} Count enough of them and your {nameof ROVTagger} will do the rest and give you a population estimate.
	{@profBayou} Go ahead and give it a try!
	$set    jobs:common-dive.seen.tagger-intro = true
$endif

:: makeAModel
@trigger    SceneStart
@when       JobTaskActive(makeModel), scene:name == "Ship"
@once
@cutscene
{@guide}    Let's head to our ship's modeling room to compile our data into a report for {nameof @profBayou}.
$call UnlockRoom("modelingRoom")
$call UnlockRoom("Modeling")

// CATCH-ALL GUIDE TEXT

:: catchVisitSiteO
@trigger    RequestPartnerHelp
@when 		JobTaskActive(visitSiteO)
@boostScore -5
@cutscene
{@guide}    Head to {h}site O{/h}, it's just South of us!

:: catchGetScans
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getScans)
@boostScore -5
@cutscene
{@guide}    Scan and count the species at {h}site O{/h}.

:: catchGetCounts
@trigger    RequestPartnerHelp
@when 		JobTaskActive(getCounts)
@boostScore -5
@cutscene
{@guide}    Count the species at {h}site O{/h}.

:: catchMakeModel
@trigger    RequestPartnerHelp
@when       JobTaskActive(makeModel)
@boostScore -5
@cutscene
$if IsPlayerOnShip()
    {@guide}    We need to head to the {map-name}Modeling Lab{/map-name} to construct a {nameof VisualModel}.
$else
    {@guide}    Let's head back to our ship!
$endif

:: catchReportback
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Report back to {nameof profBayou}.

// ARGUMENTATION
::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(siteOAnalysis)
@cutscene
$call ArgueLoad(siteOAnalysis)
$if ArgueSetClaim(Claim, jobs.bayou-displaced-reef.argue.claimLabel)
    $call ArgueFactSlot(O_OilRig.displacedReef.Model.Viz)
$endif

{@profBayou} Have you constructed a {h}visual model{/h} for the critters at {nameof O_OilRig}?
$branch .argue.showClaim

:: argue.showClaim
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
		$answer correct, .argue.correctPopulation
		$answer incorrect, .argue.incorrectPopulation
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.incorrectPopulation
$call ArgueRejectIncorrect()
{@profBayou} Ok, that's interesting, but it's not answering my question.
$goto .argue.showClaim
$call ArgueCancelClaim()

:: argue.giveUp
{@profBayou} OK. Get back to me when you're ready.

::end

:: argue.correctPopulation
$call ArgueComplete()
{@profBayou} That looks great. 
{@profBayou} It looks like you are getting good at estimating populations with your sub.
$call CompleteJob()
# basePath job.bayou-blue-waters

// INTRO

:: start
@trigger    JobStarted
@cutscene
{@profBayou}    Have you noticed how green the {nameof RS-3P} is, Ms. Ramirez?
{@player}   Yeah, it's pretty overwhelming. I'm glad I don't have to leave my sub to study it.
{@profBayou}    Well, that water used to be blue.
{@player}   Really?
{@profBayou}    Really. Well, blue-er. I'd like you to get to the bottom of why it has shifted so drastically.
                We might be able to reverse the effects.

:: cyanoScanned
@trigger    JobTaskCompleted
@when       taskId == "findGreen"
@once
@cutscene
{@guide}    This is a green thing! It could be the reason the water is no longer blue... somehow.
            Let's find out everything we can about these creatures.

:: experimentsCompleted
@trigger    JobTasksUpdated
@when       JobTaskTop(reportBack)
@once
@cutscene
{@guide}    We've learned quite a bit about {nameof Cyanobacteria}. Let's show {nameof @profBayou} how they're impacting the water.

// CATCH-ALL GUIDE TEXT

:: catchFindGreen
@trigger    RequestPartnerHelp
@when 		JobTaskActive(findGreen)
@boostScore -5
@cutscene
{@guide}    We're looking for what could be making the water in {fullnameof RS-3P} look green.
            I'm sure some combination of your tools will reveal something.

:: catchStressCB
@trigger    RequestPartnerHelp
@when 		JobTaskActive(stressCB)
@boostScore -5
@cutscene
{@guide}    Stick {nameof Cyanobacteria} in the {nameof StressTank} and record the stress ranges.

:: catchMeasureEffect
@trigger    RequestPartnerHelp
@when 		JobTaskActive(measureEffect)
@boostScore -5
@cutscene
{@guide}    The {nameof MeasurementTank} will help us understand {nameof Cyanobacteria} better.
$if !HasFact(Cyanobacteria.Consume.Light)
    {@guide}    I recommend measuring {nameof Cyanobacteria}'s effect on its environment with water that does not stress it. 
$elseif !HasFact(Cyanobacteria.Consume.Light.Stressed)
    {@guide}    Might I suggest measuring {nameof Cyanobacteria}'s effect on its environment with water that stresses it?
    // Cyanobacteria stress requires Site W or Y (or give it to player via script)
$endif

:: catchMeasureReproduce
@trigger    RequestPartnerHelp
@when 		JobTaskActive(measureReproduce), !JobTaskActive(measureEffect)
@boostScore -5
@cutscene
{@guide}    The {nameof MeasurementTank} will help us understand {nameof Cyanobacteria} better.
$if !HasFact(Cyanobacteria.Reproduce)
    {@guide}    Might I suggest measuring {nameof Cyanobacteria}'s reproduce rate in water that does not stress it?
$elseif !HasFact(Cyanobacteria.Reproduce.Stressed)
    {@guide}    I recommend measuring {nameof Cyanobacteria}'s reproduce rate in water that stresses it.
    // Cyanobacteria stress requires Site W or Y (or give it to player via script)
$endif

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Report back to {nameof @profBayou} with what you've learned about {nameof Cyanobacteria}.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(blueWatersArgueCyanoExtra)
@cutscene
$if ArgueIsComplete(blueWatersArgueCyanoPop)
    {@profBayou}    Previously we discussed that there are enough {nameof Cyanobacteria} to turn the water green.
    $branch .argue.beginExtra
$else
    $call ArgueLoad(blueWatersArgueCyanoPop) 
    {@profBayou}    What is turning the water green?
    $choice .argue.stillSearching; I'm still searching!
    $choice .argue.lightTrick; It's a trick of the light.
    $if JobTaskTop(reportBack)
        $choice .argue.cyanoCause; Cyanobacteria!
    $endif
    $choose branch
$endif

// Population

:: argue.stillSearching
{@profBayou}    Let me know when you've found something.
$call ArgueClearFacts()
$call ArgueCancelClaim()

:: argue.lightTrick
{@player}   Pretty sure it's a trick of the light -- nothing has changed about the ecosystem.
{@profBayou}    As convenient as that would be Ms. Ramirez, that seems doubtful. I advise you to keep looking.
$call ArgueClearFacts()
$call ArgueCancelClaim()

:: argue.cyanoCause
{@profBayou}    Oh, really? But they are so small...
{@player}       There's a lot of them.
$if ArgueSetClaim(ClaimPop, jobs.bayou-blue-waters.argue.claimLabelPop)
    $call ArgueFactSlot(P_DeadZone.Population.Cyanobacteria) 
$endif
{@profBayou}    They must have some truly impressive numbers if they are turning everything green.
                Can you show me the {nameof Cyanobacteria} populations?
$branch .argue.showClaimPop

:: argue.showClaimPop
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.completePop
    $answer incorrect, .argue.unrelatedPop
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelatedPop
$call ArgueRejectIncorrect()
{@profBayou} That's not helpful, Ms. Ramirez. 
$branch .argue.showClaimPop

:: argue.completePop
$call ArgueCancelClaim()
$call ArgueComplete()
{@profBayou}    Hmm. Yes, I believe this would do it.
$branch .argue.beginExtra

// Extra

:: argue.beginExtra
 $call ArgueLoad(blueWatersArgueCyanoExtra) 
$if ArgueSetClaim(ClaimExtra, jobs.bayou-blue-waters.argue.claimLabelExtra)
    $call ArgueFactSlot(Cyanobacteria.Consume.Light) 
    $call ArgueFactSlot(Cyanobacteria.Consume.Light.Stressed) 
    $call ArgueFactSlot(Cyanobacteria.Consume.Reproduce) 
    $call ArgueFactSlot(Cyanobacteria.Consume.Reproduce.Stressed)
$endif
$branch .argue.showClaimExtra

:: argue.showClaimExtra
{@profBayou}    What else did you find out about {nameof Cyanobacteria}?
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.completeExtra
    $answer incorrect, .argue.unrelatedExtra
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelatedExtra
$call ArgueRejectIncorrect()
{@profBayou} That's not helpful, Ms. Ramirez. 
$branch .argue.showClaimExtra

// Shared

:: argue.giveUp
{@profBayou} Okay, then. But don't take too long. A lot of people are waiting on our decision. 
$call ArgueClearFacts()
$call ArgueCancelClaim()

// End
:: argue.completeExtra
$call ArgueComplete()
{@profBayou}    Hmm. So the {nameof Cyanobacteria} turn the water green, but they also take up a lot of light.
$call CompleteJob()
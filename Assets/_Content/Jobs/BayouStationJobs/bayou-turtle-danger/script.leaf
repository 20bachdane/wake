:: basePath job.turtle-danger

// INTRO

:: start
@trigger    JobStarted
@cutscene

{@profHarper}	People are concerned about the Loggerhead Turtles that live by the Oil Rig Reef.
				For this job, I need you to develop a food web with the species you found there.
                We want to learn if there are any new predators of the Turtles.
$if !HasEntity(Cyanobacteria)
	{@profHarper}	There is a new organism at the Oil Rig Reef you can research now that you have the {h}Microscope{/h}.
                    Be sure to scan it and count the population like you did for the other species.
$endif
$if !HasUpgrade(VisualModel)
	{@profHarper}	I've unlocked a new room on your Ship, {map-name}the Modeling Lab{/map-name}.
	{@profHarper}	Head there when you need to model the food web.
	$call UnlockRoom("modelingRoom")
	$call UnlockRoom("Modeling")
	$call GiveUpgrade(VisualModel)
$endif

// CATCH-ALL GUIDE TEXT

:: catchScanCyano
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanCyano)
@boostScore -5
@cutscene
{@kevin}    Head to Site O and scan the Cyanobacteria. Make sure you have your Microscope pulled out!

:: catchCountCyano
@trigger    RequestPartnerHelp
@when 		JobTaskActive(countCyano)
@boostScore -5
@cutscene
{@kevin}    Head to Site O and count the Cyanobacteria population. Make sure you have your Microscope pulled out!

:: catchExperimentsForSiteO
@trigger    RequestPartnerHelp
@when 		JobTaskActive(experimentsForSiteO)
@boostScore -5
@cutscene
{@kevin}    Use the Observation Tank to find what Loggerhead Turtles eat at Site O.

:: catchVisualModelO
@trigger    RequestPartnerHelp
@when 		JobTaskActive(visualModelO)
@boostScore -5
@cutscene
{@kevin}    Make a Visual Model of what you found out from the Observation Tank.

:: catchReportback
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@kevin}    Report back to {nameof profHarper}.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(siteOModel)
@cutscene
$call ArgueLoad(siteOModel)
{@profHarper} What can you tell me about the safety of the turtles?
$choice .argue.turtleSafe; The turtles should be safe 
$choice .argue.turtleNotSafe; The turtles might not be safe 
$choose branch

:: argue.turtleSafe
$call ArgueSetClaim(Claim, jobs.bayou-turtle-danger.argue.claimLabel1) 
{@profHarper} Do you have a model that shows the turtles are safe?
$goto argue.showSafeClaim

:: argue.turtleNotSafe
$call ArgueSetClaim(Claim, jobs.bayou-turtle-danger.argue.claimLabel2) 
{@profHarper} Do you have a model that shows the turtles are not safe?
$goto argue.showUnsafeClaim

:: argue.showUnsafeClaim
$call ArgueFactSlot(O_OilRig.turtleDanger.Model.Visual) 
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.goodEvidenceWrongClaim 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.goodEvidenceWrongClaim
{@profHarper} That model doesn't indicate any danger to the turtles. 
    Let's start over.
$call ArgueRejectIncorrect()
$call ArgueClearFacts()
$call ArgueCancelClaim()
$goto .argue.intro

:: argue.showSafeClaim
$call ArgueFactSlot(O_OilRig.turtleDanger.Model.Visual) 
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.complete 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelated
{@profHarper} Ok, that's interesting, but it's not answering my question.
$call ArgueRejectIncorrect()
$call ArgueClearFacts()
$call ArgueCancelClaim()
$goto .argue.intro

:: argue.giveUp
{@profHarper} OK. Get back to me when you're ready.
$call ArgueCancelClaim()

:: argue.complete
$call ArgueComplete()
{@profHarper} Nice work! It looks like the Turtles are safe from any predators here.
{@profHarper} We will need to see a descriptive model that looks at historic populations to know for certain.
$call CompleteJob()
:: end
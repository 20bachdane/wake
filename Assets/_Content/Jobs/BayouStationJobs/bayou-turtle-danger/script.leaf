# basePath job.turtle-danger

// INTRO

:: start
@trigger    JobStarted
@cutscene

{@profBayou} Here's the situation, Ollie. The {pluralnameof LoggerheadTurtle} have lived here for a long time. 
{@profBayou} People are concerned that the {h}Oil Rig Reef{/h} could disrupt their ecosystem. 
             I need to know if the turtles have any new predators.
{@bayouSci}  Dear Lord in heaven. Are we really gonna waste the kid's time on this?
             If there's even a miniscule chance that this reef will mess with our ecosystem, it's gotta go.
             The shrimping industry is already hurting enough.  
{@profBayou} I see. And what about the new, thriving ecosystem that would end up destroyed? 
{@bayouSci}  Look, science ain't pretty. 
{@profBayou} "Pretty" has nothing to do with it. 
            Ollie, please make a Food Web for Site O and report back. 
$if !HasEntity(Cyanobacteria)
	{@profBayou}	Also, I notice you've obtained a {h}Microscope{/h}.
                    That means you'll be able to detect a new organism at Site O.
                    Make sure to scan it and count its population, as you did for the other species. 
$endif
{@player} Copy that. I'll be back soon. 

:: diveSite
@trigger    SceneStart
@when       scene:name == "RS-3O"
@once
@cutscene

{@player} Ay. It was tense in there, {nameof @guide}.
{@player} I think Harper and Silias need to touch some grass. Or kelp, or whatever.
{@guide}  Ah. The nearest turf grass can be found approximately 32 kilometers away. 
{@guide} Shall we offer them some of your mother's bull kelp cookies? 
{@player} Never mind, V. Let's just get this job done, before those two kill each other. 

// CATCH-ALL GUIDE TEXT

:: catchScanCyano
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanCyano)
@boostScore -5
@cutscene
{@player} What should I do now, {nameof @guide}? 
{@guide}  Scan the {nameof Cyanobacteria} at Site O. Make sure to use your {item}Microscope{/item}!

:: catchCountCyano
@trigger    RequestPartnerHelp
@when 		JobTaskActive(countCyano)
@boostScore -5
@cutscene
{@player} So, what's next? 
{@guide}    Count the {nameof Cyanobacteria} population at Site O. Make sure to use your {item}Microscope{/item} pulled out!

:: catchExperimentsForSiteO
@trigger    RequestPartnerHelp
@when 		JobTaskActive(experimentsForSiteO)
@boostScore -5
@cutscene
{@player} Okay, {nameof @guide}. What now?
{@guide}  Use your {item}Observation Tank{/item} to find what Loggerhead Turtles eat at Site O.

:: catchVisualModelO
@trigger    RequestPartnerHelp
@when 		JobTaskActive(visualModelO)
@boostScore -5
@cutscene
{@player} What should I do next, {nameof @guide}?
{@guide}    Make a {item}Visual Model{/item} of what you discovered in the Observation Tank.

:: catchReportback
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@player} What should we do next?
{@guide} You've completed your task. It's time to report back to {nameof profBayou}.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(siteOModel)
@cutscene
$call ArgueLoad(siteOModel)
{@profBayou} Back already, Ollie? I'm impressed.
             So what can you tell me? Are the turtles at Site O in danger?
$choice .argue.turtleSafe; The turtles should be safe from predators.
$choice .argue.turtleNotSafe; The turtles might not be safe from predators.
$choose branch

:: argue.turtleSafe
$call ArgueSetClaim(Claim, jobs.bayou-turtle-danger.argue.claimLabel1) 
{@profBayou} Do you have a model that proves the turtles at {h}Site O{/h} are safe? 
$goto argue.showSafeClaim

:: argue.turtleNotSafe
$call ArgueSetClaim(Claim, jobs.bayou-turtle-danger.argue.claimLabel2) 
{@profBayou} Do you have a model that proves the turtles at {h}Site O{/h} are in danger?
$goto argue.showUnsafeClaim

:: argue.showUnsafeClaim
$call ArgueFactSlot(O_OilRig.turtleDanger.Model.Visual) 
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.goodEvidenceWrongClaim 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.goodEvidenceWrongClaim
{@profBayou} That model doesn't indicate any danger to the turtles, Ms. Ramirez. 
    Let's start over.
$call ArgueRejectIncorrect()
$call ArgueClearFacts()
$call ArgueCancelClaim()
$goto .argue.intro

:: argue.showSafeClaim
$call ArgueFactSlot(O_OilRig.turtleDanger.Model.Visual) 
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.complete 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelated
{@profBayou} That's not helpful, Ms. Ramirez. Please try again. 
$call ArgueRejectIncorrect()
$call ArgueClearFacts()
$call ArgueCancelClaim()
$goto .argue.intro

:: argue.giveUp
{@profBayou} Okay. Please get back to me as soon as you can.
$call ArgueCancelClaim()

:: argue.complete
$call ArgueComplete()
{@profBayou} Hmm. It appears the turtles aren't in danger here. 
             But if we want to know for certain, we'll need to make a descriptive model using historic population data.
{@profBayou} Thank you, Ollie. Your work was adequate.
{@player}    Ha. I think you and my A.I. would get along great.
{@profBayou} ¿Cómo?   
{@player} Oh, uh, nothing. Happy to help, Professor. 
$call CompleteJob()
:: end
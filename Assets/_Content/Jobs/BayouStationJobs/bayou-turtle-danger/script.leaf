:: basePath job.turtle-danger

// INTRO

:: start
@trigger    JobStarted
@cutscene

{@profBayou}	People are concerned about the {pluralnameof LoggerheadTurtle} that live by the {h}Oil Rig Reef{/h}.
				For this job, I need you to develop a food web with the species you found there.
                We want to learn if there are any new predators of the Turtles.
$if !HasEntity(Cyanobacteria)
	{@profBayou}	There is a new organism at the Oil Rig Reef you can research now that you have the {h}Microscope{/h}.
                    Be sure to scan it and count the population like you did for the other species.
$endif
$if !RoomUnlocked("modelingRoom")
    {@profBayou}	I've unlocked a new room on your Helm, {map-name}the Modeling Lab{/map-name}.
    {@profBayou}	Head there when you need to model the food web.
    $call UnlockRoom("modelingRoom")
    $call UnlockRoom("Modeling")
    $call GiveUpgrade(VisualModel)
$endif

// CATCH-ALL GUIDE TEXT

:: catchScanCyano
@trigger    RequestPartnerHelp
@when 		JobTaskActive(scanCyano)
@boostScore -5
@cutscene
{@guide}    Head to {h}Site O{/h} and scan the {nameof Cyanobacteria}. Make sure you have your {item}Microscope{/item} pulled out!

:: catchCountCyano
@trigger    RequestPartnerHelp
@when 		JobTaskActive(countCyano)
@boostScore -5
@cutscene
{@guide}    Head to {h}Site O{/h} and count the {nameof Cyanobacteria} population. Make sure you have your {item}Microscope{/item} pulled out!

:: catchExperimentsForSiteO
@trigger    RequestPartnerHelp
@when 		JobTaskActive(experimentsForSiteO)
@boostScore -5
@cutscene
{@guide}    Use the {item}Observation Tank{/item} to find what Loggerhead Turtles eat at Site O.

:: catchVisualModelO
@trigger    RequestPartnerHelp
@when 		JobTaskActive(visualModelO)
@boostScore -5
@cutscene
{@guide}    Make a {item}Visual Model{/item} of what you found out from the Observation Tank.

:: catchReportback
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Report back to {nameof profBayou}.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(siteOModel)
@cutscene
$call ArgueLoad(siteOModel)
{@profBayou} What can you tell me about the safety of the turtles?
$choice .argue.turtleSafe; The turtles should be safe from predators
$choice .argue.turtleNotSafe; The turtles might not be safe from predators
$choose branch

:: argue.turtleSafe
$call ArgueSetClaim(Claim, jobs.bayou-turtle-danger.argue.claimLabel1) 
{@profBayou} Do you have a model that shows the turtles are safe in {h}Site O{/h}?
$goto argue.showSafeClaim

:: argue.turtleNotSafe
$call ArgueSetClaim(Claim, jobs.bayou-turtle-danger.argue.claimLabel2) 
{@profBayou} Do you have a model that shows the turtles are not safe in {h}Site O{/h}?
$goto argue.showUnsafeClaim

:: argue.showUnsafeClaim
$call ArgueFactSlot(O_OilRig.turtleDanger.Model.Visual) 
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.goodEvidenceWrongClaim 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.goodEvidenceWrongClaim
{@profBayou} That model doesn't indicate any danger to the turtles. 
    Let's start over.
$call ArgueRejectIncorrect()
$call ArgueClearFacts()
$call ArgueCancelClaim()
$goto .argue.intro

:: argue.showSafeClaim
$call ArgueFactSlot(O_OilRig.turtleDanger.Model.Visual) 
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.complete 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelated
{@profBayou} Ok, that's interesting, but it's not answering my question.
$call ArgueRejectIncorrect()
$call ArgueClearFacts()
$call ArgueCancelClaim()
$goto .argue.intro

:: argue.giveUp
{@profBayou} OK. Get back to me when you're ready.
$call ArgueCancelClaim()

:: argue.complete
$call ArgueComplete()
{@profBayou} Nice work! It looks like the Turtles are safe from any predators here.
{@profBayou} We will need to see a descriptive model that looks at historic populations to know for certain.
$call CompleteJob()
:: end
# basePath job.bayou-shrimp-yields

// INTRO

:: start
@trigger    JobStarted
@cutscene
{@profBayou}  The Shrimpers are quite upset about the lack of shrimp in the water.
                I need you to check that the populations are in fact decreasing.

:: popCounted
@trigger    JobTasksUpdated
@when       JobTaskCompleted(countShrimp), !HasFact(P_DeadZone.PopulationHistory.WhiteShrimp)
@once
@cutscene
{@guide}    We've got the current populations now. Let's gather the historic data next.

:: probeScanned
@trigger    JobTasksUpdated
@when       JobTaskTop(reportBack)
@once
@cutscene
{@guide}    Time to tell @profBayou how the current shrimp populations compare with the past.

// CATCH-ALL GUIDE TEXT

:: catchCountShrimp
@trigger    RequestPartnerHelp
@when 		JobTaskActive(countShrimp)
@boostScore -5
@cutscene
{@guide}    There's a bunch of shrimp around here.
$if HasEntity(WhiteShrimp) 
{@guide}    Pull out your {nameof ROVTagger} and find as many as you can!
$else
{@guide}    First you'll need to scan them. Then you can use your {nameof ROVTagger} to count them.
$endif

:: catchHistProbe
@trigger    RequestPartnerHelp
@when 		JobTaskActive(histProbe)
@boostScore -5
@cutscene
{@guide}    There should be a probe around here with the historical data. We need to find it and scan it.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Head back to {@profBayou} in the station.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(shrimpYieldsArgue)
@cutscene
$call ArgueLoad(shrimpYieldsArgue) 
{@profBayou} So. Ollie.
             Are the reports of declining shrimp accurate?
$choice .argue.reportsAccurate; Yes.
$choice .argue.reportsInaccurate; Not really.
$choose branch

// Accurate

:: argue.reportsAccurate
$if ArgueSetClaim(Claim, jobs.bayou-shrimp-yields.argue.claimLabelAccurate)
    $call ArgueFactSlot(P_DeadZone.Population.WhiteShrimp) 
    $call ArgueFactSlot(P_DeadZone.PopulationHistory.WhiteShrimp) 
$endif
{@profBayou} What evidence do you have?
$branch .argue.showClaimAccurate

:: argue.showClaimAccurate
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.completeAccurate 
    $answer incorrect, .argue.unrelatedAccurate
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelatedAccurate
$call ArgueRejectIncorrect()
{@profBayou} That's not helpful, Ms. Ramirez. 
$call ArgueClearFacts()
$branch .argue.showClaimAccurate

// Inaccurate

:: argue.reportsInaccurate
$if ArgueSetClaim(Claim, jobs.bayou-shrimp-yields.argue.claimLabelInaccurate)
    $call ArgueFactSlot(P_DeadZone.Population.WhiteShrimp) 
    $call ArgueFactSlot(P_DeadZone.PopulationHistory.WhiteShrimp) 
$endif
{@profBayou} What evidence do you have?
$branch .argue.showClaimInaccurate

:: argue.showClaimInaccurate
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.completeInaccurate 
    $answer incorrect, .argue.unrelatedInaccurate
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelatedInaccurate
$call ArgueRejectIncorrect()
{@profBayou} That's not helpful, Ms. Ramirez. 
$call ArgueClearFacts()
$branch .argue.showClaimInaccurate

:: argue.completeInaccurate
{@profBayou}    I think this means the shrimp population is in decline.
                Want to revisit your claim?
$call ArgueClearFacts()
$call ArgueCancelClaim()
$goto .argue.intro

// Shared

:: argue.giveUp
{@profBayou} Okay, then. But don't take too long. A lot of people are waiting on our decision. 
$call ArgueClearFacts()
$call ArgueCancelClaim()

// End
:: argue.completeAccurate
$call ArgueComplete()
{@profBayou}    Oh, interesting. That is... unfortunate.
                We need to get to the bottom of why the shrimp are dying out.
                I'll have new jobs along this line posted shortly.
$call CompleteJob()
# basePath job.hide-n-seek

// INTRO

:: start
@trigger    JobStarted
@cutscene
{@profBayou}   Okay, Ollie. Let's jump right in.   
               I need a new model that will allow me to predict the future health of the turtles here at {h}Site O{/h}.
{@player}      Wait... what about the model I already built?
{@profBayou}   As per our last conversation, it wasn't accurate enough. 
                You must've missed an organism.
{@bayouSci}     Aw, don't look so down, Ollie. You wouldn't believe how many times I've missed stuff!
{@bayouSci}     I need you to search {h}Site O{/h} for any missing organisms.
               Then build a higher-accuracy model and report back here. 
{@player}      I'm on it. 

// CATCH-ALL GUIDE TEXT
:: catchJellyScan
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyScan)
@boostScore -5
@cutscene
{@player} What do I need to do, {nameof @guide}?
{@guide}  Return to the ERC Industries Reef, and scan whatever organism you missed last time.

:: FoundTheMissingJelly
@trigger    JobTasksUpdated
@when   JobTaskTop(jellyObservation)
@once
@cutscene 

{@player} Yes! We found it, {nameof @guide}!
          The missing species was the {pluralnameof MoonJelly}!!
          Wow... they're cute, aren't they? And sort of eerie.
{@guide}  Actually, O, {pluralnameof MoonJelly} have no ears, eyes, mouth, heart, or brain.
{@player} I... oh, never mind. Good point, V. 

:: catchJellyObservation
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyObservation)
@boostScore -5
@cutscene

{@player} What should I do now, {nameof @guide}?
{@guide}   You need to {item}observe{/item} how the {pluralnameof MoonJelly} interact with their enviornment.

:: catchJellyRates
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyRates)
@boostScore -5
@cutscene
{@player} What now, {nameof @guide}?
{@guide}    Use the {item}Measurement Tank{/item} to find how quickly turtles eat the jellyfish.

:: catchJellyPrediction
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyPrediction)
@boostScore -5
@cutscene
{@player} Can you help me out, {nameof @guide}?
{@guide}  Certainly, O. 
          You must create a {item}Prediction Model{/item} using your data about {pluralnameof MoonJelly}.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@player}   Okay. What's next?
{@guide}    You must report back to {nameof profBayou} with your findings!

:: catchVisualize
@trigger    RequestPartnerHelp
@when       scene:name == "Modeling",modeling:phase == "visual"   
@cutscene
{@player}   Do you have any idea what I'm missing, {nameof @guide}?
$if HasEntity(AngelFish),HasEntity(Cyanobacteria),HasEntity(ElkhornCoral),HasEntity(MoonJelly),HasEntity(SeaPearl),HasEntity(RedGrouper),HasEntity(LoggerheadTurtle)
    //Player has all required critters
    $if HasFact(MoonJelly.Reproduce),HasFact(LoggerheadTurtle.Reproduce),HasFact(Cyanobacteria.Reproduce),HasFact(AngelFish.Reproduce.Stressed),HasFact(ElkhornCoral.Reproduce),HasFact(RedGrouper.Reproduce)
        //Has all reproduce facts

        $if HasFact(LoggerheadTurtle.Eats.MoonJelly),HasFact(LoggerheadTurtle.Eats.Cyanobacteria),HasFact(RedGrouper.Eats.Cyanobacteria)
            //Has all eat facts
            {@guide}    You have all of the rules you need. Now make sure you have gathered all the rates. 
        $else
            {@guide}    Hmm... you seem to be missing some consumption rules. I suggests returning to your Observation Tank. 
        $endif
    $else
        //Missing at least 1 reproduction fact
        {@guide}  You seem to be missing at least one reproduction rate. 
                  You'll need to gather more data with your Measurement Tank. 
                  Make sure to obtain both the stressed and unstressed rates!
    $endif
$else
    //Player is missing at least 1 critter
    {@guide}    You are still missing some organisms, O. 
    $if !HasEntity(AngelFish)
        {@guide}    Have you scanned any of the Angelfish?
    $else
        $if !HasEntity(Cyanobacteria)
            {@guide}    Have you scanned the Cyanobacteria?
        $else
            $if !HasEntity(ElkhornCoral)
                {@guide}    Have you scanned the Elkhorn Coral?
            $else
                $if !HasEntity(SeaPearl)
                    {@guide}    Have you scanned any Sea Pearls yet?
                $else
                    $if !HasEntity(LoggerheadTurtle)
                        {@guide}    Have you scanned the Loggerhead Turtles?
                    $else
                        $if !HasEntity(RedGrouper)
                            {@guide}    Have you scanned any Red Grouper?
                        $else                 
                            $if !HasEntity(MoonJelly)
                                {@guide}    Have you scanned the Moon Jellies?
                            $endif
                        $endif
                    $endif
                $endif
            $endif
        $endif
    $endif
$endif

:: catchDescribe
@trigger    RequestPartnerHelp
@when       scene:name == "Modeling",modeling:phase == "sync"   
@cutscene
{@player}   Hmm. {nameof @guide}, can I have some help?
{@guide}    Certainly, O. Processing...
$if HasFact(AngelFish.PH.Stressed),HasFact(Cyanobacteria.PH.Stressed),HasFact(ElkhornCoral.PH.Stressed),HasFact(SeaPearl.PH.Stressed),HasFact(LoggerheadTurtle.PH.Stressed)
    //player most likely has all stress ranges 
    {@guide}    You need to measure the rate of all the interactions on the graph.
    {@guide}    Dotted lines mean you haven't measured that fact yet. 
    {@guide}    If you see any dotted lines, I suggest returning to your Measurement Tank.     
$else
    {@guide}    Did you obtain all of the stress ranges for the organisms in the graph?
    {@guide}    Without those ranges, your model won't match the historical data with the accuracy that {nameof @profBayou} needs.
$endif

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(jellyTurtle)
@cutscene
$if !ArgueIsComplete(predictJelly)
    $call ArgueLoad(predictJelly)
    {@profBayou}  Okay, Ollie. Let's not waste any time. 
                  What will happen to turtle populations in the future?
    $choice .argue.stableTurtle; Turtle populations will remain stable.
    $choice .argue.increaseTurtle; Turtle populations will increase.
    $choice .argue.decreaseTurtle; Turtle populations will decrease.
    $choose branch
$else
    $call ArgueLoad(jellyTurtle)
    {@profBayou}   You've already established that the turtle populations will remain stable.
    $if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1) 
        $call ArgueFactSlot(LoggerheadTurtle.Eats.MoonJelly)
    $endif
    $branch .argue.chooseFacts
$endif


:: argue.stableTurtle
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1)
    $call ArgueFactSlot(O_OilRig.turtleDangerJellies.Model.Predict)
$endif
{@profBayou} Have you increased the accuracy of your model from last time?
$branch argue.showClaim

:: argue.increaseTurtle
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel2)
    $call ArgueFactSlot(O_OilRig.turtleDangerJellies.Model.Predict)
$endif
{@profBayou} Can I see your model?
$branch argue.chooseFactsDummy

:: argue.decreaseTurtle
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel3)
    $call ArgueFactSlot(O_OilRig.turtleDangerJellies.Model.Predict)
$endif
{@profBayou} Can I see your model?
$branch argue.chooseFactsDummy

:: argue.showClaim
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.whatMissing 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.whatMissing
$call ArgueComplete()
$call ArgueLoad(jellyTurtle)
{@profBayou}   Ah, yes. Good work, Ollie. 
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1) 
    $call ArgueFactSlot(LoggerheadTurtle.Eats.MoonJelly)
$endif
$branch .argue.chooseFacts

:: argue.chooseFacts
How did you increase the accuracy of your model? What was missing?
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer O_OilRig.PopulationHistory.MoonJelly, .argue.jellyPop
    $answer LoggerheadTurtle.Eats.MoonJelly, .argue.complete
    $answer *, .argue.unrelated3
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.jellyPop
$if ArgueIsFactSubmitted(LoggerheadTurtle.Eats.MoonJelly)
	$branch .argue.complete
$else
	{@profBayou}	I see. How is this fact related to the Turtles?
    $call ArgueClearFacts()
	$branch .argue.chooseFacts
$endif

:: argue.turtleEat
$if ArgueIsFactSubmitted(ReefEdge.Population.LoggerheadTurtle)
	$branch .argue.complete
$else
	{@profBayou}	I see. What is the Jellyfish population here?
	$branch .argue.chooseFacts
$endif

:: argue.chooseFactsDummy
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer O_OilRig.turtleDangerJellies.Model.Predict, .argue.clarifyClaim
    $answer *, .argue.unrelated2
$choice .argue.giveUp; Let me get back to you
$choose branch

:: argue.unrelated
$call ArgueClearFacts()
{@profBayou} That's not relevant, Ms. Ramirez. 
$branch .argue.showClaim

:: argue.unrelated2
$call ArgueClearFacts()
{@profBayou} I'm afraid that doesn't answer my question. 
$branch .argue.chooseFactsDummy

:: argue.unrelated3
$call ArgueClearFacts()
{@profBayou} That's not helpful, Ms. Ramirez. 
$branch .argue.chooseFacts

:: argue.clarifyClaim
$call ArgueComplete()
$call ArgueLoad(jellyTurtle) 
{@profBayou}   Hmmm... according to your model, the turtle populations will stay within a normal range. 
{@player}      So the reef probably isn't hurting the turtles, right, Professor? 
{@profBayou}   It appears so. 
                I see that you've increased your accuracy. What did you add to the model?
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1) 
    $call ArgueFactSlot(LoggerheadTurtle.Eats.MoonJelly)
$endif
$branch .argue.chooseFacts

:: argue.giveUp
{@profBayou} Very well, Ms. Ramirez. Let me know when you're ready. 
$call ArgueClearFacts()
$call ArgueCancelClaim()
$call ArgueUnload()

// END
:: argue.complete
$call ArgueComplete()
{@profBayou}   Thank you, Ollie.
               Now that you've made a more accurate model, we'll be better equipped to make a responsible decision about that Rig.
{@player}      That's great!
{@player}      So... what HAVE you decided, Professor?
{@profBayou}   We'll discuss that next time.
               I think we're almost done here... just one more job to go.
$call CompleteJob()
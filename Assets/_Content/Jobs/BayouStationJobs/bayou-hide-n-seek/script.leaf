:: basePath job.hide-n-seek

// INTRO

:: start
@trigger    JobStarted
@cutscene

// write an intro to your job
{@profHarper}    This is the intro to the hide-n-seek job!

// CATCH-ALL GUIDE TEXT

:: catchJellyScan
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyScan)
@boostScore -5
@cutscene
{@kevin}    Revisit Site O, this time keeping an eye out for jellyfish.

:: catchJellyObservation
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyObservation)
@boostScore -5
@cutscene
{@kevin}    Put the Moon Jellies in the Observation Tank and see what happens.

:: catchJellyRates
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyRates)
@boostScore -5
@cutscene
{@kevin}    Use the Measurement Tank to find the rates of Moon Jelly behaviors.

:: catchJellyPrediction
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyPrediction)
@boostScore -5
@cutscene
{@kevin}    Create a Prediction Model using your information about Moon Jellies.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@kevin}    Report back to {nameof profHarper}.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(predictJelly) 
@cutscene
$call ArgueCancelClaim()
$call ArgueClearFacts()
$call ArgueLoad(predictJelly) 
{@profHarper} What should we do about the Oil rig in the reef?
$choice .argue.stableTurtle; Turtle populations remain stable
$choice .argue.increaseTurtle; Turtle populations will increase
$choice .argue.decreaseTurtle; Turtle populations will decrease
$choose branch

:: argue.stableTurtle
$call ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1) 
{@profHarper} Have you increased the accuracy of your model from last time?
$goto argue.showClaim

:: argue.increaseTurtle
$call ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel2) 
{@profHarper} Can I see your model?
$goto argue.chooseFactsDummy

:: argue.decreaseTurtle
$call ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel3) 
{@profHarper} Can I see your model?
$goto argue.chooseFactsDummy

:: argue.showClaim
$call ArgueFactSlot(ReefEdge.Model.TurtleVisual) 
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.whatMissing 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.whatMissing
$call ArgueComplete()
$call ArgueLoad(jellyTurtle) 
{@profHarper}   I see. Nicely done! How have you increased the accuracy of your model?
$call ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1) 
$call ArgueFactSlot(ReefEdge.Population.LoggerheadTurtle) 
$call ArgueFactSlot(LoggerheadTurtle.Eats.QueenConch) 
$goto .argue.chooseFacts

:: argue.chooseFacts
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer ReefEdge.Population.LoggerheadTurtle, .argue.jellyPop
    $answer LoggerheadTurtle.Eats.QueenConch, .argue.turtleEat
    $answer *, .argue.unrelated3
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.jellyPop
$if ArgueIsFactSubmitted(LoggerheadTurtle.Eats.QueenConch)
	$goto .argue.complete
$else
	{@profHarper}	I see. How is this fact related to the Turtles?
	$goto .argue.chooseFacts
$endif

:: argue.turtleEat
$if ArgueIsFactSubmitted(ReefEdge.Population.LoggerheadTurtle)
	$goto .argue.complete
$else
	{@profHarper}	I see. What is the population of the Jellyfish here?
	$goto .argue.chooseFacts
$endif

:: argue.chooseFactsDummy
$call ArgueFactSlot(ReefEdge.Model.TurtleVisual) 
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer ReefEdge.Model.TurtleVisual, .argue.rejectClaim
    $answer incorrect, .argue.unrelated2
$choice .argue.giveUp; Let me get back to you
$choose branch

:: argue.unrelated
$call ArgueRejectIncorrect()
{@profHarper} Ok, that's interesting, but it's not answering my question.
$goto .argue.showClaim

:: argue.unrelated2
$call ArgueRejectIncorrect()
{@profHarper} Ok, that's interesting, but it's not answering my question.
$goto .argue.chooseFactsDummy

:: argue.unrelated3
$call ArgueRejectIncorrect()
{@profHarper} Ok, that's interesting, but it's not answering my question.
$goto .argue.chooseFacts

:: argue.giveUp
{@profHarper} OK. Get back to me when you're ready.
$call ArgueCancelClaim()

// END
:: argue.rejectClaim
{@profHarper}   Hmmm... I'm not sure the data matches up with your claim.
               ?Why don't you double check your observations and revisit your claim.
$call ArgueRejectIncorrect()
$call ArgueCancelClaim()

:: argue.complete
$call ArgueComplete()
{@profHarper}   Nicely done! Nothing like a little Hide n' Seek to spice you our science.
                Keep at it! We're almost done here!

$call CompleteJob()
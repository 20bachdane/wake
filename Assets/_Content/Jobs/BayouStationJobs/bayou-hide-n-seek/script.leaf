# basePath job.hide-n-seek

// INTRO

:: start
@trigger    JobStarted
@cutscene
{@profBayou}    Okay, Ollie. Let's jump right in.   
                I need a new model that will allow me to predict the future health of the turtles here at {h}Site O{/h}.
{@player}      Wait... what about the model I already built?
{@profBayou}    As per our last conversation, it wasn't accurate enough. 
                You must've missed an organism.
$if HasEntity(MoonJelly)
    {@player}       You know, I did find a {nameof MoonJelly} since then. Maybe that was the missing piece!
    {@profBayou}    If so, that should make your task easier. Collect data on this new organism and update the model.
$else
    {@bayouSci}     Aw, don't look so down, Ollie. You wouldn't believe how many times I've missed stuff!
    {@profBayou}    I need you to search {h}Site O{/h} for any missing organisms.
                    Then build a higher-accuracy model and report back here. 
$endif
{@player}      I'm on it. 
$set jobs:hide-n-seek.sync-failed = false


// MODELING SUGGESTIONS

:: triggerSyncFailure
@trigger    SimulationSyncError
@when       !jobs:hide-n-seek.sync-failed
@once
$set jobs:hide-n-seek.sync-failed = true

:: helpModelSync.Visual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyPrediction), scene:name == "Modeling", modeling:phase == "visual"
@cutscene
$branch .modelSuggestions

:: helpModelSync.Sync
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyPrediction), scene:name == "Modeling", modeling:phase == "sync"
@cutscene
$branch .modelSuggestions

:: modelSuggestions
$if HasFact(LoggerheadTurtle.Reproduce), HasFact(LoggerheadTurtle.Eats.Cyanobacteria), HasFact(LoggerheadTurtle.Eats.AngelFish), HasFact(LoggerheadTurtle.Eats.MoonJelly), IsFactFullyUpgraded(LoggerheadTurtle.Eats.MoonJelly), HasFact(RedGrouper.Reproduce), HasFact(RedGrouper.Eats.AngelFish), IsFactFullyUpgraded(LoggerheadTurtle.Eats.AngelFish), HasFact(RedGrouper.Eats.Cyanobacteria), IsFactFullyUpgraded(RedGrouper.Eats.Cyanobacteria), HasFact(AngelFish.Reproduce.Stressed), HasFact(AngelFish.Eats.SeaPearl.Stressed), IsFactFullyUpgraded(AngelFish.Eats.SeaPearl.Stressed), HasFact(Cyanobacteria.Reproduce), HasFact(SeaPearl.Reproduce.Stressed), HasFact(MoonJelly.Reproduce), HasFact(ElkhornCoral.Reproduce), HasFact(ElkhornCoral.Reproduce.Stressed)
    $if HasFact(O_OilRig.turtleDangerJellies.Model.Visual)
        {@guide}    You're done with this portion! Head to the {h}Describe{/h} tab next.
    $else
        {@guide}    Once you import your facts and save the Visual model, we should be good to make our Describe model!
    $endif
$else
    $if !jobs:hide-n-seek.sync-failed
        {@guide}    Time to try out your model in the {h}Describe{/h} tab.
    $else
        {@guide}    Seems like we don't have enough information to complete our model accurately.
                    Look for {h}question marks{/h} in the  Visual model interface, those point to where we may need more data.
        $if !HasFact(LoggerheadTurtle.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(LoggerheadTurtle.Eats.Cyanobacteria)
            $branch .suggestTurtleEat
        $elseif !HasFact(LoggerheadTurtle.Eats.AngelFish)
            $branch .suggestTurtleEat
        $elseif !HasFact(LoggerheadTurtle.Eats.MoonJelly)
            $branch .suggestTurtleEat
        $elseif !IsFactFullyUpgraded(LoggerheadTurtle.Eats.MoonJelly)
            $branch .suggestTurtleEat
        $elseif !HasFact(RedGrouper.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(RedGrouper.Eats.AngelFish)
            $branch .suggestGrouperEat
        $elseif !IsFactFullyUpgraded(RedGrouper.Eats.AngelFish)
            $branch .suggestGrouperEat
        $elseif !HasFact(RedGrouper.Eats.Cyanobacteria)
            $branch .suggestGrouperEat
        $elseif !IsFactFullyUpgraded(RedGrouper.Eats.Cyanobacteria)
            $branch .suggestGrouperEat
        $elseif !HasFact(AngelFish.Reproduce.Stressed)
            $branch .suggestReproduce
        $elseif !HasFact(AngelFish.Eats.SeaPearl.Stressed)
            $branch .suggestAngelEat
        $elseif !IsFactFullyUpgraded(AngelFish.Eats.SeaPearl.Stressed)
            $branch .suggestAngelEat
        $elseif !HasFact(Cyanobacteria.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(SeaPearl.Reproduce.Stressed)
            $branch .suggestReproduce
        $elseif !HasFact(MoonJelly.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(ElkhornCoral.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(ElkhornCoral.Reproduce.Stressed)
            $branch .suggestReproduce
        $endif
    $endif
$endif

:: suggestReproduce
{@guide}    Did you get all the reproduction rates?

:: suggestMeasure
{@guide}    Using the {h}Measurement Tank{/h} to find the rates of unmeasured behaviors may help us here.

:: suggestTurtleEat
{@guide}    Maybe look into what {nameof LoggerheadTurtle} eats?

:: suggestGrouperEat
{@guide}    Maybe look into what {nameof RedGrouper} eats?

:: suggestAngelEat
{@guide}    Maybe look into what {nameof AngelFish} eats?


// CATCH-ALL GUIDE TEXT

:: catchJellyScan
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyScan)
@boostScore -5
@cutscene
{@player} What do I need to do, {nameof @guide}?
{@guide}  Return to the ERC Industries Reef, and scan whatever organism you missed last time.

:: FoundTheMissingJelly
@trigger    JobTasksUpdated
@when   JobTaskTop(jellyObservation)
@once
@cutscene 

{@player} Yes! We found it, {nameof @guide}!
          The missing species was the {pluralnameof MoonJelly}!!
          Wow... they're cute, aren't they? And sort of eerie.
{@guide}  Actually, O, {pluralnameof MoonJelly} have no ears, eyes, mouth, heart, or brain.
{@player} I... oh, never mind. Good point, V. 

:: catchJellyObservation
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyObservation)
@boostScore -5
@cutscene

{@player} What should I do now, {nameof @guide}?
{@guide}   You need to {item}observe{/item} how the {pluralnameof MoonJelly} interact with their environment.

:: catchJellyRates
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyRates)
@boostScore -5
@cutscene
{@player} What now, {nameof @guide}?
{@guide}    Use the {item}Measurement Tank{/item} to find how quickly turtles eat the jellyfish.

:: catchJellyPrediction
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyPrediction)
@boostScore -5
@cutscene
{@player} Can you help me out, {nameof @guide}?
{@guide}  Certainly, O. 
          You must create a {item}Prediction Model{/item} using your data about {pluralnameof MoonJelly}.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@player}   Okay. What's next?
{@guide}    You must report back to {nameof profBayou} with your findings!


// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(jellyTurtle)
@cutscene
$if !ArgueIsComplete(predictJelly)
    $call ArgueLoad(predictJelly)
    {@profBayou}  Okay, Ollie. Let's not waste any time. 
                  What will happen to turtle populations in the future?
    $choice .argue.stableTurtle; Turtle populations will remain stable.
    $choice .argue.increaseTurtle; Turtle populations will increase.
    $choice .argue.decreaseTurtle; Turtle populations will decrease.
    $choose branch
$else
    $call ArgueLoad(jellyTurtle)
    {@profBayou}   You've already established that the turtle populations will remain stable.
    $if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1) 
        $call ArgueFactSlot(LoggerheadTurtle.Eats.MoonJelly)
    $endif
    $branch .argue.chooseFacts
$endif


:: argue.stableTurtle
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1)
    $call ArgueFactSlot(O_OilRig.turtleDangerJellies.Model.Predict)
$endif
{@profBayou} Have you increased the accuracy of your model from last time?
$branch .argue.showClaim

:: argue.increaseTurtle
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel2)
    $call ArgueFactSlot(O_OilRig.turtleDangerJellies.Model.Predict)
$endif
{@profBayou} Can I see your model?
$branch .argue.chooseFactsDummy

:: argue.decreaseTurtle
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel3)
    $call ArgueFactSlot(O_OilRig.turtleDangerJellies.Model.Predict)
$endif
{@profBayou} Can I see your model?
$branch .argue.chooseFactsDummy

:: argue.showClaim
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.whatMissing 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.whatMissing
$call ArgueComplete()
$call ArgueLoad(jellyTurtle)
{@profBayou}   Ah, yes. Good work, Ollie. 
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1) 
    $call ArgueFactSlot(LoggerheadTurtle.Eats.MoonJelly)
$endif
$branch .argue.chooseFacts

:: argue.chooseFacts
{@profBayou}   How did you increase the accuracy of your model? What was missing?
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer O_OilRig.PopulationHistory.MoonJelly, .argue.jellyPop
    $answer LoggerheadTurtle.Eats.MoonJelly, .argue.complete
    $answer *, .argue.unrelated3
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.jellyPop
$if ArgueIsFactSubmitted(LoggerheadTurtle.Eats.MoonJelly)
	$branch .argue.complete
$else
	{@profBayou}	I see. How is this fact related to the Turtles?
    $call ArgueClearFacts()
	$branch .argue.chooseFacts
$endif

:: argue.turtleEat
$if ArgueIsFactSubmitted(ReefEdge.Population.LoggerheadTurtle)
	$branch .argue.complete
$else
	{@profBayou}	I see. What is the Jellyfish population here?
	$branch .argue.chooseFacts
$endif

:: argue.chooseFactsDummy
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer O_OilRig.turtleDangerJellies.Model.Predict, .argue.clarifyClaim
    $answer *, .argue.unrelated2
$choice .argue.giveUp; Let me get back to you
$choose branch

:: argue.unrelated
$call ArgueClearFacts()
{@profBayou} That's not relevant, Ms. Ramirez. 
$branch .argue.showClaim

:: argue.unrelated2
$call ArgueClearFacts()
{@profBayou} I'm afraid that doesn't answer my question. 
$branch .argue.chooseFactsDummy

:: argue.unrelated3
$call ArgueClearFacts()
{@profBayou} That's not helpful, Ms. Ramirez. 
$branch .argue.chooseFacts

:: argue.clarifyClaim
$call ArgueComplete()
$call ArgueLoad(jellyTurtle) 
{@profBayou}   Hmmm... according to your model, the turtle populations will stay within a normal range. 
{@player}      So the reef probably isn't hurting the turtles, right, Professor? 
{@profBayou}   It appears so. 
                I see that you've increased your accuracy. What did you add to the model?
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1) 
    $call ArgueFactSlot(LoggerheadTurtle.Eats.MoonJelly)
$endif
$branch .argue.chooseFacts

:: argue.giveUp
{@profBayou} Very well, Ms. Ramirez. Let me know when you're ready. 
$call ArgueClearFacts()
$call ArgueCancelClaim()
$call ArgueUnload()

// END
:: argue.complete
$call ArgueComplete()
{@profBayou}   Thank you, Ollie.
               Now that you've made a more accurate model, we'll be better equipped to make a responsible decision about that Rig.
{@player}      That's great!
{@player}      So... what HAVE you decided, Professor?
{@profBayou}   We'll discuss that next time.
               I think we're almost done here... just one more job to go.
$call CompleteJob()
:: basePath job.hide-n-seek

// INTRO

:: start
@trigger    JobStarted
@cutscene

// write an intro to your job
{@profHarper}   We are working on generating a model to predict the future health of turtles at {h}Site O{/h}.
                However, the models based on our current information are not accurate enough.
                We need to gather more organism data from the site before we proceed.

// CATCH-ALL GUIDE TEXT

:: catchJellyScan
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyScan)
@boostScore -5
@cutscene
{@kevin}    Revisit Site O, this time keeping an eye out for jellyfish.

:: catchJellyObservation
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyObservation)
@boostScore -5
@cutscene
{@kevin}    Put the Moon Jellies in the Observation Tank and see what happens.

:: catchJellyRates
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyRates)
@boostScore -5
@cutscene
{@kevin}    Use the Measurement Tank to find how quickly turtles eat the jellyfish.

:: catchJellyPrediction
@trigger    RequestPartnerHelp
@when 		JobTaskActive(jellyPrediction)
@boostScore -5
@cutscene
{@kevin}    Create a Prediction Model using your information about Moon Jellies.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@kevin}    Report back to {nameof profHarper}.

:: catchVisualize
@trigger    RequestPartnerHelp
@when       scene:name == "Modeling",modeling:phase == "visual"   
@cutscene
{@player}   Got any idea what I might be missing, V1ctor?
$if HasEntity(AngelFish),HasEntity(Cyanobacteria),HasEntity(ElkhornCoral),HasEntity(MoonJelly),HasEntity(SeaPearl),HasEntity(RedGrouper),HasEntity(LoggerheadTurtle)
    //Player has all required critters
    $if HasFact(MoonJelly.Reproduce),HasFact(LoggerheadTurtle.Reproduce),HasFact(Cyanobacteria.Reproduce),HasFact(AngelFish.Reproduce.Stressed),HasFact(ElkhornCoral.Reproduce),HasFact(RedGrouper.Reproduce)
        //Has all reproduce facts

        $if HasFact(LoggerheadTurtle.Eats.MoonJelly),HasFact(LoggerheadTurtle.Eats.Cyanobacteria),HasFact(RedGrouper.Eats.Cyanobacteria)
            //Has all eat facts
            {@kevin}    That should be all the rules we need, make sure you have all the rates and let's go!
        $else
            {@kevin}    Seems like we still are missing some consumption rules. Maybe take another look at the Observation Tank?
        $endif
    $else
        //Missing at least 1 reproduction fact
        {@kevin}    It seems like we're missing some of the reproduction rates, how about you take a trip over to the Measurement Tank?
        {@kevin}    Make sure you get both the stressed and unstressed rates!
    $endif
$else
    //Player is missing at least 1 critter
    {@kevin}    Looks like we're still missing some critters.
    $if !HasEntity(AngelFish)
        {@kevin}    Have you tried scanning the Angelfish yet?
    $else
        $if !HasEntity(Cyanobacteria)
            {@kevin}    Have you tried scanning some Cyanobacteria yet?
        $else
            $if !HasEntity(ElkhornCoral)
                {@kevin}    Have you tried scanning some Elkhorn Coral yet?
            $else
                $if !HasEntity(SeaPearl)
                    {@kevin}    Have you tried scanning any Sea Pearls yet?
                $else
                    $if !HasEntity(LoggerheadTurtle)
                        {@kevin}    Have you tried scanning some Loggerhead Turtles yet?
                    $else
                        $if !HasEntity(RedGrouper)
                            {@kevin}    Have you tried scanning some Red Grouper yet?
                        $else                 
                            $if !HasEntity(MoonJelly)
                                {@kevin}    Have you tried scanning some Moon Jellies yet?
                            $endif
                        $endif
                    $endif
                $endif
            $endif
        $endif
    $endif
$endif

:: catchDescribe
@trigger    RequestPartnerHelp
@when       scene:name == "Modeling",modeling:phase == "sync"   
@cutscene
{@player}   Hey V1ctor, could you help me out here?
{@kevin}    Sure thing, let me take a look...
$if HasFact(AngelFish.PH.Stressed),HasFact(Cyanobacteria.PH.Stressed),HasFact(ElkhornCoral.PH.Stressed),HasFact(SeaPearl.PH.Stressed),HasFact(LoggerheadTurtle.PH.Stressed)
    //player most likely has all stress ranges 
    {@kevin}    Have you measured the rate of all the interactions on the graph?
    {@kevin}    If you see any dotted lines, that means you haven't measured that fact yet. 
    {@kevin}    Head back to the measurement tank if that's the case!
$else
    {@kevin}    Did you make sure to get all the stress ranges for the critters in the graph?
    {@kevin}    Without those, your model won't be able to match the historical data as accurately.
$endif

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(jellyTurtle)
@cutscene
$call ArgueCancelClaim()
$call ArgueClearFacts()
$if !ArgueIsComplete(predictJelly)
    $call ArgueLoad(predictJelly)
    {@profHarper} What will happen to turtle populations in the future?
    $choice .argue.stableTurtle; Turtle populations remain stable
    $choice .argue.increaseTurtle; Turtle populations will increase
    $choice .argue.decreaseTurtle; Turtle populations will decrease
    $choose branch
$else
    $call ArgueLoad(jellyTurtle)
    {@profHarper}   We've already established that the turtle populations will remain stable.
    $if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1) 
        $call ArgueFactSlot(LoggerheadTurtle.Eats.MoonJelly)
    $endif
    $branch .argue.chooseFacts
$endif


:: argue.stableTurtle
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1)
    $call ArgueFactSlot(O_OilRig.turtleDangerJellies.Model.Predict)
$endif
{@profHarper} Have you increased the accuracy of your model from last time?
$branch argue.showClaim

:: argue.increaseTurtle
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel2)
    $call ArgueFactSlot(O_OilRig.turtleDangerJellies.Model.Predict)
$endif
{@profHarper} Can I see your model?
$branch argue.chooseFactsDummy

:: argue.decreaseTurtle
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel3)
    $call ArgueFactSlot(O_OilRig.turtleDangerJellies.Model.Predict)
$endif
{@profHarper} Can I see your model?
$branch argue.chooseFactsDummy

:: argue.showClaim
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.whatMissing 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.whatMissing
$call ArgueComplete()
$call ArgueLoad(jellyTurtle)
{@profHarper}   I see. Nicely done!
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1) 
    $call ArgueFactSlot(LoggerheadTurtle.Eats.MoonJelly)
$endif
$branch .argue.chooseFacts

:: argue.chooseFacts
How did you increase the accuracy of your model? What was missing?
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer O_OilRig.PopulationHistory.MoonJelly, .argue.jellyPop
    $answer LoggerheadTurtle.Eats.MoonJelly, .argue.complete
    $answer *, .argue.unrelated3
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.jellyPop
$if ArgueIsFactSubmitted(LoggerheadTurtle.Eats.MoonJelly)
	$branch .argue.complete
$else
	{@profHarper}	I see. How is this fact related to the Turtles?
    $call ArgueClearFacts()
	$branch .argue.chooseFacts
$endif

:: argue.turtleEat
$if ArgueIsFactSubmitted(ReefEdge.Population.LoggerheadTurtle)
	$branch .argue.complete
$else
	{@profHarper}	I see. What is the population of the Jellyfish here?
	$branch .argue.chooseFacts
$endif

:: argue.chooseFactsDummy
$call ArgueDisplayClaim()
$choice #argueFact; Present facts from AQOS
    $answer O_OilRig.turtleDangerJellies.Model.Predict, .argue.clarifyClaim
    $answer *, .argue.unrelated2
$choice .argue.giveUp; Let me get back to you
$choose branch

:: argue.unrelated
$call ArgueClearFacts()
{@profHarper} Ok, that's interesting, but it's not answering my question.
$branch .argue.showClaim

:: argue.unrelated2
$call ArgueClearFacts()
{@profHarper} Ok, that's interesting, but it's not answering my question.
$branch .argue.chooseFactsDummy

:: argue.unrelated3
$call ArgueClearFacts()
{@profHarper} Ok, that's interesting, but it's not answering my question.
$branch .argue.chooseFacts

:: argue.clarifyClaim
$call ArgueComplete()
$call ArgueLoad(jellyTurtle) 
{@profHarper}   In your model, the turtle population stays within a normal range. They are not in jeopardy.
                I do see that you increased your accuracy. What did you add to the model?
$if ArgueSetClaim(Claim, jobs.bayou-hide-n-seek.argue.claimLabel1) 
    $call ArgueFactSlot(LoggerheadTurtle.Eats.MoonJelly)
$endif
$branch .argue.chooseFacts

:: argue.giveUp
{@profHarper} OK. Get back to me when you're ready.
$call ArgueClearFacts()
$call ArgueCancelClaim()
$call ArgueUnload()

// END
:: argue.complete
$call ArgueComplete()
{@profHarper}   Nicely done! Nothing like a little Hide n' Seek to spice you our science.
                Keep at it! We're almost done here!

$call CompleteJob()
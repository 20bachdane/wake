# basePath job.bayou-dirty-detritus

// INTRO

:: start
@trigger    JobStarted
@cutscene
{@profBayou}    We are increasingly curious about how the ecosystem manages detritus now that the amount of it in the Dead Zone is rising.
                Please study how this substance is increasing and what eats it (if anything).

:: detritusCounted
@trigger    JobTaskCompleted(countDetritus)
@once
@cutscene
{@guide}    Time to run some experiments using {nameof Detritus}.


:: tryMeasureDetritusReproduce
@trigger	ExperimentStarted
@when		tankType == "Measurement"
@cutscene
$if ExperimentHasCritter("Detritus"), !ExperimentHasCritter("Cyanobacteria"), !ExperimentHasCritter("DecomposingBacteria"), !ExperimentHasCritter("WhiteShrimp")
	$set jobs:bayou-dirty-detritus.triedMeasureDetritusReproduce = true
$endif
$call CheckJobTasks()

// WHEN detritus shown not to reproduce: Player: Well, detritus doesn't grow on its own. I suppose that makes sense since it's just dead matter. So it must only come from organisms dying out.

:: eatRuleObtained
@trigger    JobTaskCompleted
@when       taskId == "eatDetritus"
@once
@cutscene
{@guide}    So the {nameof DecomposingBacteria} are enjoying this increase in detritus. I am certain {nameof @profBayou} will be interested to know about this.

// CATCH-ALL GUIDE TEXT

:: catchCountDetritus
@trigger    RequestPartnerHelp
@when 		JobTaskActive(countDetritus)
@boostScore -5
@cutscene
{@guide}    Head to the {nameof RS-3P} and count the {nameof Detritus}.    

:: catchEatDetritus
@trigger    RequestPartnerHelp
@when 		JobTaskActive(eatDetritus)
@boostScore -5
@cutscene
{@guide}    Run experiments in the {nameof ObservationTank} to see if any organisms from the {nameof RS-3P} eat {nameof Detritus}.

:: catchGrowDetritus
@trigger    RequestPartnerHelp
@when 		JobTaskActive(growDetritus)
@boostScore -5
@cutscene
{@guide}    Let's place {nameof Detritus} in the {nameof MeasurementTank} and check if it reproduces somehow.

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@guide}    Head back to {nameof @profBayou} in the research station.

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(dirtyDetritusArgueFinal)
@cutscene
$if ArgueIsComplete(dirtyDetritusArgueHistory)
    {@profBayou}    Previously we discussed _______.
    $branch .argue.beginExtra
$else
    $call ArgueLoad(dirtyDetritusArgueHistory) 
    {@profBayou}    Why is there so much {nameof Detritus} in the {nameof RS-3P}?
    $choice .argue.detritusReproduce; Detritus is reproducing on its own.
    $choice .argue.organismsDying; Organisms are dying out.
    $choose branch
$endif

// History

:: argue.detritusReproduce
{@profBayou}    Detritus is dead matter. It doesn't reproduce.
$call ArgueClearFacts()
$call ArgueCancelClaim()

:: argue.organismsDying
{@profBayou}    Can you show me the population histories for detritus and all organisms in the {nameof RS-3P}?
$if ArgueSetClaim(ClaimHistory, jobs.bayou-dirty-detritus.argue.claimLabelHistory)
    $call ArgueFactSlot(P_DeadZone.PopulationHistory.Cyanobacteria)
    $call ArgueFactSlot(P_DeadZone.PopulationHistory.WhiteShrimp)
    $call ArgueFactSlot(P_DeadZone.PopulationHistory.DecomposingBacteria)
    $call ArgueFactSlot(P_DeadZone.PopulationHistory.Detritus)
$endif
$branch .argue.showClaimHistory

:: argue.showClaimHistory
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.completeHistory
    $answer incorrect, .argue.unrelatedHistory
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelatedHistory
$call ArgueRejectIncorrect()
{@profBayou} That's not helpful, Ms. Ramirez. 
$branch .argue.showClaimHistory

:: argue.completeHistory
$call ArgueCancelClaim()
$call ArgueComplete()
{@profBayou}    Oh. Interesting. All of these have been cycling over the past 12 years.
{@player}   What does that mean?
{@profBayou}    It means the populations rise and fall, rise and fall, over and over again.
                If I look at the most recent history... yes.
                The {nameof WhiteShrimp} and {nameof Cyanobacteria} must be on the decline, while {nameof Detritus} and {nameof DecomposingBaceria} are on the rise.
                So in your previous job regarding the green coloration to the water, we established that there is a lot of {nameof Cyanobacteria}.
                But now we know that the {nameof Cyanobacteria} are also dying in large numbers.
$branch .argue.beginFinal

// Final

:: argue.beginFinal
 $call ArgueLoad(dirtyDetritusArgueFinal) 
$if ArgueSetClaim(ClaimFinal, jobs.bayou-dirty-detritus.argue.claimLabelFinal)
    $call ArgueFactSlot(DecomposingBaceria.Eats.Detritus) 
$endif
$branch .argue.showClaimFinal

:: argue.showClaimFinal
{@profBayou}    Did you find anything that eats {nameof Detritus}?
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.completeFinal
    $answer incorrect, .argue.unrelatedFinal
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelatedFinal
$call ArgueRejectIncorrect()
{@profBayou} That's not helpful, Ms. Ramirez. 
$branch .argue.showClaimFinal

// Shared

:: argue.giveUp
{@profBayou} Okay, then. But don't take too long. A lot of people are waiting on our decision. 
$call ArgueClearFacts()
$call ArgueCancelClaim()

// End
:: argue.completeFinal
$call ArgueComplete()
{@profBayou}    Okay, interesting. The {nameof DecomposingBacteria} must be loving all this {nameof Detritus}.
                Unfortunately we still haven't uncovered why the shrimp are dying, but I get the feeling we are closing in on an explanation.
$call CompleteJob()
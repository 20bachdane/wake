# basePath job.reef-decision

// INTRO

:: start
@trigger    JobStarted
@cutscene

// write an intro to your job
{@profBayou}   Okay, Ollie. It's time for you to make a decision about that rig.
{@bayouSci}    Well, it's about darned time! 
{@player}      Wait... me?? 
               I mean, I thought YOU would handle the actual decision-making...
{@profBayou}   You've proven yourself. I'd like your input.
               If the ERC Industries Rig goes, all the {nameof ElkhornCoral} and {pluralnameof SeaPearl} out there--and all the species that depend on them--go with it.
               I need you to predict how removing the rig would affect the turtles. 
               Then report back and give me your professional recommendation.
{@player}      Okay. Got it, Professor. 
$set jobs:bayou-reef-decision.intervene-failed = false


// MODELING SUGGESTIONS

:: triggerSyncFailure
@trigger    SimulationInterveneError
@when       !jobs:bayou-reef-decision.intervene-failed
@once
$set jobs:bayou-reef-decision.intervene-failed = true

:: helpModelSync.Visual
@trigger    RequestPartnerHelp
@when 		JobTaskActive(interventionDecision), scene:name == "Modeling", modeling:phase == "visual"
@cutscene
$branch .modelSuggestions

:: helpModelSync.Sync
@trigger    RequestPartnerHelp
@when 		JobTaskActive(interventionDecision), scene:name == "Modeling", modeling:phase == "sync"
@cutscene
$branch .modelSuggestions

:: helpModelIntervene
@trigger    RequestPartnerHelp
@when 		JobTaskActive(interventionDecision), scene:name == "Modeling", modeling:phase == "intervene"
@cutscene
$branch .modelSuggestions

:: modelSuggestions
$if HasFact(LoggerheadTurtle.Reproduce), HasFact(LoggerheadTurtle.Eats.Cyanobacteria), HasFact(LoggerheadTurtle.Eats.AngelFish), HasFact(LoggerheadTurtle.Eats.MoonJelly), IsFactFullyUpgraded(LoggerheadTurtle.Eats.MoonJelly), HasFact(RedGrouper.Reproduce), HasFact(RedGrouper.Eats.AngelFish), IsFactFullyUpgraded(LoggerheadTurtle.Eats.AngelFish), HasFact(RedGrouper.Eats.Cyanobacteria), IsFactFullyUpgraded(RedGrouper.Eats.Cyanobacteria), HasFact(AngelFish.Reproduce.Stressed), HasFact(AngelFish.Eats.SeaPearl.Stressed), IsFactFullyUpgraded(AngelFish.Eats.SeaPearl.Stressed), HasFact(Cyanobacteria.Reproduce), HasFact(SeaPearl.Reproduce.Stressed), HasFact(SeaPearl.Reproduce), HasFact(MoonJelly.Reproduce), HasFact(ElkhornCoral.Reproduce), HasFact(ElkhornCoral.Reproduce.Stressed)
    {@guide}    Once you import your facts and save the Visual model, we should be good to make our Intervene model!
$else
    $if !jobs:hide-n-seek.intervene-failed
        {@guide}    Time to try out your model in the {h}Intervene{/h} tab.
    $else
        {@guide}    Seems like we don't have enough information to complete our model accurately.
                    Look for {h}question marks{/h} in the Visual model interface, those point to where we may need more data.
        $if !HasFact(LoggerheadTurtle.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(LoggerheadTurtle.Eats.Cyanobacteria)
            $branch .suggestTurtleEat
        $elseif !HasFact(LoggerheadTurtle.Eats.AngelFish)
            $branch .suggestTurtleEat
        $elseif !HasFact(LoggerheadTurtle.Eats.MoonJelly)
            $branch .suggestTurtleEat
        $elseif !IsFactFullyUpgraded(LoggerheadTurtle.Eats.MoonJelly)
            $branch .suggestTurtleEat
        $elseif !HasFact(RedGrouper.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(RedGrouper.Eats.AngelFish)
            $branch .suggestGrouperEat
        $elseif !IsFactFullyUpgraded(RedGrouper.Eats.AngelFish)
            $branch .suggestGrouperEat
        $elseif !HasFact(RedGrouper.Eats.Cyanobacteria)
            $branch .suggestGrouperEat
        $elseif !IsFactFullyUpgraded(RedGrouper.Eats.Cyanobacteria)
            $branch .suggestGrouperEat
        $elseif !HasFact(AngelFish.Reproduce.Stressed)
            $branch .suggestReproduce
        $elseif !HasFact(AngelFish.Eats.SeaPearl.Stressed)
            $branch .suggestAngelEat
        $elseif !IsFactFullyUpgraded(AngelFish.Eats.SeaPearl.Stressed)
            $branch .suggestAngelEat
        $elseif !HasFact(Cyanobacteria.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(SeaPearl.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(SeaPearl.Reproduce.Stressed)
            $branch .suggestReproduce
        $elseif !HasFact(MoonJelly.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(ElkhornCoral.Reproduce)
            $branch .suggestReproduce
        $elseif !HasFact(ElkhornCoral.Reproduce.Stressed)
            $branch .suggestReproduce
        $endif
    $endif
$endif

:: suggestReproduce
{@guide}    Did you get all the reproduction rates?

:: suggestMeasure
{@guide}    Using the {h}Measurement Tank{/h} to find the rates of unmeasured behaviors may help us here.

:: suggestTurtleEat
{@guide}    Maybe look into what {nameof LoggerheadTurtle} eats?

:: suggestGrouperEat
{@guide}    Maybe look into what {nameof RedGrouper} eats?

:: suggestAngelEat
{@guide}    Maybe look into what {nameof AngelFish} eats?


// CATCH-ALL GUIDE TEXT

:: catchInterventionDecision
@trigger    RequestPartnerHelp
@when 		JobTaskActive(interventionDecision)
@boostScore -5
@cutscene
{@player}  Okay, {nameof @guide}. What now? 
{@guide}   You need to create an Intervention Model using facts about the artificial reef.

:: RigDecisionTime
@trigger  JobTasksUpdated
@when     JobTaskActive(reportBack)
@once
@cutscene

{@guide} You've gathered the required data. Now you'll need to share your decision with {nameof @profBayou}!
{@player}  Ugh. Back home, Mom handled this sort of thing
          The turtles will be okay either way. So what's the right choice here? 
{@guide}  Answer: inconclusive. 
{@player} What about the Cyanobacteria? And the Sea Pearls? 
{@guide}   Answer: inconclusive.
{@player}  You're not going to tell me what to do, are you, {nameof @guide}?
{@guide}  I'm afraid not, O. You are required to make this decision yourself. 
$call GiveJournalEntry("N23_ReefRemoval")

:: catchReportBack
@trigger    RequestPartnerHelp
@when 		JobTaskActive(reportBack)
@boostScore -5
@cutscene
{@player}   What should I do now, {nameof @guide}?
{@guide}    Report back to {nameof profBayou}!

// ARGUMENTATION

::argue.intro
@trigger    TryArgumentation
@when   !ArgueIsComplete(siteOIntervene)
@cutscene
$call ArgueLoad(siteOIntervene) 
{@profBayou} Okay, Ollie.
             It's time to hear your recommendation. 
             What should we do about the ERC Industries Rig?
$choice .argue.removeRig; We should remove the rig.
$choice .argue.leaveRig; We should leave the rig.
$choose branch

:: argue.removeRig
$if ArgueSetClaim(Claim, jobs.bayou-reef-decision.argue.claimLabel1)
    $call ArgueFactSlot(O_OilRig.turtleDangerNoReef.Model.Intervene) 
$endif
{@profBayou} What data did you use to make this decision? 
$branch .argue.showClaim

:: argue.leaveRig
$if ArgueSetClaim(Claim, jobs.bayou-reef-decision.argue.claimLabel2) 
    $call ArgueFactSlot(O_OilRig.turtleDangerNoReef.Model.Intervene) 
$endif
{@profBayou} What data did you use to make this decision? 
$branch .argue.showClaim

:: argue.showClaim
$call ArgueDisplayClaim()
$choice #argueFactSet; Present facts from AQOS
    $answer correct, .argue.complete 
    $answer incorrect, .argue.unrelated
$choice .argue.giveUp; Let me get back to you.
$choose branch

:: argue.unrelated
$call ArgueRejectIncorrect()
{@profBayou} That's not helpful, Ms. Ramirez. 
$call ArgueClearFacts()
$branch .argue.showClaim

:: argue.giveUp
{@profBayou} Okay, then. But don't take too long. A lot of people are waiting on our decision. 
$call ArgueClearFacts()
$call ArgueCancelClaim()

// END

:: argue.complete
$call ArgueComplete()
{@profBayou}  Hmm. This is fascinating.
              Either way, the turtle populations will remain stable... but it seems that other organisms will be affected. 
              I'd like to go with your recommendation, Ollie.
{@player}     Mine? ¿¿En serio??
              But.. I'm still pretty new at this. 
{@profBayou}  You're also incredibly thoughtful, and you used your data to make the best choice you could.
              I wasn't sure you'd have the courage to make a recommendation. I'm impressed. 
{@bayouSci}   Well, well. The professor saying something nice? 
              Maybe she is human, after all. 
$call CompleteJob()
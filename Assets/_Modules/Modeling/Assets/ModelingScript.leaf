# basePath modeling

// intro scripts

:: generic.visual-model.intro
@trigger    SceneStart
@when       scene:name == "Modeling", !jobs:visual-model.saved
@boostScore 1052 // arbitraryily high number
@cutscene

$branch common.ringPhone

{@kevin}   Okay, this is the {h}Modeling Whiteboard{/h}.
            So you observed that {pluralnameof Urchin} eat {critter-name}Kelp{/critter-name}.
            And you also observed that {pluralnameof SeaOtter} eat {pluralnameof Urchin}.
            We can take those facts and add them to a {h}Visual Model{/h}. That can help us see how they fit together.
            Select the {nameof UrchinBarren} ecosystem and click on the {h}Visualize{/h} tab.
$set jobs:visual-model.saved = true`
			
:: generic.visual-model.saved
@trigger	VisualModelExported
@boostScore 1051 // arbitraryily high number
@when		scene:name == "Modeling"
@cutscene
// uncomment if we want visual-model intro to repeat until the player successfully saves the model
//$set jobs:visual-model.saved = true

:: generic.sync-model.intro
@trigger	SimulationModelStarted
@boostScore 1051 // arbitraryily high number
@when		scene:name == "Modeling", HasUpgrade(SyncModel), !jobs:sync-model.saved
@cutscene
{@kevin}	So this is the {h}{nameof SyncModel}{/h}! This is where all your facts get turned into a big simulation.
			What that practically means is we have a bunch of virtual organisms interacting with each other.
            And their interactions are driven by the facts you have.
            So if you've got a fact that says "{pluralnameof Urchin} eat {pluralnameof GiantKelp}", then these virtual Urchins will eat the virtual Giant Kelp.
            More than that, though, you can use the population histories you download from various sites.
            Those histories are represented on the graph by thick faded lines.
            As your virtual organisms eat, and die, and reproduce, their populations will show up on the graph too.
            Your goal is to get those lines to line up with the historical populations!
			
:: generic.sync-model.saved
@trigger	SimulationSyncSuccess
@boostScore 1052 // arbitraryily high number
@when		scene:name == "Modeling", HasUpgrade(SyncModel)
@cutscene
$set jobs:sync-model.saved = true

:: generic.prediction-model.intro
@trigger	PredictModelStarted
@boostScore 1050 // arbitraryily high number
@when		scene:name == "Modeling", HasUpgrade(PredictionModel), !jobs:predict-model.saved
@cutscene
{@kevin}	Once we have a complete {nameof SyncModel}, we can click the button that says {h}Run Prediction{/h}.
{@kevin}	This will provide us with a model forecasting what the site will look like in the future!
{@kevin}	If you see dotted lines, those mean that you have observed relationships between organisms but you don't have the exact rates.
{@kevin}	Make sure to measure missing rates by using the {h}Measurement Tank{/h}.

:: generic.prediction-model.saved
@trigger	SimulationPredictSuccess
@boostScore 1052 // arbitraryily high number
@when		scene:name == "Modeling", HasUpgrade(VisualModel)
@cutscene
$set jobs:predict-model.saved = true

:: generic.intervene-model.intro
@trigger	InterveneModelStarted
@boostScore 1049 // arbitraryily high number
@when		scene:name == "Modeling", HasUpgrade(InterveneModel), !jobs:intervene-model.saved
@cutscene
{@kevin}	Okay, so this is the {h}{nameof InterveneModel}{/h}. From here you can see what might happen if you intervene in an ecosystem.
            You can determine what would happen if we added more of one kind of organism or removed another kind.
            You can use the plus and minus buttons next to the organisms to increase or decrease their populations.
            And use the {h}Add Organism{/h} button to select a new organism to add.
            We can only simulate one intervention at a time, though, so no adding multiple new organisms or adjusting multiple populations.

:: generic.intervene-model.saved
@trigger	SimulationInterveneSuccess
@boostScore 1052 // arbitraryily high number
@when		scene:name == "Modeling", HasUpgrade(VisualModel)
@cutscene
$set jobs:intervene-model.saved = true